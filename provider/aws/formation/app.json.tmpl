{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Conditions": {
    {{ template "service-conditions" .Manifest }}

    "BlankIamPolicy": { "Fn::Equals": [ { "Ref": "IamPolicy" }, "" ] },
    "BlankLogBucket": { "Fn::Equals": [ { "Ref": "LogBucket" }, "" ] },
    "BlankLogRetention": { "Fn::Equals": [ { "Ref": "LogRetention" }, "" ] },
    "BlankResourcePassword": { "Fn::Equals": [ { "Ref": "ResourcePassword" }, "" ] },
    "FargateServices": { "Fn::Equals": [ { "Ref": "FargateServices" }, "Yes" ] },
    "FargateTimers": { "Fn::Equals": [ { "Ref": "FargateTimers" }, "Yes" ] },
    "InternalDomains": { "Fn::Equals": [ { "Ref": "InternalDomains" }, "Yes" ] },
    "Isolate": { "Fn::And": [ { "Condition": "Private" }, { "Fn::Equals": [ { "Ref": "Isolate" }, "Yes" ] } ] },
    "IsolateServices": { "Fn::Or": [ { "Condition": "FargateServices" }, { "Condition": "Isolate" } ] },
    "Private": { "Fn::Equals": [ { "Ref": "Private" }, "Yes" ] },
    "RackUrl": { "Fn::Equals": [ { "Ref": "RackUrl" }, "Yes" ] }
  },
  "Outputs": {
    {{ template "balancer-outputs" . }}
    {{ template "service-outputs" .Manifest }}

    "Agents": {
      "Value": "{{ join .Manifest.Agents "," }}"
    },
    "FargateServices": {
      "Value": { "Fn::If": [ "FargateServices", "Yes", "No" ] }
    },
    "LogGroup": {
      "Value": { "Ref": "LogGroup" }
    },
    "Release": {
      "Value": "{{ .Release.Id }}"
    },
    "Services": {
      "Value": "{{ services .Manifest }}"
    },
    "ServiceRole": {
      "Export": { "Name": { "Fn::Sub": "${AWS::StackName}:ServiceRole" } },
      "Value": { "Fn::GetAtt": [ "ServiceRole", "Arn" ] }
    }
  },
  "Parameters" : {
    {{ template "service-params" .Manifest }}

    "FargateServices": {
      "Type": "String",
      "Default": "No",
      "AllowedValues": [ "Yes", "No" ]
    },
    "FargateTimers": {
      "Type": "String",
      "Default": "No",
      "AllowedValues": [ "Yes", "No" ]
    },
    "IamPolicy": {
      "Type": "String",
      "Default": ""
    },
    "InternalDomains": {
      "Type": "String",
      "Default": "Yes",
      "AllowedValues": [ "Yes", "No" ]
    },
    "Isolate": {
      "Type": "String",
      "Default": "No",
      "AllowedValues": [ "Yes", "No" ]
    },
    "LogBucket": {
      "Type": "String",
      "Default": ""
    },
    "LogRetention": {
      "Default": "",
      "Description": "Number of days to keep logs (blank for unlimited)",
      "Type": "String"
    },
    "Private": {
      "Type": "String",
      "Default": "No",
      "AllowedValues": [ "Yes", "No" ]
    },
    "Rack": {
      "Type": "String",
      "MinLength": "1"
    },
    "RackUrl": {
      "Type": "String",
      "Default": "No",
      "Description": "Add RACK_URL to the application environment",
      "AllowedValues": [ "Yes", "No" ]
    },
    "RedirectHttps": {
      "Type": "String",
      "Default": "Yes",
      "Description": "Redirect all HTTP connection to HTTPS",
      "AllowedValues": [ "Yes", "No" ]
    },
    "ResourcePassword": {
      "Type": "String",
      "Default": "",
      "Description": "Override the password set for embedded resources",
      "NoEcho": true
    }
  },
  "Resources": {
    {{ template "balancer-resources" . }}
    {{ template "resource-resources" . }}
    {{ template "service-resources" . }}
    {{ template "timer-resources" . }}

    {{ template "state" }}

    "ExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [ { "Effect": "Allow", "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ] }, "Action": [ "sts:AssumeRole" ] } ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [ "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy" ],
        "Path": "/convox/"
      }
    },
    "LogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": { "Fn::If": [ "BlankLogRetention", { "Ref": "AWS::NoValue" }, { "Ref": "LogRetention" } ] }
      }
    },
    "Registry": {
      "Type": "AWS::ECR::Repository",
      "DeletionPolicy": "Retain"
    }
  }
}

{{ define "balancer-outputs" }}
{{ end }}

{{ define "balancer-resources" }}
  {{ range .Manifest.Services }}
    {{ if .Port.Port }}
      "RecordSet{{ upper .Name }}Internal": {
        "Type": "AWS::Route53::RecordSet",
        "Condition": "InternalDomains",
        "Properties": {
          "HostedZoneId": { "Fn::ImportValue": { "Fn::Sub": "${Rack}:HostedZone" } },
          "Name": { "Fn::Sub": "{{.Name}}.{{$.App}}.${Rack}.convox." },
          "Type": "CNAME",
          "TTL": "3600",
          "ResourceRecords": [ { "Fn::ImportValue": { "Fn::Sub": "${Rack}:Domain{{ if .Internal }}Internal{{ end }}" } } ]
        }
      },
      {{ if not (certificate $.Certificates .Domains) }}
        "Balancer{{ upper .Name }}Certificate": {
          "Type": "AWS::CertificateManager::Certificate",
          "Properties": {
            "DomainName": "{{ .Domain }}",
            "DomainValidationOptions": [
              {{ range .Domains }}
                { "DomainName": "{{ . }}", "ValidationDomain": "{{ apex . }}" },
              {{ end }}
              { "Ref": "AWS::NoValue" }
            ],
            "SubjectAlternativeNames": [
              {{ range .Domains }}
                "{{.}}",
              {{ end }}
              { "Ref": "AWS::NoValue" }
            ]
          }
        },
      {{ end }}
    {{ end }}
  {{ end }}
{{ end }}

{{ define "resource-resources" }}
  {{ range .Manifest.Resources }}
    "Resource{{ upper .Name }}": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "NotificationARNs": [ "{{ $.Topic }}" ],
        "Parameters": {
          {{ range $k, $v := (index $ (printf "ResourceParams%s" (upper .Name) ) ) }}
            "{{$k}}": "{{$v}}",
          {{ end }}
          "Password": { "Fn::If": [ "BlankResourcePassword",
            { "Fn::Select": [ 2, { "Fn::Split": [ "/", { "Ref": "AWS::StackId" } ] } ] },
            { "Ref": "ResourcePassword" }
          ] },
          "Rack": { "Ref": "Rack" }
        },
        "Tags": [
          { "Key": "App", "Value": "{{$.App}}" },
          { "Key": "Name", "Value": "{{.Name}}" },
          { "Key": "Type", "Value": "resource" }
        ],
        "TemplateURL": "{{ index $ (printf "ResourceTemplate%s" (upper .Name) ) }}"
      }
    },
  {{ end }}
{{ end }}

{{ define "service-conditions" }}
  {{ range .Services }}
    "Service{{ upper .Name }}Fargate": { "Fn::Or": [
      { "Fn::Equals": [
        { "Fn::Select": [ 3,
          { "Fn::Split": [ ",", { "Fn::Sub": [ "${Formation},", { "Formation": { "Fn::Join": [ ",", { "Ref": "{{ upper .Name }}Formation" } ] } } ] } ] }
        ] },
        "FARGATE"
      ] },
      { "Condition": "FargateServices" }
    ] },
  {{ end }}
{{ end }}

{{ define "service-outputs" }}
  {{ range .Services }}
    "Service{{ upper .Name }}Service": {
      "Value": { "Fn::GetAtt": [ "Service{{ upper .Name }}", "Outputs.Service" ] }
    },
  {{ end }}
{{ end }}

{{ define "service-params" }}
  {{ range .Services }}
    "{{ upper .Name }}Formation": {
      "Type": "CommaDelimitedList",
      "Default": "{{.Scale.Count.Min}},{{.Scale.Cpu}},{{.Scale.Memory}}",
      "Description": "Count,CPU,Memory"
    },
  {{ end }}
{{ end }}

{{ define "service-resources" }}
  "ServiceRole": {
    "Type": "AWS::IAM::Role",
    "Properties": {
      "AssumeRolePolicyDocument": {
        "Statement": [ { "Effect": "Allow", "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ] }, "Action": [ "sts:AssumeRole" ] } ],
        "Version": "2012-10-17"
      },
      "ManagedPolicyArns": [ { "Fn::If": [ "BlankIamPolicy", { "Ref": "AWS::NoValue" }, { "Ref": "IamPolicy" } ] } ],
      "Path": "/convox/",
      "Policies": [ {
        "PolicyName": "convox-env",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            { "Effect": "Allow", "Action": "s3:GetObject", "Resource": { "Fn::Sub": "arn:aws:s3:::${Settings}/*" } },
            { "Effect": "Allow", "Action": "kms:Decrypt", "Resource": { "Fn::ImportValue": { "Fn::Sub": "${Rack}:EncryptionKey" } } }
          ]
        }
      } ]
    }
  },
  {{ range .Manifest.Services }}
    "Service{{ upper .Name }}": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "NotificationARNs": [ "{{ $.Topic }}" ],
        "Parameters": {
          {{ if not .Domain }}
            {{ if .Internal }}
              "Certificate": { "Fn::ImportValue": { "Fn::Sub": "${Rack}:RouterInternalCertificate" } },
            {{ else }}
              "Certificate": { "Fn::ImportValue": { "Fn::Sub": "${Rack}:RouterCertificate" } },
            {{ end }}
          {{ else if $existing := certificate $.Certificates .Domains }}
            "Certificate": "{{$existing}}",
          {{ else }}
            "Certificate": { "Ref": "Balancer{{ upper .Name }}Certificate" },
          {{ end }}
          "Count": { "Fn::Select": [ 0, { "Ref": "{{ upper .Name }}Formation" } ] },
          "Cpu": { "Fn::Select": [ 1, { "Ref": "{{ upper .Name }}Formation" } ] },
          "Fargate": { "Fn::If": [ "Service{{ upper .Name }}Fargate", "Yes", "No" ] },
          "LogGroup": { "Ref": "LogGroup" },
          "InternalDomains": { "Ref": "InternalDomains" },
          "Isolate": { "Fn::If": [ "IsolateServices", "Yes", "No" ] },
          "Memory": { "Fn::Select": [ 2, { "Ref": "{{ upper .Name }}Formation" } ] },
          "Private": { "Ref": "Private" },
          "Rack": { "Ref": "Rack" },
          "RackUrl": { "Ref": "RackUrl" },
          "RedirectHttps": { "Ref": "RedirectHttps" },
          "Registry": { "Ref": "Registry" },
          {{ range .Resources }}
            "Resource{{ upper . }}": { "Fn::GetAtt": [ "Resource{{ upper . }}", "Outputs.Url" ] },
          {{ end }}
          "Role": { "Fn::GetAtt": [ "ServiceRole", "Arn" ] },
          "Settings": { "Ref": "Settings" }
        },
        "Tags": [
          { "Key": "App", "Value": "{{ $.App }}" },
          { "Key": "Name", "Value": "{{ .Name }}" },
          { "Key": "Type", "Value": "service" }
        ],
        "TemplateURL": "{{ index $ (printf "ServiceTemplate%s" (upper .Name) ) }}"
      }
    },
  {{ end }}
{{ end }}

{{ define "timer-resources" }}
  {{ if .Manifest.Timers }}
    "TimerLauncher": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": { "Fn::GetAtt": [ "TimerRole", "Arn" ] },
        "Runtime": "nodejs6.10",
        "Timeout": 60,
        "Code": {
          "ZipFile": { "Fn::Join": [ "\n", [
            "exports.handler = function(event, context, cb) {",
            "  var params = {",
            "    cluster: event.cluster,",
            "    taskDefinition: event.taskDefinition,",
            "    count: 1,",
            { "Fn::If": [ "FargateTimers",
              "    launchType: 'FARGATE',",
              "    launchType: 'EC2',"
            ] },
            "    networkConfiguration: {",
            "      awsvpcConfiguration: {",
            { "Fn::If": [ "FargateTimers",
              "        assignPublicIp: 'ENABLED',",
              { "Ref": "AWS::NoValue" }
            ] },
            "        subnets: [",
            { "Fn::Sub": [ "          \"${Subnet0}\", \"${Subnet1}\"", {
              "Subnet0": { "Fn::If": [ "Private",
                { "Fn::ImportValue": { "Fn::Sub": "${Rack}:SubnetPrivate0" } },
                { "Fn::ImportValue": { "Fn::Sub": "${Rack}:Subnet0" } }
              ] },
              "Subnet1": { "Fn::If": [ "Private",
                { "Fn::ImportValue": { "Fn::Sub": "${Rack}:SubnetPrivate1" } },
                { "Fn::ImportValue": { "Fn::Sub": "${Rack}:Subnet1" } }
              ] }
            } ] },
            "        ]",
            "      }",
            "    }",
            "  };",
            "  var aws = require('aws-sdk');",
            "  var ecs = new aws.ECS({maxRetries:10});",
            "  ecs.runTask(params, function (err, res) {",
            "    console.log('res', res);",
            "    cb(err);",
            "  });",
            "};"
          ] ] }
        }
      }
    },
    "TimerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            { "Effect": "Allow", "Action": [ "sts:AssumeRole" ], "Principal": { "Service": [ "events.amazonaws.com" ] } },
            { "Effect": "Allow", "Action": [ "sts:AssumeRole" ], "Principal": { "Service": [ "lambda.amazonaws.com" ] } }
          ]
        },
        "ManagedPolicyArns": [ "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole" ],
        "Path": "/convox/",
        "Policies": [
          {
            "PolicyName": "TimerRole",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [ "ecs:RunTask" ],
                  "Resource": { "Fn::Sub": "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/${AWS::StackName}-Timer*" },
                  "Condition": {
                    "ArnEquals": {
                      "ecs:cluster": { "Fn::Join": [ "", [
                        "arn:aws:ecs:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":cluster/", { "Fn::ImportValue": { "Fn::Sub": "${Rack}:Cluster" } }
                      ] ] }
                    }
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [ "iam:PassRole" ],
                  "Resource": [
                    { "Fn::GetAtt": [ "ExecutionRole", "Arn" ] },
                    { "Fn::GetAtt": [ "ServiceRole", "Arn" ] }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
  {{ end }}
  {{ range $t := .Manifest.Timers }}
    "Timer{{ upper .Name }}": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "NotificationARNs": [ "{{ $.Topic }}" ],
        "Parameters": {
          "Cpu": { "Fn::Select": [ 1, { "Ref": "{{ upper .Service }}Formation" } ] },
          "ExecutionRole": { "Fn::GetAtt": [ "ExecutionRole", "Arn" ] },
          "Fargate": { "Fn::If": [ "FargateTimers", "Yes", "No" ] },
          "Launcher": { "Fn::GetAtt": [ "TimerLauncher", "Arn" ] },
          "LogGroup": { "Ref": "LogGroup" },
          "Memory": { "Fn::Select": [ 2, { "Ref": "{{ upper .Service }}Formation" } ] },
          "Rack": { "Ref": "Rack" },
          "RackUrl": { "Ref": "RackUrl" },
          "Registry": { "Ref": "Registry" },
          {{ range ($.Manifest.Service .Service).Resources }}
            "Resource{{ upper . }}": { "Fn::GetAtt": [ "Resource{{ upper . }}", "Outputs.Url" ] },
          {{ end }}
          "Role": { "Fn::GetAtt": [ "TimerRole", "Arn" ] },
          "ServiceRole": { "Fn::GetAtt": [ "ServiceRole", "Arn" ] },
          "Settings": { "Ref": "Settings" }
        },
        "Tags": [
          { "Key": "App", "Value": "{{ $.App }}" },
          { "Key": "Name", "Value": "{{ .Name }}" },
          { "Key": "Type", "Value": "timer" }
        ],
        "TemplateURL": "{{ index $ (printf "TimerTemplate%s" (upper .Name) ) }}"
      }
    },
  {{ end }}
{{ end }}

{{ define "state" }}
  "Settings": {
    "Type": "AWS::S3::Bucket",
    "DeletionPolicy": "Retain",
    "Properties": {
      "AccessControl": "Private",
      "BucketEncryption": {
        "ServerSideEncryptionConfiguration": [ { "ServerSideEncryptionByDefault": { "SSEAlgorithm": "aws:kms" } } ]
      },
      "LoggingConfiguration": { "Fn::If": [ "BlankLogBucket",
        { "Ref": "AWS::NoValue" },
        {
          "DestinationBucketName": { "Ref": "LogBucket" },
          "LogFilePrefix": { "Fn::Sub": "convox/logs/${AWS::StackName}/s3/" }
        }
      ] },
      "Tags": [
        { "Key": "system", "Value": "convox" },
        { "Key": "app", "Value": { "Ref": "AWS::StackName" } }
      ]
    }
  },
{{ end }}
