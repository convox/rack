AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  Autoscale: !Equals
    - !Ref 'Autoscale'
    - 'Yes'
  BlankAmi: !Equals
    - !Ref 'Ami'
    - ''
  BlankAvailabilityZones: !Equals
    - !Join
      - ''
      - !Ref 'AvailabilityZones'
    - ''
  BlankBuildImage: !Equals
    - !Ref 'BuildImage'
    - ''
  BlankExistingVpc: !Equals
    - !Ref 'ExistingVpc'
    - ''
  BlankExistingVpcAndThirdAvailabilityZone: !And
    - !Condition 'BlankExistingVpc'
    - !Condition 'ThirdAvailabilityZone'
  BlankInstanceBootCommand: !Equals
    - !Ref 'InstanceBootCommand'
    - ''
  BlankInstancePolicy: !Equals
    - !Ref 'InstancePolicy'
    - ''
  BlankInstanceRunCommand: !Equals
    - !Ref 'InstanceRunCommand'
    - ''
  BlankInstanceSecurityGroup: !Equals
    - !Ref 'InstanceSecurityGroup'
    - ''
  BlankInternalSuffix: !Equals
    - !Ref 'InternalSuffix'
    - ''
  BlankInternetGateway: !Equals
    - !Ref 'InternetGateway'
    - ''
  BlankKey: !Equals
    - !Ref 'Key'
    - ''
  BlankLogBucket: !Equals
    - !Ref 'LogBucket'
    - ''
  BlankLogRetention: !Equals
    - !Ref 'LogRetention'
    - ''
  BlankPrivateApiSecurityGroup: !Equals
    - !Ref 'PrivateApiSecurityGroup'
    - ''
  BlankRouterSecurityGroup: !Equals
    - !Join
      - ','
      - !Ref 'RouterSecurityGroup'
    - ''
  BlankRouterInternalSecurityGroup: !Equals
    - !Join
      - ','
      - !Ref 'RouterInternalSecurityGroup'
    - ''
  BlankSslPolicy: !Equals
    - !Ref 'SslPolicy'
    - ''
  DedicatedBuilder: !Not
    - !Equals
      - !Ref 'BuildInstance'
      - ''
  Development: !Equals
    - !Ref 'Development'
    - 'Yes'
  EncryptEbs: !Equals
    - !Ref 'EncryptEbs'
    - 'Yes'
  ExistingVpc: !Not
    - !Equals
      - !Ref 'ExistingVpc'
      - ''
  ExistingVpcAndBlankInternetGateway: !And
    - !Condition 'ExistingVpc'
    - !Condition 'BlankInternetGateway'
  ExistingVpcAndInternetGateway: !And
    - !Condition 'ExistingVpc'
    - !Condition 'InternetGateway'
  HttpProxy: !Not
    - !Equals
      - !Ref 'HttpProxy'
      - ''
  Internal: !Equals
    - !Ref 'Internal'
    - 'Yes'
  InternetGateway: !Not
    - !Equals
      - !Ref 'InternetGateway'
      - ''
  NotExistingVpcAndBlankInternetGateway: !Not
    - !Condition 'ExistingVpcAndBlankInternetGateway'
  Private: !Equals
    - !Ref 'Private'
    - 'Yes'
  PrivateAndThirdAvailabilityZone: !And
    - !Condition 'Private'
    - !Condition 'ThirdAvailabilityZone'
  PrivateApi: !Equals
    - !Ref 'PrivateApi'
    - 'Yes'
  PublicRouter: !Equals
    - !Ref 'InternalOnly'
    - 'No'
  RegionHasEFS: !Equals
    - !FindInMap
      - RegionConfig
      - !Ref 'AWS::Region'
      - EFS
    - 'Yes'
  RegionHasEFSAndThirdAvailabilityZone: !And
    - !Condition 'RegionHasEFS'
    - !Condition 'ThirdAvailabilityZone'
  SpotInstances: !Not
    - !Equals
      - !Ref 'SpotInstanceBid'
      - ''
  SwapEnabled: !Not
    - !Equals
      - !Ref 'SwapSize'
      - '0'
  ThirdAvailabilityZone: !And
    - !Equals
      - !FindInMap
        - RegionConfig
        - !Ref 'AWS::Region'
        - ThirdAvailabilityZone
      - 'Yes'
    - !Equals
      - !Ref 'MaxAvailabilityZones'
      - '3'
  ThirdAvailabilityZoneAndNotExistingVpcAndBlankInternetGateway: !And
    - !Condition 'ThirdAvailabilityZone'
    - !Condition 'NotExistingVpcAndBlankInternetGateway'
Mappings:
  RegionConfig:
    ap-northeast-1:
      Ami: ami-0c38293d60d98af86
      EFS: 'Yes'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: '582318560864'
      Fargate: 'Yes'
    ap-northeast-2:
      Ami: ami-0bdc871079baf9649
      EFS: 'Yes'
      ThirdAvailabilityZone: 'No'
      ELBAccountId: '600734575887'
      Fargate: 'Yes'
    ap-south-1:
      Ami: ami-0b7c3be99909df6ef
      EFS: 'No'
      ThirdAvailabilityZone: 'No'
      ELBAccountId: '718504428378'
      Fargate: 'Yes'
    ap-southeast-1:
      Ami: ami-0e28ff4e3f1776d86
      EFS: 'Yes'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: '114774131450'
      Fargate: 'Yes'
    ap-southeast-2:
      Ami: ami-0eed1c915ea891aca
      EFS: 'Yes'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: '783225319266'
      Fargate: 'Yes'
    ca-central-1:
      Ami: ami-02c80e9173258d289
      EFS: 'No'
      ThirdAvailabilityZone: 'No'
      ELBAccountId: '985666609251'
      Fargate: 'Yes'
    eu-central-1:
      Ami: ami-055aa9664ef169e25
      EFS: 'Yes'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: '054676820928'
      Fargate: 'Yes'
    eu-north-1:
      Ami: ami-09c22e4e811424b3a
      EFS: 'No'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: '897822967062'
      Fargate: 'No'
    eu-west-1:
      Ami: ami-0acc9f8be17a41897
      EFS: 'Yes'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: '156460612806'
      Fargate: 'Yes'
    eu-west-2:
      Ami: ami-0b5225210a12d9951
      EFS: 'No'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: '652711504416'
      Fargate: 'Yes'
    eu-west-3:
      Ami: ami-0caadc4f0db31a303
      EFS: 'No'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: '009996457667'
      Fargate: 'No'
    sa-east-1:
      Ami: ami-078146697425f25a7
      EFS: 'No'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: '507241528517'
      Fargate: 'No'
    us-east-1:
      Ami: ami-0a6b7e0cc0b1f464f
      EFS: 'Yes'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: '127311923021'
      Fargate: 'Yes'
    us-east-2:
      Ami: ami-037a92bf1efdb11a2
      EFS: 'Yes'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: '033677994240'
      Fargate: 'Yes'
    us-west-1:
      Ami: ami-0184f498956de7db5
      EFS: 'Yes'
      ThirdAvailabilityZone: 'No'
      ELBAccountId: '027434742980'
      Fargate: 'Yes'
    us-west-2:
      Ami: ami-0c1f4871ebaae6d86
      EFS: 'Yes'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: '797873946194'
      Fargate: 'Yes'
Outputs:
  AutoscalingGroup:
    Value: !Ref 'Instances'
  AvailabilityZones:
    Value: !If
      - BlankAvailabilityZones
      - !Join
        - ','
        - - !Select
            - 0
            - !GetAZs ''
          - !Select
            - 1
            - !GetAZs ''
          - !If
            - ThirdAvailabilityZone
            - !Select
              - 2
              - !GetAZs ''
            - !Ref 'AWS::NoValue'
      - !Join
        - ','
        - - !Select
            - 0
            - !Ref 'AvailabilityZones'
          - !Select
            - 1
            - !Ref 'AvailabilityZones'
          - !If
            - ThirdAvailabilityZone
            - !Select
              - 2
              - !Ref 'AvailabilityZones'
            - !Ref 'AWS::NoValue'
  AwsRegion:
    Value: !Ref 'AWS::Region'
  BuildAutoscalingGroup:
    Value: !If
      - DedicatedBuilder
      - !Ref 'BuildInstances'
      - !Ref 'Instances'
  BuildCluster:
    Value: !If
      - DedicatedBuilder
      - !Ref 'BuildCluster'
      - !Ref 'Cluster'
  Cluster:
    Export:
      Name: !Sub '${AWS::StackName}:Cluster'
    Value: !Ref 'Cluster'
  CustomTopic:
    Value: !GetAtt 'CustomTopic.Arn'
  Dashboard:
    Value: !GetAtt 'Balancer.DNSName'
  Domain:
    Condition: PublicRouter
    Export:
      Name: !Sub '${AWS::StackName}:Domain'
    Value: !GetAtt 'Router.DNSName'
  DomainInternal:
    Condition: Internal
    Export:
      Name: !Sub '${AWS::StackName}:DomainInternal'
    Value: !GetAtt 'RouterInternal.DNSName'
  DynamoBuilds:
    Value: !Ref 'DynamoBuilds'
  DynamoReleases:
    Value: !Ref 'DynamoReleases'
  EcsPollInterval:
    Value: !Ref 'EcsPollInterval'
  EncryptionKey:
    Export:
      Name: !Sub '${AWS::StackName}:EncryptionKey'
    Value: !Ref 'EncryptionKey'
  Fargate:
    Value: !FindInMap
      - RegionConfig
      - !Ref 'AWS::Region'
      - Fargate
  Gateway:
    Condition: BlankExistingVpc
    Value: !Ref 'Gateway'
  GatewayAttachment:
    Condition: BlankExistingVpc
    Value: !Ref 'GatewayAttachment'
  HostedZone:
    Export:
      Name: !Sub '${AWS::StackName}:HostedZone'
    Value: !Ref 'HostedZone'
  InstancesRole:
    Value: !GetAtt 'InstancesRole.Arn'
  InstancesSecurityGroup:
    Export:
      Name: !Sub '${AWS::StackName}:InstancesSecurityGroup'
    Value: !If
      - BlankInstanceSecurityGroup
      - !Ref 'InstancesSecurity'
      - !Ref 'InstanceSecurityGroup'
  Internal:
    Value: !Ref 'Internal'
  LogBucket:
    Value: !If
      - BlankLogBucket
      - !Ref 'Logs'
      - !Ref 'LogBucket'
  LogGroup:
    Value: !Ref 'LogGroup'
  NatGateways:
    Value: !If
      - Private
      - !Join
        - ','
        - - !Ref 'Nat0'
          - !Ref 'Nat1'
          - !If
            - ThirdAvailabilityZone
            - !Ref 'Nat2'
            - !Ref 'AWS::NoValue'
      - ''
  NatIPs:
    Value: !If
      - Private
      - !Join
        - ','
        - - !Ref 'NatAddress0'
          - !Ref 'NatAddress1'
          - !If
            - ThirdAvailabilityZone
            - !Ref 'NatAddress2'
            - !Ref 'AWS::NoValue'
      - ''
  NotificationHost:
    Value: !GetAtt 'Balancer.DNSName'
  NotificationTopic:
    Value: !Ref 'NotificationTopic'
  OnDemandMinCount:
    Value: !Ref 'OnDemandMinCount'
  Password:
    Condition: Development
    Value: !Ref 'Password'
  Private:
    Value: !Ref 'Private'
  Rack:
    Value: !Ref 'AWS::StackName'
  RouterCertificate:
    Condition: PublicRouter
    Export:
      Name: !Sub '${AWS::StackName}:RouterCertificate'
    Value: !Ref 'RouterApiCertificate'
  RouterHost:
    Condition: PublicRouter
    Export:
      Name: !Sub '${AWS::StackName}:RouterHost'
    Value: !Join
      - .
      - - !Select
          - 0
          - !Split
            - .
            - !GetAtt 'Router.DNSName'
        - !Select
          - 1
          - !Split
            - .
            - !GetAtt 'Router.DNSName'
        - convox.site
  RouterListener80:
    Condition: PublicRouter
    Export:
      Name: !Sub '${AWS::StackName}:RouterListener80'
    Value: !Ref 'RouterListener80'
  RouterListener443:
    Condition: PublicRouter
    Export:
      Name: !Sub '${AWS::StackName}:RouterListener443'
    Value: !Ref 'RouterListener443'
  RouterName:
    Condition: PublicRouter
    Export:
      Name: !Sub '${AWS::StackName}:RouterName'
    Value: !GetAtt 'Router.LoadBalancerFullName'
  RouterInternalCertificate:
    Condition: Internal
    Export:
      Name: !Sub '${AWS::StackName}:RouterInternalCertificate'
    Value: !Ref 'RouterInternalCertificate'
  RouterInternalHost:
    Condition: Internal
    Export:
      Name: !Sub '${AWS::StackName}:RouterInternalHost'
    Value: !Join
      - .
      - - !Select
          - 0
          - !Split
            - .
            - !GetAtt 'RouterInternal.DNSName'
        - !Select
          - 1
          - !Split
            - .
            - !GetAtt 'RouterInternal.DNSName'
        - convox.site
  RouterInternalListener80:
    Condition: Internal
    Export:
      Name: !Sub '${AWS::StackName}:RouterInternalListener80'
    Value: !Ref 'RouterInternalListener80'
  RouterInternalListener443:
    Condition: Internal
    Export:
      Name: !Sub '${AWS::StackName}:RouterInternalListener443'
    Value: !Ref 'RouterInternalListener443'
  RouterInternalName:
    Condition: Internal
    Export:
      Name: !Sub '${AWS::StackName}:RouterInternalName'
    Value: !GetAtt 'RouterInternal.LoadBalancerFullName'
  RouterInternalSecurityGroup:
    Condition: Internal
    Export:
      Name: !Sub '${AWS::StackName}:RouterInternalSecurityGroup'
    Value: !If
      - BlankRouterInternalSecurityGroup
      - !Ref 'RouterSecurity'
      - !Select
        - 0
        - !Ref 'RouterInternalSecurityGroup'
  RouterSecurityGroup:
    Condition: PublicRouter
    Export:
      Name: !Sub '${AWS::StackName}:RouterSecurityGroup'
    Value: !If
      - BlankRouterSecurityGroup
      - !Ref 'RouterSecurity'
      - !Select
        - 0
        - !Ref 'RouterSecurityGroup'
  RouteTablePublic:
    Condition: NotExistingVpcAndBlankInternetGateway
    Value: !Ref 'Routes'
  RouteTablesPrivate:
    Value: !If
      - Private
      - !Join
        - ','
        - - !Ref 'RouteTablePrivate0'
          - !Ref 'RouteTablePrivate1'
          - !If
            - ThirdAvailabilityZone
            - !Ref 'RouteTablePrivate2'
            - !Ref 'AWS::NoValue'
      - ''
  ServiceRole:
    Export:
      Name: !Sub '${AWS::StackName}:ServiceRole'
    Value: !GetAtt 'ServiceRole.Arn'
  SettingsBucket:
    Value: !Ref 'Settings'
  SpotInstances:
    Value: !If
      - SpotInstances
      - 'Yes'
      - 'No'
  Subnets:
    Value: !Join
      - ','
      - - !Ref 'Subnet0'
        - !Ref 'Subnet1'
        - !If
          - ThirdAvailabilityZone
          - !Ref 'Subnet2'
          - !Ref 'AWS::NoValue'
  Subnet0:
    Export:
      Name: !Sub '${AWS::StackName}:Subnet0'
    Value: !Ref 'Subnet0'
  Subnet1:
    Export:
      Name: !Sub '${AWS::StackName}:Subnet1'
    Value: !Ref 'Subnet1'
  Subnet2:
    Condition: ThirdAvailabilityZone
    Export:
      Name: !Sub '${AWS::StackName}:Subnet2'
    Value: !Ref 'Subnet2'
  SubnetsPrivate:
    Value: !If
      - Private
      - !Join
        - ','
        - - !Ref 'SubnetPrivate0'
          - !Ref 'SubnetPrivate1'
          - !If
            - ThirdAvailabilityZone
            - !Ref 'SubnetPrivate2'
            - !Ref 'AWS::NoValue'
      - ''
  SubnetPrivate0:
    Condition: Private
    Export:
      Name: !Sub '${AWS::StackName}:SubnetPrivate0'
    Value: !Ref 'SubnetPrivate0'
  SubnetPrivate1:
    Condition: Private
    Export:
      Name: !Sub '${AWS::StackName}:SubnetPrivate1'
    Value: !Ref 'SubnetPrivate1'
  SubnetPrivate2:
    Condition: PrivateAndThirdAvailabilityZone
    Export:
      Name: !Sub '${AWS::StackName}:SubnetPrivate2'
    Value: !Ref 'SubnetPrivate2'
  StackId:
    Value: !Ref 'AWS::StackId'
  Version:
    Value: !Ref 'Version'
  Vpc:
    Export:
      Name: !Sub '${AWS::StackName}:Vpc'
    Value: !If
      - BlankExistingVpc
      - !Ref 'Vpc'
      - !Ref 'ExistingVpc'
  Vpccidr:
    Export:
      Name: !Sub '${AWS::StackName}:VpcCidr'
    Value: !Ref 'VPCCIDR'
Parameters:
  Ami:
    Type: String
    Description: 'Amazon Machine Image: http://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_container_instance.html'
    Default: ''
  ApiCount:
    Type: String
    Description: The number of api web processes to run
    Default: '2'
  ApiMemory:
    Type: String
    Description: How much memory should be reserved by the api web process
    Default: '256'
  Autoscale:
    Type: String
    Description: Autoscale rack instances
    Default: 'Yes'
    AllowedValues:
      - 'Yes'
      - 'No'
  AutoscaleExtra:
    Type: Number
    Description: The number of instances of extra capacity that autoscale should keep
      running
    Default: '1'
  AvailabilityZones:
    Type: CommaDelimitedList
    Description: Override the availability zones used in the rack (specify 3)
    Default: ''
  BuildCpu:
    Type: String
    Description: How much cpu should be reserved by the builder
    Default: '256'
  BuildImage:
    Type: String
    Description: Override the default builder image
    Default: ''
  BuildInstance:
    Type: String
    Description: Instance type for a dedicated build cluster
    Default: t3.small
  BuildMemory:
    Type: String
    Description: How much memory should be reserved by the builder
    Default: '1000'
  BuildVolumeSize:
    Type: Number
    Description: Default build disk size in GB
    Default: '100'
  ClientId:
    Type: String
    Description: Anonymous identifier
    Default: ''
  Development:
    Type: String
    Description: Development mode
    Default: 'No'
    AllowedValues:
      - 'Yes'
      - 'No'
  EcsPollInterval:
    Type: Number
    Default: '1'
    Description: How often to poll ECS for service events in seconds. Longer intervals
      may alleviate rate limiting / throttling from ECS.
  EncryptEbs:
    Type: String
    Description: Enable encryption at rest for EBS volumes
    Default: 'No'
    AllowedValues:
      - 'Yes'
      - 'No'
  Encryption:
    Type: String
    Description: Encrypt secrets with KMS
    Default: 'Yes'
    AllowedValues:
      - 'Yes'
      - 'No'
  ExistingVpc:
    Description: Existing VPC ID (if blank a VPC will be created)
    Type: String
    Default: ''
  HttpProxy:
    Description: Connect using an outbound HTTP proxy (for network-restricted Racks)
    Type: String
    Default: ''
  Internal:
    Type: String
    Description: Support applications that are only accessible inside the VPC
    Default: 'No'
    AllowedValues:
      - 'Yes'
      - 'No'
  InternalOnly:
    Type: String
    Description: Only support applications that are only accessible inside the VPC
    Default: 'No'
    AllowedValues:
      - 'Yes'
      - 'No'
  InternalSuffix:
    Type: String
    Description: Suffix for internal router
    Default: -rti
  InstanceBootCommand:
    Type: String
    Description: A single line of shell script to run as CloudInit command early during
      instance boot.
    Default: ''
  InstanceRunCommand:
    Type: String
    Description: A single line of shell script to run as CloudInit command late during
      instance boot.
    Default: ''
  InstanceCount:
    Default: '3'
    Description: The number of instances in the runtime cluster
    MinValue: '3'
    Type: Number
  InstanceType:
    Default: t3.small
    Description: The type of the instances in the runtime cluster
    Type: String
  InstanceUpdateBatchSize:
    Default: '1'
    Description: The number of instances to update in a batch
    MinValue: '1'
    Type: Number
  InstancePolicy:
    Default: ''
    Description: ARN of an additional IAM policy to add to the cluster instances
    Type: String
  InstanceSecurityGroup:
    Default: ''
    Description: The security group to assign to the ECS instances.  If blank, convox
      will create a security group open to all IPs in your VPC
    Type: String
  InternetGateway:
    Description: The InternetGatway to route to if an Existing VPC is specified
    Type: String
    Default: ''
  Key:
    Default: ''
    Description: SSH key name for access to cluster instances
    Type: String
  LogBucket:
    Default: ''
    Description: Bucket to receive S3 logs
    Type: String
  LogRetention:
    Default: ''
    Description: Number of days to keep logs (blank for unlimited)
    Type: String
  MaxAvailabilityZones:
    Type: Number
    Default: '3'
    AllowedValues:
      - '2'
      - '3'
  OnDemandMinCount:
    Default: '3'
    Description: The minimum number of on-demand instances in the runtime cluster
    MinValue: '1'
    Type: Number
  Password:
    Description: (REQUIRED) API HTTP password
    Type: String
    MinLength: '1'
    MaxLength: '50'
    NoEcho: true
  Private:
    Type: String
    Description: Create non publicly routable resources
    Default: 'No'
    AllowedValues:
      - 'Yes'
      - 'No'
  PrivateApi:
    Type: String
    Description: Put Rack API Load Balancer in private network
    Default: 'No'
    AllowedValues:
      - 'Yes'
      - 'No'
  PrivateApiSecurityGroup:
    Type: String
    Description: Lock down private API to a security group
    Default: ''
  RouterInternalSecurityGroup:
    Default: ''
    Description: The security groups (comma delimited) to assign to the internal rack
      router.
    Type: CommaDelimitedList
  RouterSecurityGroup:
    Default: ''
    Description: The security groups (comma delimited) to assign to the rack router.
    Type: CommaDelimitedList
  SpotInstanceBid:
    Default: ''
    Description: Bid price for spot instances
    Type: String
  SslPolicy:
    Default: ''
    Description: SSL policy for rack load balancer
    Type: String
  Subnet0CIDR:
    Default: 10.0.1.0/24
    Description: Public Subnet 0 CIDR Block
    Type: String
  Subnet1CIDR:
    Default: 10.0.2.0/24
    Description: Public Subnet 1 CIDR Block
    Type: String
  Subnet2CIDR:
    Default: 10.0.3.0/24
    Description: Public Subnet 2 CIDR Block
    Type: String
  SubnetPrivate0CIDR:
    Default: 10.0.4.0/24
    Description: Private Subnet 0 CIDR Block
    Type: String
  SubnetPrivate1CIDR:
    Default: 10.0.5.0/24
    Description: Private Subnet 1 CIDR Block
    Type: String
  SubnetPrivate2CIDR:
    Default: 10.0.6.0/24
    Description: Private Subnet 2 CIDR Block
    Type: String
  SwapSize:
    Type: Number
    Description: Default swap volume size in GB
    Default: '5'
  Version:
    Description: (REQUIRED) Convox release version
    MinLength: '1'
    Type: String
    # VERSION-DEFAULT
  VolumeSize:
    Type: Number
    Description: Default disk size in GB
    Default: '50'
  VPCCIDR:
    Default: 10.0.0.0/16
    Description: VPC CIDR Block
    Type: String
  Tenancy:
    Type: String
    Description: Dedicated Hardware
    Default: default
    AllowedValues:
      - default
      - dedicated
Resources:
  EncryptionKey:
    Type: Custom::KMSKey
    Properties:
      ServiceToken: !GetAtt 'CustomTopic.Arn'
      Description: Convox Master Encryption
      KeyUsage: ENCRYPT_DECRYPT
      Rotate: 'true'
  EncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Join
        - ''
        - - alias/convox-
          - !Ref 'AWS::StackName'
      TargetKeyId: !Ref 'EncryptionKey'
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !If
        - BlankLogRetention
        - !Ref 'AWS::NoValue'
        - !Ref 'LogRetention'
  CustomTopicRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /convox/
      Policies:
        - PolicyName: Administrator
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
              - Effect: Deny
                Action: s3:DeleteObject
                Resource: '*'
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - -notifications
  CustomTopic:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
          - '-'
          - - convox
            - !Ref 'AWS::Region'
        S3Key: !Join
          - ''
          - - release/
            - !Ref 'Version'
            - /lambda/formation.zip
      Description: Convox handler for custom resources
      Handler: index.external
      MemorySize: '128'
      Role: !GetAtt 'CustomTopicRole.Arn'
      Runtime: nodejs8.10
      Timeout: '300'
  Vpc:
    Type: AWS::EC2::VPC
    Condition: BlankExistingVpc
    Properties:
      CidrBlock: !Ref 'VPCCIDR'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: !Ref 'Tenancy'
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  Gateway:
    Type: AWS::EC2::InternetGateway
    Condition: BlankExistingVpc
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: BlankExistingVpc
    Properties:
      InternetGatewayId: !Ref 'Gateway'
      VpcId: !Ref 'Vpc'
  ExistingGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: ExistingVpcAndInternetGateway
    DeletionPolicy: Retain
    Properties:
      InternetGatewayId: !Ref 'InternetGateway'
      VpcId: !Ref 'ExistingVpc'
  Nat0:
    Condition: Private
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatAddress0.AllocationId'
      SubnetId: !Ref 'Subnet0'
  Nat1:
    Condition: Private
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatAddress1.AllocationId'
      SubnetId: !Ref 'Subnet1'
  Nat2:
    Condition: PrivateAndThirdAvailabilityZone
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatAddress2.AllocationId'
      SubnetId: !Ref 'Subnet2'
  NatAddress0:
    Condition: Private
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatAddress1:
    Condition: Private
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatAddress2:
    Condition: Private
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  SecureEnvironmentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /convox/
      Policies:
        - PolicyName: SecureEnvironmentPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Effect: Allow
              Action:
                - kms:Decrypt
              Resource:
                - !Ref 'EncryptionKey'
  Subnet0:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - ' '
            - - !Ref 'AWS::StackName'
              - public
              - '0'
      AvailabilityZone: !If
        - BlankAvailabilityZones
        - !Select
          - 0
          - !GetAZs ''
        - !Select
          - 0
          - !Ref 'AvailabilityZones'
      CidrBlock: !Ref 'Subnet0CIDR'
      VpcId: !If
        - BlankExistingVpc
        - !Ref 'Vpc'
        - !Ref 'ExistingVpc'
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - ' '
            - - !Ref 'AWS::StackName'
              - public
              - '1'
      AvailabilityZone: !If
        - BlankAvailabilityZones
        - !Select
          - 1
          - !GetAZs ''
        - !Select
          - 1
          - !Ref 'AvailabilityZones'
      CidrBlock: !Ref 'Subnet1CIDR'
      VpcId: !If
        - BlankExistingVpc
        - !Ref 'Vpc'
        - !Ref 'ExistingVpc'
  Subnet2:
    Condition: ThirdAvailabilityZone
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - ' '
            - - !Ref 'AWS::StackName'
              - public
              - '2'
      AvailabilityZone: !If
        - BlankAvailabilityZones
        - !Select
          - 2
          - !GetAZs ''
        - !Select
          - 2
          - !Ref 'AvailabilityZones'
      CidrBlock: !Ref 'Subnet2CIDR'
      VpcId: !If
        - BlankExistingVpc
        - !Ref 'Vpc'
        - !Ref 'ExistingVpc'
  SubnetPrivate0:
    Condition: Private
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - ' '
            - - !Ref 'AWS::StackName'
              - private
              - '0'
      AvailabilityZone: !If
        - BlankAvailabilityZones
        - !Select
          - 0
          - !GetAZs ''
        - !Select
          - 0
          - !Ref 'AvailabilityZones'
      CidrBlock: !Ref 'SubnetPrivate0CIDR'
      VpcId: !If
        - BlankExistingVpc
        - !Ref 'Vpc'
        - !Ref 'ExistingVpc'
  SubnetPrivate1:
    Condition: Private
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - ' '
            - - !Ref 'AWS::StackName'
              - private
              - '1'
      AvailabilityZone: !If
        - BlankAvailabilityZones
        - !Select
          - 1
          - !GetAZs ''
        - !Select
          - 1
          - !Ref 'AvailabilityZones'
      CidrBlock: !Ref 'SubnetPrivate1CIDR'
      VpcId: !If
        - BlankExistingVpc
        - !Ref 'Vpc'
        - !Ref 'ExistingVpc'
  SubnetPrivate2:
    Condition: PrivateAndThirdAvailabilityZone
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - ' '
            - - !Ref 'AWS::StackName'
              - private
              - '2'
      AvailabilityZone: !If
        - BlankAvailabilityZones
        - !Select
          - 2
          - !GetAZs ''
        - !Select
          - 2
          - !Ref 'AvailabilityZones'
      CidrBlock: !Ref 'SubnetPrivate2CIDR'
      VpcId: !If
        - BlankExistingVpc
        - !Ref 'Vpc'
        - !Ref 'ExistingVpc'
  Routes:
    Type: AWS::EC2::RouteTable
    Condition: NotExistingVpcAndBlankInternetGateway
    Properties:
      Tags:
        - Key: GatewayAttachment
          Value: !If
            - BlankExistingVpc
            - !Ref 'GatewayAttachment'
            - existing
        - Key: Name
          Value: !Ref 'AWS::StackName'
      VpcId: !If
        - BlankExistingVpc
        - !Ref 'Vpc'
        - !Ref 'ExistingVpc'
  RouteDefault:
    Type: AWS::EC2::Route
    Condition: NotExistingVpcAndBlankInternetGateway
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !If
        - ExistingVpcAndInternetGateway
        - !Ref 'InternetGateway'
        - !Ref 'Gateway'
      RouteTableId: !Ref 'Routes'
  RouteTablePrivate0:
    Condition: Private
    DependsOn:
      - Nat0
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
      VpcId: !If
        - BlankExistingVpc
        - !Ref 'Vpc'
        - !Ref 'ExistingVpc'
  RouteTablePrivate1:
    Condition: Private
    DependsOn:
      - Nat1
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
      VpcId: !If
        - BlankExistingVpc
        - !Ref 'Vpc'
        - !Ref 'ExistingVpc'
  RouteTablePrivate2:
    Condition: PrivateAndThirdAvailabilityZone
    DependsOn:
      - Nat2
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
      VpcId: !If
        - BlankExistingVpc
        - !Ref 'Vpc'
        - !Ref 'ExistingVpc'
  RouteDefaultPrivate0:
    Condition: Private
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'Nat0'
      RouteTableId: !Ref 'RouteTablePrivate0'
  RouteDefaultPrivate1:
    Condition: Private
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'Nat1'
      RouteTableId: !Ref 'RouteTablePrivate1'
  RouteDefaultPrivate2:
    Condition: PrivateAndThirdAvailabilityZone
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'Nat2'
      RouteTableId: !Ref 'RouteTablePrivate2'
  Subnet0Routes:
    Condition: NotExistingVpcAndBlankInternetGateway
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'Subnet0'
      RouteTableId: !Ref 'Routes'
  Subnet1Routes:
    Condition: NotExistingVpcAndBlankInternetGateway
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'Subnet1'
      RouteTableId: !Ref 'Routes'
  Subnet2Routes:
    Condition: ThirdAvailabilityZoneAndNotExistingVpcAndBlankInternetGateway
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'Subnet2'
      RouteTableId: !Ref 'Routes'
  SubnetPrivate0Routes:
    Condition: Private
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'SubnetPrivate0'
      RouteTableId: !Ref 'RouteTablePrivate0'
  SubnetPrivate1Routes:
    Condition: Private
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'SubnetPrivate1'
      RouteTableId: !Ref 'RouteTablePrivate1'
  SubnetPrivate2Routes:
    Condition: PrivateAndThirdAvailabilityZone
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'SubnetPrivate2'
      RouteTableId: !Ref 'RouteTablePrivate2'
  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Sub '${AWS::StackName}.convox'
      VPCs:
        - VPCId: !If
            - BlankExistingVpc
            - !Ref 'Vpc'
            - !Ref 'ExistingVpc'
          VPCRegion: !Ref 'AWS::Region'
  RecordSetRack:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref 'HostedZone'
      Name: !Sub 'rack.${AWS::StackName}.convox.'
      Type: CNAME
      TTL: '3600'
      ResourceRecords:
        - !GetAtt 'Balancer.DNSName'
  InstancesSecurity:
    DependsOn: ApiRole
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${AWS::StackName} instances'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: !Ref 'VPCCIDR'
        - IpProtocol: udp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: !Ref 'VPCCIDR'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-instances'
      VpcId: !If
        - BlankExistingVpc
        - !Ref 'Vpc'
        - !Ref 'ExistingVpc'
  InstancesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
        Version: '2012-10-17'
      Path: /convox/
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AutoScalingFullAccess
        - !If
          - BlankInstancePolicy
          - !Ref 'AWS::NoValue'
          - !Ref 'InstancePolicy'
  InstancesProfile:
    DependsOn: ApiRole
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /convox/
      Roles:
        - !Ref 'InstancesRole'
  BuildCluster:
    Condition: DedicatedBuilder
    Type: AWS::ECS::Cluster
  BuildLaunchConfiguration:
    Condition: DedicatedBuilder
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: !If
        - Private
        - false
        - true
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            Encrypted: !If
              - EncryptEbs
              - 'true'
              - !Ref 'AWS::NoValue'
            VolumeSize: !Ref 'BuildVolumeSize'
            VolumeType: gp2
        - !If
          - SwapEnabled
          - DeviceName: /dev/xvdb
            Ebs:
              Encrypted: !If
                - EncryptEbs
                - 'true'
                - !Ref 'AWS::NoValue'
              VolumeSize: !Ref 'SwapSize'
              VolumeType: gp2
          - !Ref 'AWS::NoValue'
      IamInstanceProfile: !Ref 'InstancesProfile'
      ImageId: !If
        - BlankAmi
        - !FindInMap
          - RegionConfig
          - !Ref 'AWS::Region'
          - Ami
        - !Ref 'Ami'
      InstanceMonitoring: true
      InstanceType: !Ref 'BuildInstance'
      KeyName: !If
        - BlankKey
        - !Ref 'AWS::NoValue'
        - !Ref 'Key'
      PlacementTenancy: !Ref 'Tenancy'
      SecurityGroups:
        - !If
          - BlankInstanceSecurityGroup
          - !Ref 'InstancesSecurity'
          - !Ref 'InstanceSecurityGroup'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "#cloud-config\n"
            - "repo_upgrade_exclude:\n"
            - "  - kernel*\n"
            - "packages:\n"
            - "  - aws-cfn-bootstrap\n"
            - "mounts:\n"
            - !If
              - SwapEnabled
              - "  - ['/dev/xvdb', 'none', 'swap', 'sw', '0', '0']\n"
              - !Ref 'AWS::NoValue'
            - "bootcmd:\n"
            - !If
              - SwapEnabled
              - !Join
                - ''
                - - "  - mkswap /dev/xvdb\n"
                  - "  - swapon /dev/xvdb\n"
              - !Ref 'AWS::NoValue'
            - '  - export http_proxy='
            - !Ref 'HttpProxy'
            - "\n"
            - '  - echo http_proxy='
            - !Ref 'HttpProxy'
            - " >> /etc/environment\n"
            - '  - export https_proxy='
            - !Ref 'HttpProxy'
            - "\n"
            - '  - echo https_proxy='
            - !Ref 'HttpProxy'
            - " >> /etc/environment\n"
            - '  - export HTTP_PROXY='
            - !Ref 'HttpProxy'
            - "\n"
            - '  - echo HTTP_PROXY='
            - !Ref 'HttpProxy'
            - " >> /etc/environment\n"
            - '  - export HTTPS_PROXY='
            - !Ref 'HttpProxy'
            - "\n"
            - '  - echo HTTPS_PROXY='
            - !Ref 'HttpProxy'
            - " >> /etc/environment\n"
            - "  - export NO_PROXY=169.254.169.254\n"
            - "  - echo NO_PROXY=169.254.169.254 >> /etc/environment\n"
            - !If
              - HttpProxy
              - !Join
                - ''
                - - '  - echo "proxy='
                  - !Ref 'HttpProxy'
                  - "/\" >> /etc/yum.conf\n"
              - !Ref 'AWS::NoValue'
            - '  - echo ECS_CLUSTER='
            - !Ref 'BuildCluster'
            - " >> /etc/ecs/ecs.config\n"
            - "  - echo ECS_ENGINE_AUTH_TYPE=docker >> /etc/ecs/ecs.config\n"
            - "  - echo 'ECS_INSTANCE_ATTRIBUTES={\"asg\":\"build\"}' >> /etc/ecs/ecs.config\n"
            - '  - echo HTTP_PROXY='
            - !Ref 'HttpProxy'
            - " >> /etc/ecs/ecs.config\n"
            - "  - echo NO_PROXY=169.254.169.254,169.254.170.2,/var/run/docker.sock\
              \ >> /etc/ecs/ecs.config\n"
            - "  - echo 'OPTIONS=\"--default-ulimit nofile=1024000:1024000 --log-opt\
              \ max-file=2 --log-opt max-size=50m --host=unix:///var/run/docker.sock\
              \ --host=0.0.0.0:2376\"' >> /etc/sysconfig/docker\n"
            - "  - echo 'ECS_ENGINE_AUTH_DATA={\"index.docker.io\":{\"username\":\"\
              \",\"password\":\"\",\"email\":\"\"}' >> /etc/ecs/ecs.config\n"
            - "  - echo 'docker image prune -a --filter=\"until=96h\" --force' > /etc/cron.daily/docker-prune\n"
            - "  - chmod +x /etc/cron.daily/docker-prune\n"
            - !If
              - HttpProxy
              - !Join
                - ''
                - - '  - echo "export HTTP_PROXY='
                  - !Ref 'HttpProxy'
                  - "/\" >> /etc/sysconfig/docker\n"
              - !Ref 'AWS::NoValue'
            - "  - echo -e '/var/log/docker {\\n  rotate 7\\n  daily\\n  nocompress\\\
              n  copytruncate\\n}' >> /etc/logrotate.d/docker\n"
            - !If
              - BlankInstanceBootCommand
              - !Ref 'AWS::NoValue'
              - !Join
                - ''
                - - '  - '
                  - !Ref 'InstanceBootCommand'
                  - "\n"
            - "runcmd:\n"
            - !If
              - BlankInstanceRunCommand
              - !Ref 'AWS::NoValue'
              - !Join
                - ''
                - - '  - '
                  - !Ref 'InstanceRunCommand'
                  - "\n"
            - '  - /opt/aws/bin/cfn-signal --http-proxy "'
            - !Ref 'HttpProxy'
            - '" --stack '
            - !Ref 'AWS::StackName'
            - ' --region '
            - !Ref 'AWS::Region'
            - " --resource BuildInstances\n"
  BuildInstances:
    Condition: DedicatedBuilder
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref 'BuildLaunchConfiguration'
      VPCZoneIdentifier: !If
        - Private
        - - !Ref 'SubnetPrivate0'
          - !Ref 'SubnetPrivate1'
          - !If
            - ThirdAvailabilityZone
            - !Ref 'SubnetPrivate2'
            - !Ref 'AWS::NoValue'
        - - !Ref 'Subnet0'
          - !Ref 'Subnet1'
          - !If
            - ThirdAvailabilityZone
            - !Ref 'Subnet2'
            - !Ref 'AWS::NoValue'
      Cooldown: 5
      DesiredCapacity: '1'
      HealthCheckType: EC2
      HealthCheckGracePeriod: '120'
      MinSize: '1'
      MaxSize: '2'
      MetricsCollection:
        - Granularity: 1Minute
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
          PropagateAtLaunch: true
        - Key: Rack
          Value: !Ref 'AWS::StackName'
          PropagateAtLaunch: true
        - Key: GatewayAttachment
          Value: !If
            - ExistingVpc
            - existing
            - !Ref 'GatewayAttachment'
          PropagateAtLaunch: false
        - Key: NatGateways
          PropagateAtLaunch: false
          Value: !If
            - Private
            - !Join
              - ','
              - - !Ref 'Nat0'
                - !Ref 'Nat1'
                - !If
                  - ThirdAvailabilityZone
                  - !Ref 'Nat2'
                  - !Ref 'AWS::NoValue'
            - ''
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: !Ref 'InstanceUpdateBatchSize'
        MinInstancesInService: '1'
        PauseTime: PT5M
        SuspendProcesses:
          - ScheduledActions
        WaitOnResourceSignals: 'true'
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: !If
        - Private
        - false
        - true
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            Encrypted: !If
              - EncryptEbs
              - 'true'
              - !Ref 'AWS::NoValue'
            VolumeSize: !Ref 'VolumeSize'
            VolumeType: gp2
        - !If
          - SwapEnabled
          - DeviceName: /dev/xvdb
            Ebs:
              Encrypted: !If
                - EncryptEbs
                - 'true'
                - !Ref 'AWS::NoValue'
              VolumeSize: !Ref 'SwapSize'
              VolumeType: gp2
          - !Ref 'AWS::NoValue'
      IamInstanceProfile: !Ref 'InstancesProfile'
      ImageId: !If
        - BlankAmi
        - !FindInMap
          - RegionConfig
          - !Ref 'AWS::Region'
          - Ami
        - !Ref 'Ami'
      InstanceMonitoring: true
      InstanceType: !Ref 'InstanceType'
      KeyName: !If
        - BlankKey
        - !Ref 'AWS::NoValue'
        - !Ref 'Key'
      PlacementTenancy: !Ref 'Tenancy'
      SecurityGroups:
        - !If
          - BlankInstanceSecurityGroup
          - !Ref 'InstancesSecurity'
          - !Ref 'InstanceSecurityGroup'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "#cloud-config\n"
            - "repo_upgrade_exclude:\n"
            - "  - kernel*\n"
            - "packages:\n"
            - "  - aws-cfn-bootstrap\n"
            - "mounts:\n"
            - !If
              - SwapEnabled
              - "  - ['/dev/xvdb', 'none', 'swap', 'sw', '0', '0']\n"
              - !Ref 'AWS::NoValue'
            - "bootcmd:\n"
            - !If
              - SwapEnabled
              - !Join
                - ''
                - - "  - mkswap /dev/xvdb\n"
                  - "  - swapon /dev/xvdb\n"
              - !Ref 'AWS::NoValue'
            - '  - export http_proxy='
            - !Ref 'HttpProxy'
            - "\n"
            - '  - echo http_proxy='
            - !Ref 'HttpProxy'
            - " >> /etc/environment\n"
            - '  - export https_proxy='
            - !Ref 'HttpProxy'
            - "\n"
            - '  - echo https_proxy='
            - !Ref 'HttpProxy'
            - " >> /etc/environment\n"
            - '  - export HTTP_PROXY='
            - !Ref 'HttpProxy'
            - "\n"
            - '  - echo HTTP_PROXY='
            - !Ref 'HttpProxy'
            - " >> /etc/environment\n"
            - '  - export HTTPS_PROXY='
            - !Ref 'HttpProxy'
            - "\n"
            - '  - echo HTTPS_PROXY='
            - !Ref 'HttpProxy'
            - " >> /etc/environment\n"
            - "  - export NO_PROXY=169.254.169.254\n"
            - "  - echo NO_PROXY=169.254.169.254 >> /etc/environment\n"
            - !If
              - HttpProxy
              - !Join
                - ''
                - - '  - echo "proxy='
                  - !Ref 'HttpProxy'
                  - "/\" >> /etc/yum.conf\n"
              - !Ref 'AWS::NoValue'
            - "  - until yum install -y aws-cli nfs-utils; do echo \"Waiting for network\"\
              ; done;\n"
            - "  - mkdir /volumes\n"
            - !If
              - RegionHasEFS
              - !Join
                - ''
                - - '  - while true; do mount -t nfs -o nfsvers=4.1 $(curl -s --noproxy
                    169.254.169.254 http://169.254.169.254/latest/meta-data/placement/availability-zone).'
                  - !Ref 'VolumeFilesystem'
                  - .efs.
                  - !Ref 'AWS::Region'
                  - ".amazonaws.com:/ /volumes && break; sleep 5; done\n"
              - ''
            - "  - [ cloud-init-per, instance, docker_storage_setup, /usr/bin/docker-storage-setup\
              \ ]\n"
            - '  - echo ECS_CLUSTER='
            - !Ref 'Cluster'
            - " >> /etc/ecs/ecs.config\n"
            - "  - echo ECS_ENABLE_CONTAINER_METADATA=true >> /etc/ecs/ecs.config\n"
            - "  - echo ECS_ENGINE_AUTH_TYPE=docker >> /etc/ecs/ecs.config\n"
            - "  - echo 'ECS_INSTANCE_ATTRIBUTES={\"asg\":\"primary\"}' >> /etc/ecs/ecs.config\n"
            - '  - echo HTTP_PROXY='
            - !Ref 'HttpProxy'
            - " >> /etc/ecs/ecs.config\n"
            - "  - echo NO_PROXY=169.254.169.254,169.254.170.2,/var/run/docker.sock\
              \ >> /etc/ecs/ecs.config\n"
            - "  - echo 'OPTIONS=\"--default-ulimit nofile=1024000:1024000 --log-opt\
              \ max-file=2 --log-opt max-size=50m --host=unix:///var/run/docker.sock\
              \ --host=0.0.0.0:2376\"' >> /etc/sysconfig/docker\n"
            - "  - echo 'ECS_ENGINE_AUTH_DATA={\"index.docker.io\":{\"username\":\"\
              \",\"password\":\"\",\"email\":\"\"}' >> /etc/ecs/ecs.config\n"
            - "  - echo 'docker image prune -a --filter=\"until=96h\" --force' > /etc/cron.daily/docker-prune\n"
            - "  - chmod +x /etc/cron.daily/docker-prune\n"
            - !If
              - HttpProxy
              - !Join
                - ''
                - - '  - echo "export HTTP_PROXY='
                  - !Ref 'HttpProxy'
                  - "/\" >> /etc/sysconfig/docker\n"
              - !Ref 'AWS::NoValue'
            - "  - echo -e '/var/log/docker {\\n  rotate 7\\n  daily\\n  nocompress\\\
              n  copytruncate\\n}' >> /etc/logrotate.d/docker\n"
            - !If
              - BlankInstanceBootCommand
              - !Ref 'AWS::NoValue'
              - !Join
                - ''
                - - '  - '
                  - !Ref 'InstanceBootCommand'
                  - "\n"
            - "runcmd:\n"
            - !If
              - BlankInstanceRunCommand
              - !Ref 'AWS::NoValue'
              - !Join
                - ''
                - - '  - '
                  - !Ref 'InstanceRunCommand'
                  - "\n"
            - "  - export INSTANCE_ID=$(curl -s --noproxy 169.254.169.254 http://169.254.169.254/latest/meta-data/instance-id)\n"
            - '  - export ASG_NAME=$(env $(cat /etc/environment) /usr/bin/aws autoscaling
              describe-auto-scaling-instances --instance-ids=$INSTANCE_ID --region '
            - !Ref 'AWS::Region'
            - " --output text --query 'AutoScalingInstances[0].AutoScalingGroupName')\n"
            - '  - export LIFECYCLE_HOOK=$(env $(cat /etc/environment) /usr/bin/aws
              autoscaling describe-lifecycle-hooks --auto-scaling-group-name $ASG_NAME
              --region '
            - !Ref 'AWS::Region'
            - ' --output text --query "LifecycleHooks[?contains(LifecycleHookName,
              '''
            - !Ref 'AWS::StackName'
            - "-InstancesLifecycleLaunching') == \\`true\\`].LifecycleHookName | [0]\"\
              )\n"
            - '  - env $(cat /etc/environment) /usr/bin/aws autoscaling complete-lifecycle-action
              --region '
            - !Ref 'AWS::Region'
            - " --instance-id $INSTANCE_ID --lifecycle-hook-name $LIFECYCLE_HOOK --auto-scaling-group-name\
              \ $ASG_NAME --lifecycle-action-result CONTINUE\n"
            - '  - env $(cat /etc/environment) /opt/aws/bin/cfn-signal --http-proxy
              "'
            - !Ref 'HttpProxy'
            - '" --stack '
            - !Ref 'AWS::StackName'
            - ' --region '
            - !Ref 'AWS::Region'
            - " --resource Instances\n"
  Instances:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref 'LaunchConfiguration'
      VPCZoneIdentifier: !If
        - Private
        - - !Ref 'SubnetPrivate0'
          - !Ref 'SubnetPrivate1'
          - !If
            - ThirdAvailabilityZone
            - !Ref 'SubnetPrivate2'
            - !Ref 'AWS::NoValue'
        - - !Ref 'Subnet0'
          - !Ref 'Subnet1'
          - !If
            - ThirdAvailabilityZone
            - !Ref 'Subnet2'
            - !Ref 'AWS::NoValue'
      Cooldown: 5
      DesiredCapacity: !If
        - SpotInstances
        - !Ref 'AWS::NoValue'
        - !Ref 'InstanceCount'
      HealthCheckType: EC2
      HealthCheckGracePeriod: '120'
      MinSize: !If
        - SpotInstances
        - !Ref 'OnDemandMinCount'
        - !Ref 'InstanceCount'
      MaxSize: '1000'
      MetricsCollection:
        - Granularity: 1Minute
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
          PropagateAtLaunch: true
        - Key: Rack
          Value: !Ref 'AWS::StackName'
          PropagateAtLaunch: true
        - Key: GatewayAttachment
          Value: !If
            - ExistingVpc
            - existing
            - !Ref 'GatewayAttachment'
          PropagateAtLaunch: false
        - Key: NatGateways
          PropagateAtLaunch: false
          Value: !If
            - Private
            - !Join
              - ','
              - - !Ref 'Nat0'
                - !Ref 'Nat1'
                - !If
                  - ThirdAvailabilityZone
                  - !Ref 'Nat2'
                  - !Ref 'AWS::NoValue'
            - ''
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: !Ref 'InstanceUpdateBatchSize'
        MinInstancesInService: !If
          - SpotInstances
          - !Ref 'OnDemandMinCount'
          - !Ref 'InstanceCount'
        PauseTime: PT5M
        SuspendProcesses:
          - ScheduledActions
        WaitOnResourceSignals: 'true'
  InstancesAutoscaler:
    Type: AWS::Lambda::Function
    DependsOn: ApiRole
    Condition: Autoscale
    Properties:
      Code:
        S3Bucket: !Sub 'convox-${AWS::Region}'
        S3Key: !Sub 'release/${Version}/lambda/autoscale.zip'
      Environment:
        Variables:
          ASG: !Ref 'Instances'
          CLUSTER: !Ref 'Cluster'
          EXTRA: !Ref 'AutoscaleExtra'
          STACK: !Ref 'AWS::StackName'
      Handler: handler
      MemorySize: '128'
      Role: !GetAtt 'InstancesAutoscalerRole.Arn'
      Runtime: go1.x
      Timeout: '60'
  InstancesAutoscalerPermission:
    Type: AWS::Lambda::Permission
    Condition: Autoscale
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt 'InstancesAutoscaler.Arn'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt 'InstancesAutoscalerEvent.Arn'
  InstancesAutoscalerEvent:
    Type: AWS::Events::Rule
    Condition: Autoscale
    Properties:
      ScheduleExpression: cron(*/1 * * * ? *)
      Targets:
        - Id: InstancesAutoscaler
          Arn: !GetAtt 'InstancesAutoscaler.Arn'
  InstancesAutoscalerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /convox/
      Policies:
        - PolicyName: instances-autoscaler
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:UpdateStack
                  - ecs:DescribeContainerInstances
                  - ecs:DescribeServices
                  - ecs:DescribeTaskDefinition
                  - ecs:ListContainerInstances
                  - ecs:ListServices
                Resource: '*'
  InstancesLifecycleLaunching:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref 'Instances'
      DefaultResult: CONTINUE
      HeartbeatTimeout: '600'
      LifecycleTransition: autoscaling:EC2_INSTANCE_LAUNCHING
      NotificationTargetARN: !Ref 'InstancesLifecycleTopic'
      RoleARN: !GetAtt 'InstancesLifecycleRole.Arn'
  InstancesLifecycleTerminating:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref 'Instances'
      DefaultResult: CONTINUE
      HeartbeatTimeout: '300'
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      NotificationTargetARN: !Ref 'InstancesLifecycleTopic'
      RoleARN: !GetAtt 'InstancesLifecycleRole.Arn'
  InstancesLifecycleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - autoscaling.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /convox/
      Policies:
        - PolicyName: InstancesLifecycleRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref 'InstancesLifecycleTopic'
  InstancesLifecycleTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !GetAtt 'InstancesLifecycleHandler.Arn'
          Protocol: lambda
      TopicName: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - -lifecycle
  InstancesLifecycleHandler:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
          - '-'
          - - convox
            - !Ref 'AWS::Region'
        S3Key: !Join
          - ''
          - - release/
            - !Ref 'Version'
            - /lambda/lifecycle.zip
      Description: !Join
        - ''
        - - '{"Cluster": "'
          - !Ref 'Cluster'
          - '", "Rack": "'
          - !Ref 'AWS::StackName'
          - '"}'
      Handler: index.external
      MemorySize: '128'
      Role: !GetAtt 'InstancesLifecycleHandlerRole.Arn'
      Runtime: nodejs8.10
      Timeout: '300'
  InstancesLifecycleHandlerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt 'InstancesLifecycleHandler.Arn'
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref 'InstancesLifecycleTopic'
  InstancesLifecycleHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /convox/
      Policies:
        - PolicyName: InstancesLifecycleHandlerRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:CompleteLifecycleAction
                  - ecs:DeregisterContainerInstance
                  - ecs:DescribeContainerInstances
                  - ecs:DescribeServices
                  - ecs:DescribeTasks
                  - ecs:ListContainerInstances
                  - ecs:ListServices
                  - ecs:ListTasks
                  - ecs:StopTask
                  - ecs:UpdateContainerInstancesState
                  - lambda:GetFunction
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
  SpotLaunchConfiguration:
    Condition: SpotInstances
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: !If
        - Private
        - false
        - true
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            Encrypted: !If
              - EncryptEbs
              - 'true'
              - !Ref 'AWS::NoValue'
            VolumeSize: !Ref 'VolumeSize'
            VolumeType: gp2
        - !If
          - SwapEnabled
          - DeviceName: /dev/xvdb
            Ebs:
              Encrypted: !If
                - EncryptEbs
                - 'true'
                - !Ref 'AWS::NoValue'
              VolumeSize: !Ref 'SwapSize'
              VolumeType: gp2
          - !Ref 'AWS::NoValue'
      IamInstanceProfile: !Ref 'InstancesProfile'
      ImageId: !If
        - BlankAmi
        - !FindInMap
          - RegionConfig
          - !Ref 'AWS::Region'
          - Ami
        - !Ref 'Ami'
      InstanceMonitoring: true
      InstanceType: !Ref 'InstanceType'
      KeyName: !If
        - BlankKey
        - !Ref 'AWS::NoValue'
        - !Ref 'Key'
      SecurityGroups:
        - !If
          - BlankInstanceSecurityGroup
          - !Ref 'InstancesSecurity'
          - !Ref 'InstanceSecurityGroup'
      SpotPrice: !Ref 'SpotInstanceBid'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "#cloud-config\n"
            - "repo_upgrade_exclude:\n"
            - "  - kernel*\n"
            - "packages:\n"
            - "  - aws-cfn-bootstrap\n"
            - "mounts:\n"
            - !If
              - SwapEnabled
              - "  - ['/dev/xvdb', 'none', 'swap', 'sw', '0', '0']\n"
              - !Ref 'AWS::NoValue'
            - "bootcmd:\n"
            - !If
              - SwapEnabled
              - !Join
                - ''
                - - "  - mkswap /dev/xvdb\n"
                  - "  - swapon /dev/xvdb\n"
              - !Ref 'AWS::NoValue'
            - '  - export http_proxy='
            - !Ref 'HttpProxy'
            - "\n"
            - '  - echo http_proxy='
            - !Ref 'HttpProxy'
            - " >> /etc/environment\n"
            - '  - export https_proxy='
            - !Ref 'HttpProxy'
            - "\n"
            - '  - echo https_proxy='
            - !Ref 'HttpProxy'
            - " >> /etc/environment\n"
            - '  - export HTTP_PROXY='
            - !Ref 'HttpProxy'
            - "\n"
            - '  - echo HTTP_PROXY='
            - !Ref 'HttpProxy'
            - " >> /etc/environment\n"
            - '  - export HTTPS_PROXY='
            - !Ref 'HttpProxy'
            - "\n"
            - '  - echo HTTPS_PROXY='
            - !Ref 'HttpProxy'
            - " >> /etc/environment\n"
            - "  - export NO_PROXY=169.254.169.254\n"
            - "  - echo NO_PROXY=169.254.169.254 >> /etc/environment\n"
            - !If
              - HttpProxy
              - !Join
                - ''
                - - '  - echo "proxy='
                  - !Ref 'HttpProxy'
                  - "/\" >> /etc/yum.conf\n"
              - !Ref 'AWS::NoValue'
            - "  - until yum install -y aws-cli nfs-utils; do echo \"Waiting for network\"\
              ; done;\n"
            - "  - mkdir /volumes\n"
            - !If
              - RegionHasEFS
              - !Join
                - ''
                - - '  - while true; do mount -t nfs -o nfsvers=4.1 $(curl -s --noproxy
                    169.254.169.254 http://169.254.169.254/latest/meta-data/placement/availability-zone).'
                  - !Ref 'VolumeFilesystem'
                  - .efs.
                  - !Ref 'AWS::Region'
                  - ".amazonaws.com:/ /volumes && break; sleep 5; done\n"
              - ''
            - "  - [ cloud-init-per, instance, docker_storage_setup, /usr/bin/docker-storage-setup\
              \ ]\n"
            - '  - echo ECS_CLUSTER='
            - !Ref 'Cluster'
            - " >> /etc/ecs/ecs.config\n"
            - "  - echo ECS_ENABLE_CONTAINER_METADATA=true >> /etc/ecs/ecs.config\n"
            - "  - echo ECS_ENGINE_AUTH_TYPE=docker >> /etc/ecs/ecs.config\n"
            - "  - echo 'ECS_INSTANCE_ATTRIBUTES={\"asg\":\"spot\"}' >> /etc/ecs/ecs.config\n"
            - '  - echo HTTP_PROXY='
            - !Ref 'HttpProxy'
            - " >> /etc/ecs/ecs.config\n"
            - "  - echo NO_PROXY=169.254.169.254,169.254.170.2,/var/run/docker.sock\
              \ >> /etc/ecs/ecs.config\n"
            - "  - echo 'OPTIONS=\"--default-ulimit nofile=1024000:1024000 --log-opt\
              \ max-file=2 --log-opt max-size=50m --host=unix:///var/run/docker.sock\
              \ --host=0.0.0.0:2376\"' >> /etc/sysconfig/docker\n"
            - "  - echo 'ECS_ENGINE_AUTH_DATA={\"index.docker.io\":{\"username\":\"\
              \",\"password\":\"\",\"email\":\"\"}' >> /etc/ecs/ecs.config\n"
            - "  - echo 'docker image prune -a --filter=\"until=96h\" --force' > /etc/cron.daily/docker-prune\n"
            - "  - chmod +x /etc/cron.daily/docker-prune\n"
            - !If
              - HttpProxy
              - !Join
                - ''
                - - '  - echo "export HTTP_PROXY='
                  - !Ref 'HttpProxy'
                  - "/\" >> /etc/sysconfig/docker\n"
              - !Ref 'AWS::NoValue'
            - "  - echo -e '/var/log/docker {\\n  rotate 7\\n  daily\\n  nocompress\\\
              n  copytruncate\\n}' >> /etc/logrotate.d/docker\n"
            - !If
              - BlankInstanceBootCommand
              - !Ref 'AWS::NoValue'
              - !Join
                - ''
                - - '  - '
                  - !Ref 'InstanceBootCommand'
                  - "\n"
            - "runcmd:\n"
            - !If
              - BlankInstanceRunCommand
              - !Ref 'AWS::NoValue'
              - !Join
                - ''
                - - '  - '
                  - !Ref 'InstanceRunCommand'
                  - "\n"
            - "  - export INSTANCE_ID=$(curl -s --noproxy 169.254.169.254 http://169.254.169.254/latest/meta-data/instance-id)\n"
            - '  - export ASG_NAME=$(env $(cat /etc/environment) /usr/bin/aws autoscaling
              describe-auto-scaling-instances --instance-ids=$INSTANCE_ID --region '
            - !Ref 'AWS::Region'
            - " --output text --query 'AutoScalingInstances[0].AutoScalingGroupName')\n"
            - '  - export LIFECYCLE_HOOK=$(env $(cat /etc/environment) /usr/bin/aws
              autoscaling describe-lifecycle-hooks --auto-scaling-group-name $ASG_NAME
              --region '
            - !Ref 'AWS::Region'
            - ' --output text --query "LifecycleHooks[?contains(LifecycleHookName,
              '''
            - !Ref 'AWS::StackName'
            - "-SpotInstancesLifecycleLaunching') == \\`true\\`].LifecycleHookName\
              \ | [0]\")\n"
            - '  - env $(cat /etc/environment) /usr/bin/aws autoscaling complete-lifecycle-action
              --region '
            - !Ref 'AWS::Region'
            - " --instance-id $INSTANCE_ID --lifecycle-hook-name $LIFECYCLE_HOOK --auto-scaling-group-name\
              \ $ASG_NAME --lifecycle-action-result CONTINUE\n"
            - '  - env $(cat /etc/environment) /opt/aws/bin/cfn-signal --http-proxy
              "'
            - !Ref 'HttpProxy'
            - '" --stack '
            - !Ref 'AWS::StackName'
            - ' --region '
            - !Ref 'AWS::Region'
            - " --resource SpotInstances\n"
  SpotInstances:
    Condition: SpotInstances
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref 'SpotLaunchConfiguration'
      VPCZoneIdentifier: !If
        - Private
        - - !Ref 'SubnetPrivate0'
          - !Ref 'SubnetPrivate1'
          - !If
            - ThirdAvailabilityZone
            - !Ref 'SubnetPrivate2'
            - !Ref 'AWS::NoValue'
        - - !Ref 'Subnet0'
          - !Ref 'Subnet1'
          - !If
            - ThirdAvailabilityZone
            - !Ref 'Subnet2'
            - !Ref 'AWS::NoValue'
      Cooldown: 5
      HealthCheckType: EC2
      HealthCheckGracePeriod: '120'
      MinSize: '0'
      MaxSize: '1000'
      MetricsCollection:
        - Granularity: 1Minute
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
          PropagateAtLaunch: true
        - Key: Rack
          Value: !Ref 'AWS::StackName'
          PropagateAtLaunch: true
        - Key: GatewayAttachment
          Value: !If
            - ExistingVpc
            - existing
            - !Ref 'GatewayAttachment'
          PropagateAtLaunch: false
        - Key: InstanceCount
          Value: !Ref 'InstanceCount'
          PropagateAtLaunch: false
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: !Ref 'InstanceUpdateBatchSize'
        MinInstancesInService: '0'
        PauseTime: PT5M
        SuspendProcesses:
          - ScheduledActions
        WaitOnResourceSignals: 'true'
  SpotInstancesLifecycleLaunching:
    Condition: SpotInstances
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref 'SpotInstances'
      DefaultResult: CONTINUE
      HeartbeatTimeout: '600'
      LifecycleTransition: autoscaling:EC2_INSTANCE_LAUNCHING
      NotificationTargetARN: !Ref 'InstancesLifecycleTopic'
      RoleARN: !GetAtt 'InstancesLifecycleRole.Arn'
  SpotInstancesLifecycleTerminating:
    Condition: SpotInstances
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref 'SpotInstances'
      DefaultResult: CONTINUE
      HeartbeatTimeout: '300'
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      NotificationTargetARN: !Ref 'InstancesLifecycleTopic'
      RoleARN: !GetAtt 'InstancesLifecycleRole.Arn'
  VolumeFilesystem:
    Type: AWS::EFS::FileSystem
    Condition: RegionHasEFS
    Properties:
      FileSystemTags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - shared-volumes
  VolumeSecurity:
    DependsOn: ApiRole
    Type: AWS::EC2::SecurityGroup
    Condition: RegionHasEFS
    Properties:
      GroupDescription: !Sub '${AWS::StackName} volumes'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '2049'
          ToPort: '2049'
          SourceSecurityGroupId: !If
            - BlankInstanceSecurityGroup
            - !Ref 'InstancesSecurity'
            - !Ref 'InstanceSecurityGroup'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-volumes'
      VpcId: !If
        - BlankExistingVpc
        - !Ref 'Vpc'
        - !Ref 'ExistingVpc'
  VolumeTarget0:
    Type: AWS::EFS::MountTarget
    Condition: RegionHasEFS
    Properties:
      FileSystemId: !Ref 'VolumeFilesystem'
      SubnetId: !If
        - Private
        - !Ref 'SubnetPrivate0'
        - !Ref 'Subnet0'
      SecurityGroups:
        - !Ref 'VolumeSecurity'
  VolumeTarget1:
    Type: AWS::EFS::MountTarget
    Condition: RegionHasEFS
    Properties:
      FileSystemId: !Ref 'VolumeFilesystem'
      SubnetId: !If
        - Private
        - !Ref 'SubnetPrivate1'
        - !Ref 'Subnet1'
      SecurityGroups:
        - !Ref 'VolumeSecurity'
  VolumeTarget2:
    Type: AWS::EFS::MountTarget
    Condition: RegionHasEFSAndThirdAvailabilityZone
    Properties:
      FileSystemId: !Ref 'VolumeFilesystem'
      SubnetId: !If
        - Private
        - !Ref 'SubnetPrivate2'
        - !Ref 'Subnet2'
      SecurityGroups:
        - !Ref 'VolumeSecurity'
  AccountEvents:
    Type: AWS::SQS::Queue
  AccountEventsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref 'AccountEvents'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: '*'
            Action: sqs:SendMessage
            Resource: !GetAtt 'AccountEvents.Arn'
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt 'AccountEventsRule.Arn'
  AccountEventsRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Specified event changes
      EventPattern:
        account:
          - !Ref 'AWS::AccountId'
        source:
          - aws.ecs
        detail-type:
          - ECS Task State Change
        detail:
          clusterArn:
            - !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${Cluster}'
      State: ENABLED
      Targets:
        - Arn: !GetAtt 'AccountEvents.Arn'
          Id: Events
  CloudformationEvents:
    Type: AWS::SQS::Queue
  CloudformationEventsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref 'CloudformationEvents'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: '*'
            Action: sqs:SendMessage
            Resource: !GetAtt 'CloudformationEvents.Arn'
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref 'CloudformationTopic'
  CloudformationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub '${AWS::StackName}-events'
      Subscription:
        - Protocol: sqs
          Endpoint: !GetAtt 'CloudformationEvents.Arn'
  Router:
    Condition: PublicRouter
    DependsOn:
      - ApiRole
      - LogsPolicy
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: 'true'
        - Key: access_logs.s3.bucket
          Value: !If
            - BlankLogBucket
            - !Ref 'Logs'
            - !Ref 'LogBucket'
        - Key: access_logs.s3.prefix
          Value: !Sub 'convox/logs/${AWS::StackName}/alb'
        - Key: idle_timeout.timeout_seconds
          Value: '3600'
      Subnets:
        - !Ref 'Subnet0'
        - !Ref 'Subnet1'
        - !If
          - ThirdAvailabilityZone
          - !Ref 'Subnet2'
          - !Ref 'AWS::NoValue'
      SecurityGroups: !If
        - BlankRouterSecurityGroup
        - - !Ref 'RouterSecurity'
        - !Ref 'RouterSecurityGroup'
      Tags:
        - Key: Rack
          Value: !Ref 'AWS::StackName'
  RouterSecurity:
    Type: AWS::EC2::SecurityGroup
    Condition: PublicRouter
    DependsOn: ApiRole
    Properties:
      GroupDescription: !Sub '${AWS::StackName} router'
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
        - CidrIp: '0.0.0.0/0'
          IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-router'
      VpcId: !If
        - BlankExistingVpc
        - !Ref 'Vpc'
        - !Ref 'ExistingVpc'
  RouterListener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: PublicRouter
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: '443'
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref 'Router'
      Port: '80'
      Protocol: HTTP
  RouterListener443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: PublicRouter
    Properties:
      Certificates:
        - CertificateArn: !Ref 'RouterApiCertificate'
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'RouterApiTargetGroup'
      LoadBalancerArn: !Ref 'Router'
      Port: '443'
      Protocol: HTTPS
      SslPolicy: !If
        - BlankSslPolicy
        - !Ref 'AWS::NoValue'
        - !Ref 'SslPolicy'
  RouterApiCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: PublicRouter
    DependsOn: RouterApiTargetGroup
    Properties:
      DomainName: !Join
        - .
        - - '*'
          - !Select
            - 0
            - !Split
              - .
              - !GetAtt 'Router.DNSName'
          - !Select
            - 1
            - !Split
              - .
              - !GetAtt 'Router.DNSName'
          - convox.site
      DomainValidationOptions:
        - DomainName: !Join
            - .
            - - '*'
              - !Select
                - 0
                - !Split
                  - .
                  - !GetAtt 'Router.DNSName'
              - !Select
                - 1
                - !Split
                  - .
                  - !GetAtt 'Router.DNSName'
              - convox.site
          ValidationDomain: convox.site
  RouterApiTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: PublicRouter
    DependsOn: Router
    Properties:
      HealthCheckIntervalSeconds: '5'
      HealthCheckTimeoutSeconds: '3'
      UnhealthyThresholdCount: '2'
      HealthCheckPath: /check
      Port: '5443'
      Protocol: HTTPS
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
        - Key: stickiness.enabled
          Value: 'true'
      VpcId: !If
        - BlankExistingVpc
        - !Ref 'Vpc'
        - !Ref 'ExistingVpc'
  RouterInternal:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition: Internal
    DependsOn:
      - ApiRole
      - LogsPolicy
    Properties:
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: 'true'
        - Key: access_logs.s3.bucket
          Value: !If
            - BlankLogBucket
            - !Ref 'Logs'
            - !Ref 'LogBucket'
        - Key: access_logs.s3.prefix
          Value: !Sub 'convox/logs/${AWS::StackName}/alb'
        - Key: idle_timeout.timeout_seconds
          Value: '3600'
      Name: !If
        - BlankInternalSuffix
        - !Ref 'AWS::NoValue'
        - !Sub '${AWS::StackName}${InternalSuffix}'
      Scheme: internal
      Subnets:
        - !Ref 'Subnet0'
        - !Ref 'Subnet1'
        - !If
          - ThirdAvailabilityZone
          - !Ref 'Subnet2'
          - !Ref 'AWS::NoValue'
      SecurityGroups: !If
        - BlankRouterInternalSecurityGroup
        - - !Ref 'RouterInternalSecurity'
        - !Ref 'RouterInternalSecurityGroup'
      Tags:
        - Key: Rack
          Value: !Ref 'AWS::StackName'
  RouterInternalSecurity:
    Type: AWS::EC2::SecurityGroup
    Condition: Internal
    DependsOn: ApiRole
    Properties:
      GroupDescription: !Sub '${AWS::StackName} internal router'
      SecurityGroupIngress:
        - CidrIp: !Ref 'VPCCIDR'
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
        - CidrIp: !Ref 'VPCCIDR'
          IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-router-internal'
      VpcId: !If
        - BlankExistingVpc
        - !Ref 'Vpc'
        - !Ref 'ExistingVpc'
  RouterInternalListener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: Internal
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'RouterInternalApiTargetGroup'
      LoadBalancerArn: !Ref 'RouterInternal'
      Port: '80'
      Protocol: HTTP
  RouterInternalListener443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: Internal
    Properties:
      Certificates:
        - CertificateArn: !Ref 'RouterInternalCertificate'
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'RouterInternalApiTargetGroup'
      LoadBalancerArn: !Ref 'RouterInternal'
      Port: '443'
      Protocol: HTTPS
      SslPolicy: !If
        - BlankSslPolicy
        - !Ref 'AWS::NoValue'
        - !Ref 'SslPolicy'
  RouterInternalCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: Internal
    DependsOn: RouterInternalApiTargetGroup
    Properties:
      DomainName: !Join
        - .
        - - '*'
          - !Select
            - 0
            - !Split
              - .
              - !GetAtt 'RouterInternal.DNSName'
          - !Select
            - 1
            - !Split
              - .
              - !GetAtt 'RouterInternal.DNSName'
          - convox.site
      DomainValidationOptions:
        - DomainName: !Join
            - .
            - - '*'
              - !Select
                - 0
                - !Split
                  - .
                  - !GetAtt 'RouterInternal.DNSName'
              - !Select
                - 1
                - !Split
                  - .
                  - !GetAtt 'RouterInternal.DNSName'
              - convox.site
          ValidationDomain: convox.site
  RouterInternalApiTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: Internal
    DependsOn: RouterInternal
    Properties:
      HealthCheckIntervalSeconds: '5'
      HealthCheckTimeoutSeconds: '3'
      UnhealthyThresholdCount: '2'
      HealthCheckPath: /check
      Port: '5443'
      Protocol: HTTPS
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
        - Key: stickiness.enabled
          Value: 'true'
      VpcId: !If
        - BlankExistingVpc
        - !Ref 'Vpc'
        - !Ref 'ExistingVpc'
  Balancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 60
      ConnectionSettings:
        IdleTimeout: 3600
      CrossZone: true
      HealthCheck:
        HealthyThreshold: '2'
        Interval: 5
        Target: !If
          - PrivateApi
          - HTTPS:3100/check
          - HTTPS:3000/check
        Timeout: 3
        UnhealthyThreshold: '2'
      LBCookieStickinessPolicy:
        - PolicyName: affinity
      Listeners: !If
        - PrivateApi
        - - Protocol: TCP
            LoadBalancerPort: '443'
            InstanceProtocol: TCP
            InstancePort: '3100'
        - - Protocol: TCP
            LoadBalancerPort: '443'
            InstanceProtocol: TCP
            InstancePort: '3000'
      LoadBalancerName: !If
        - PrivateApi
        - !Join
          - '-'
          - - !Ref 'AWS::StackName'
            - i
        - !Ref 'AWS::StackName'
      Scheme: !If
        - PrivateApi
        - internal
        - !Ref 'AWS::NoValue'
      SecurityGroups:
        - !Ref 'BalancerSecurity'
      Subnets: !If
        - PrivateApi
        - - !Ref 'SubnetPrivate0'
          - !Ref 'SubnetPrivate1'
          - !If
            - ThirdAvailabilityZone
            - !Ref 'SubnetPrivate2'
            - !Ref 'AWS::NoValue'
        - - !Ref 'Subnet0'
          - !Ref 'Subnet1'
          - !If
            - ThirdAvailabilityZone
            - !Ref 'Subnet2'
            - !Ref 'AWS::NoValue'
      Tags:
        - Key: GatewayAttachment
          Value: !If
            - ExistingVpc
            - existing
            - !Ref 'GatewayAttachment'
        - Key: Name
          Value: !Ref 'AWS::StackName'
  BalancerSecurity:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${AWS::StackName} balancer'
      SecurityGroupIngress:
        - CidrIp: !If
            - PrivateApi
            - !If
              - BlankPrivateApiSecurityGroup
              - !Ref 'VPCCIDR'
              - !Ref 'AWS::NoValue'
            - '0.0.0.0/0'
          SourceSecurityGroupId: !If
            - PrivateApi
            - !If
              - BlankPrivateApiSecurityGroup
              - !Ref 'AWS::NoValue'
              - !Ref 'PrivateApiSecurityGroup'
            - !Ref 'AWS::NoValue'
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
        - CidrIp: !If
            - PrivateApi
            - !If
              - BlankPrivateApiSecurityGroup
              - !Ref 'VPCCIDR'
              - !Ref 'AWS::NoValue'
            - '0.0.0.0/0'
          SourceSecurityGroupId: !If
            - PrivateApi
            - !If
              - BlankPrivateApiSecurityGroup
              - !Ref 'AWS::NoValue'
              - !Ref 'PrivateApiSecurityGroup'
            - !Ref 'AWS::NoValue'
          IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-balancer'
      VpcId: !If
        - BlankExistingVpc
        - !Ref 'Vpc'
        - !Ref 'ExistingVpc'
  Cluster:
    Type: AWS::ECS::Cluster
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - sts:AssumeRole
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole
      Path: /convox/
  ApiPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Path: /convox/
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - iam:*
            Resource:
              - arn:aws:iam::*:instance-profile/convox/*
              - arn:aws:iam::*:policy/convox/*
              - arn:aws:iam::*:role/convox/*
              - arn:aws:iam::*:user/convox/*
          - Effect: Allow
            Action:
              - iam:DeleteServerCertificate
              - iam:DetachRolePolicy
              - iam:GetRole
              - iam:GetServerCertificate
              - iam:ListServerCertificates
              - iam:PassRole
              - iam:UploadServerCertificate
            Resource:
              - '*'
  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/PowerUserAccess
        - !Ref 'ApiPolicy'
      Path: /convox/
  ApiMonitorService:
    Type: AWS::ECS::Service
    DependsOn:
      - Instances
    Properties:
      Cluster: !Ref 'Cluster'
      DeploymentConfiguration:
        MinimumHealthyPercent: '100'
        MaximumPercent: '200'
      DesiredCount: '1'
      PlacementConstraints:
        - Type: memberOf
          Expression: attribute:asg == primary
      TaskDefinition: !Ref 'ApiMonitorTasks'
  ApiWebService:
    Type: AWS::ECS::Service
    DependsOn:
      - Instances
    Properties:
      Cluster: !Ref 'Cluster'
      DeploymentConfiguration:
        MinimumHealthyPercent: '50'
        MaximumPercent: '200'
      DesiredCount: !Ref 'ApiCount'
      LoadBalancers:
        - ContainerName: web
          ContainerPort: '5443'
          LoadBalancerName: !Ref 'Balancer'
      Role: !GetAtt 'ServiceRole.Arn'
      TaskDefinition: !Ref 'ApiWebTasks'
  ApiBuildTasks:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Cpu: !Ref 'BuildCpu'
          DockerLabels:
            convox.release: !Ref 'Version'
            rack.BuildCluster: !If
              - DedicatedBuilder
              - !Ref 'BuildCluster'
              - !Ref 'Cluster'
            rack.CloudformationTopic: !Ref 'CloudformationTopic'
            rack.Cluster: !Ref 'Cluster'
            rack.DynamoBuilds: !Ref 'DynamoBuilds'
            rack.DynamoReleases: !Ref 'DynamoReleases'
            rack.EcsPollInterval: !Ref 'EcsPollInterval'
            rack.EncryptionKey: !Ref 'EncryptionKey'
            rack.Fargate: !FindInMap
              - RegionConfig
              - !Ref 'AWS::Region'
              - Fargate
            rack.Internal: !Ref 'Internal'
            rack.InternalOnly: !Ref 'InternalOnly'
            rack.LogBucket: !If
              - BlankLogBucket
              - !Ref 'Logs'
              - !Ref 'LogBucket'
            rack.NotificationTopic: !Ref 'NotificationTopic'
            rack.OnDemandMinCount: !Ref 'OnDemandMinCount'
            rack.Private: !Ref 'Private'
            rack.SecurityGroup: !If
              - BlankInstanceSecurityGroup
              - !Ref 'InstancesSecurity'
              - !Ref 'InstanceSecurityGroup'
            rack.SettingsBucket: !Ref 'Settings'
            rack.SpotInstances: !If
              - SpotInstances
              - 'Yes'
              - 'No'
            rack.Subnets: !Join
              - ','
              - - !Ref 'Subnet0'
                - !Ref 'Subnet1'
                - !If
                  - ThirdAvailabilityZone
                  - !Ref 'Subnet2'
                  - !Ref 'AWS::NoValue'
            rack.SubnetsPrivate: !If
              - Private
              - !Join
                - ','
                - - !Ref 'SubnetPrivate0'
                  - !Ref 'SubnetPrivate1'
                  - !If
                    - ThirdAvailabilityZone
                    - !Ref 'SubnetPrivate2'
                    - !Ref 'AWS::NoValue'
              - !Ref 'AWS::NoValue'
            rack.Version: !Ref 'Version'
            rack.Vpc: !If
              - BlankExistingVpc
              - !Ref 'Vpc'
              - !Ref 'ExistingVpc'
            rack.VpcCidr: !Ref 'VPCCIDR'
          Environment:
            - Name: AWS_REGION
              Value: !Ref 'AWS::Region'
            - Name: HTTP_PROXY
              Value: !Ref 'HttpProxy'
            - Name: HTTPS_PROXY
              Value: !Ref 'HttpProxy'
            - Name: PASSWORD
              Value: !Ref 'Password'
            - Name: PROVIDER
              Value: aws
            - Name: RACK
              Value: !Ref 'AWS::StackName'
            - Name: STACK_ID
              Value: !Ref 'AWS::StackId'
          Image: !If
            - BlankBuildImage
            - !Sub 'convox/rack:${Version}'
            - !Ref 'BuildImage'
          LinuxParameters:
            InitProcessEnabled: 'true'
          Memory: !Ref 'BuildMemory'
          MountPoints:
            - SourceVolume: config
              ContainerPath: /etc/sysconfig/docker
            - SourceVolume: docker
              ContainerPath: /var/run/docker.sock
          Name: build
      Family: !Sub '${AWS::StackName}-build'
      TaskRoleArn: !GetAtt 'ApiRole.Arn'
      Volumes:
        - Name: config
          Host:
            SourcePath: /etc/sysconfig/docker
        - Name: docker
          Host:
            SourcePath: /var/run/docker.sock
  ApiMonitorTasks:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Command:
            - /go/bin/monitor
          Cpu: '64'
          DockerLabels:
            convox.release: !Ref 'Version'
            rack.BuildCluster: !If
              - DedicatedBuilder
              - !Ref 'BuildCluster'
              - !Ref 'Cluster'
            rack.CloudformationTopic: !Ref 'CloudformationTopic'
            rack.Cluster: !Ref 'Cluster'
            rack.DynamoBuilds: !Ref 'DynamoBuilds'
            rack.DynamoReleases: !Ref 'DynamoReleases'
            rack.EcsPollInterval: !Ref 'EcsPollInterval'
            rack.EncryptionKey: !Ref 'EncryptionKey'
            rack.Fargate: !FindInMap
              - RegionConfig
              - !Ref 'AWS::Region'
              - Fargate
            rack.Internal: !Ref 'Internal'
            rack.InternalOnly: !Ref 'InternalOnly'
            rack.LogBucket: !If
              - BlankLogBucket
              - !Ref 'Logs'
              - !Ref 'LogBucket'
            rack.NotificationTopic: !Ref 'NotificationTopic'
            rack.OnDemandMinCount: !Ref 'OnDemandMinCount'
            rack.Private: !Ref 'Private'
            rack.SecurityGroup: !If
              - BlankInstanceSecurityGroup
              - !Ref 'InstancesSecurity'
              - !Ref 'InstanceSecurityGroup'
            rack.SettingsBucket: !Ref 'Settings'
            rack.SpotInstances: !If
              - SpotInstances
              - 'Yes'
              - 'No'
            rack.Subnets: !Join
              - ','
              - - !Ref 'Subnet0'
                - !Ref 'Subnet1'
                - !If
                  - ThirdAvailabilityZone
                  - !Ref 'Subnet2'
                  - !Ref 'AWS::NoValue'
            rack.SubnetsPrivate: !If
              - Private
              - !Join
                - ','
                - - !Ref 'SubnetPrivate0'
                  - !Ref 'SubnetPrivate1'
                  - !If
                    - ThirdAvailabilityZone
                    - !Ref 'SubnetPrivate2'
                    - !Ref 'AWS::NoValue'
              - !Ref 'AWS::NoValue'
            rack.Version: !Ref 'Version'
            rack.Vpc: !If
              - BlankExistingVpc
              - !Ref 'Vpc'
              - !Ref 'ExistingVpc'
            rack.VpcCidr: !Ref 'VPCCIDR'
          Environment:
            - Name: AWS_REGION
              Value: !Ref 'AWS::Region'
            - Name: CLIENT_ID
              Value: !Ref 'ClientId'
            - Name: HTTP_PROXY
              Value: !Ref 'HttpProxy'
            - Name: HTTPS_PROXY
              Value: !Ref 'HttpProxy'
            - Name: PASSWORD
              Value: !Ref 'Password'
            - Name: PROVIDER
              Value: aws
            - Name: RACK
              Value: !Ref 'AWS::StackName'
            - Name: STACK_ID
              Value: !Ref 'AWS::StackId'
          Image: !Sub 'convox/rack:${Version}'
          LinuxParameters:
            InitProcessEnabled: 'true'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref 'AWS::Region'
              awslogs-group: !Ref 'LogGroup'
              awslogs-stream-prefix: service
          Memory: '128'
          MountPoints:
            - SourceVolume: docker
              ContainerPath: /var/run/docker.sock
          Name: monitor
      Family: !Sub '${AWS::StackName}-monitor'
      TaskRoleArn: !GetAtt 'ApiRole.Arn'
      Volumes:
        - Name: docker
          Host:
            SourcePath: /var/run/docker.sock
  ApiWebTasks:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Command:
            - /go/bin/rack
          Cpu: '128'
          DockerLabels:
            convox.release: !Ref 'Version'
            rack.AsgSpot: !If
              - SpotInstances
              - !Ref 'SpotInstances'
              - !Ref 'AWS::NoValue'
            rack.AsgStandard: !Ref 'Instances'
            rack.AvailabilityZones: !If
              - BlankAvailabilityZones
              - !Join
                - ','
                - - !Select
                    - 0
                    - !GetAZs ''
                  - !Select
                    - 1
                    - !GetAZs ''
                  - !If
                    - ThirdAvailabilityZone
                    - !Select
                      - 2
                      - !GetAZs ''
                    - !Ref 'AWS::NoValue'
              - !Join
                - ','
                - - !Select
                    - 0
                    - !Ref 'AvailabilityZones'
                  - !Select
                    - 1
                    - !Ref 'AvailabilityZones'
                  - !If
                    - ThirdAvailabilityZone
                    - !Select
                      - 2
                      - !Ref 'AvailabilityZones'
                    - !Ref 'AWS::NoValue'
            rack.BuildCluster: !If
              - DedicatedBuilder
              - !Ref 'BuildCluster'
              - !Ref 'Cluster'
            rack.CloudformationTopic: !Ref 'CloudformationTopic'
            rack.Cluster: !Ref 'Cluster'
            rack.CustomEncryptionKey: !Ref 'EncryptionKey'
            rack.DynamoBuilds: !Ref 'DynamoBuilds'
            rack.DynamoReleases: !Ref 'DynamoReleases'
            rack.EcsPollInterval: !Ref 'EcsPollInterval'
            rack.EncryptionKey: !Ref 'EncryptionKey'
            rack.Fargate: !FindInMap
              - RegionConfig
              - !Ref 'AWS::Region'
              - Fargate
            rack.Internal: !Ref 'Internal'
            rack.InternalOnly: !Ref 'InternalOnly'
            rack.LogBucket: !If
              - BlankLogBucket
              - !Ref 'Logs'
              - !Ref 'LogBucket'
            rack.NotificationTopic: !Ref 'NotificationTopic'
            rack.OnDemandMinCount: !Ref 'OnDemandMinCount'
            rack.Private: !Ref 'Private'
            rack.SecurityGroup: !If
              - BlankInstanceSecurityGroup
              - !Ref 'InstancesSecurity'
              - !Ref 'InstanceSecurityGroup'
            rack.SettingsBucket: !Ref 'Settings'
            rack.SshKey: !Ref 'Key'
            rack.SpotInstances: !If
              - SpotInstances
              - 'Yes'
              - 'No'
            rack.Subnets: !Join
              - ','
              - - !Ref 'Subnet0'
                - !Ref 'Subnet1'
                - !If
                  - ThirdAvailabilityZone
                  - !Ref 'Subnet2'
                  - !Ref 'AWS::NoValue'
            rack.SubnetsPrivate: !If
              - Private
              - !Join
                - ','
                - - !Ref 'SubnetPrivate0'
                  - !Ref 'SubnetPrivate1'
                  - !If
                    - ThirdAvailabilityZone
                    - !Ref 'SubnetPrivate2'
                    - !Ref 'AWS::NoValue'
              - !Ref 'AWS::NoValue'
            rack.Version: !Ref 'Version'
            rack.Vpc: !If
              - BlankExistingVpc
              - !Ref 'Vpc'
              - !Ref 'ExistingVpc'
            rack.VpcCidr: !Ref 'VPCCIDR'
          Environment:
            - Name: AWS_REGION
              Value: !Ref 'AWS::Region'
            - Name: CLIENT_ID
              Value: !Ref 'ClientId'
            - Name: HTTP_PROXY
              Value: !Ref 'HttpProxy'
            - Name: HTTPS_PROXY
              Value: !Ref 'HttpProxy'
            - Name: PASSWORD
              Value: !Ref 'Password'
            - Name: PROVIDER
              Value: aws
            - Name: RACK
              Value: !Ref 'AWS::StackName'
            - Name: STACK_ID
              Value: !Ref 'AWS::StackId'
          Image: !Sub 'convox/rack:${Version}'
          LinuxParameters:
            InitProcessEnabled: 'true'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref 'AWS::Region'
              awslogs-group: !Ref 'LogGroup'
              awslogs-stream-prefix: service
          MemoryReservation: !Ref 'ApiMemory'
          MountPoints:
            - SourceVolume: docker
              ContainerPath: /var/run/docker.sock
          Name: web
          PortMappings: !If
            - PrivateApi
            - - HostPort: '3100'
                ContainerPort: '5443'
                Protocol: tcp
            - - HostPort: '3000'
                ContainerPort: '5443'
                Protocol: tcp
      Family: !Sub '${AWS::StackName}-web'
      TaskRoleArn: !GetAtt 'ApiRole.Arn'
      Volumes:
        - Name: docker
          Host:
            SourcePath: /var/run/docker.sock
  DynamoBuilds:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - builds
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: app
          AttributeType: S
        - AttributeName: created
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: app.created
          KeySchema:
            - AttributeName: app
              KeyType: HASH
            - AttributeName: created
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: '5'
            WriteCapacityUnits: '5'
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
  DynamoReleases:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - releases
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: app
          AttributeType: S
        - AttributeName: created
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: app.created
          KeySchema:
            - AttributeName: app
              KeyType: HASH
            - AttributeName: created
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: '5'
            WriteCapacityUnits: '5'
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
  Logs:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
      LifecycleConfiguration: !If
        - BlankLogRetention
        - !Ref 'AWS::NoValue'
        - Rules:
            - ExpirationInDays: !Ref 'LogRetention'
              Status: Enabled
      Tags:
        - Key: System
          Value: convox
        - Key: Rack
          Value: !Ref 'AWS::StackName'
  LogsPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'Logs'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ELB log delivery service
            Effect: Allow
            Principal:
              AWS: !FindInMap
                - RegionConfig
                - !Ref 'AWS::Region'
                - ELBAccountId
            Action: s3:PutObject
            Resource: !Sub 'arn:aws:s3:::${Logs}/*'
  Settings:
    Type: AWS::S3::Bucket
    DependsOn: LogsPolicy
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
      LoggingConfiguration:
        DestinationBucketName: !If
          - BlankLogBucket
          - !Ref 'Logs'
          - !Ref 'LogBucket'
        LogFilePrefix: !Sub 'convox/logs/${AWS::StackName}/s3/'
      Tags:
        - Key: System
          Value: convox
        - Key: Rack
          Value: !Ref 'AWS::StackName'
