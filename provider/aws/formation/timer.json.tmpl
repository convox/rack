{{ with .Timer }}
  {
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Conditions": {
      "EnableCloudWatch": { "Fn::Equals": [ { "Ref": "LogDriver" }, "CloudWatch" ] },
      "EnableSyslog": { "Fn::Equals": [ { "Ref": "LogDriver" }, "Syslog" ] },
      "FargateEither": { "Fn::Or": [ { "Condition": "FargateBase" }, { "Condition": "FargateSpot" } ] },
      "FargateBase": { "Fn::Equals": [ { "Ref": "Fargate" }, "Yes" ] },
      "FargateSpot": { "Fn::Equals": [ { "Ref": "Fargate" }, "Spot" ] },
      "RackUrl": { "Fn::Equals": [ { "Ref": "RackUrl" }, "Yes" ] }
    },
    "Outputs": {
      "Fargate": {
        "Value": { "Fn::If": [ "FargateBase", "Yes", "No" ] }
      },
      "FargateSpot": {
        "Value": { "Fn::If": [ "FargateSpot", "Yes", "No" ] }
      }
    },
    "Parameters" : {
      "Cpu": {
        "Type": "Number"
      },
      "ExecutionRole": {
        "Type": "String"
      },
      "Fargate": {
        "Type": "String",
        "Default": "No",
        "AllowedValues": [ "Yes", "Spot", "No" ]
      },
      "Launcher": {
        "Type": "String"
      },
      "LogDriver": {
        "Default": "CloudWatch",
        "Description": "Log driver used by the rack and services to send logs. Default to CloudWatch. You must provide the SyslogDestination when setting as Syslog. It disable logs if blank.",
        "Type": "String",
        "AllowedValues": [ "CloudWatch", "Syslog", ""]
      },
      "LogGroup": {
        "Default": "",
        "Type": "String"
      },
      "Memory": {
        "Type": "Number"
      },
      "Rack": {
        "Type": "String"
      },
      "RackUrl": {
        "Type": "String",
        "Default": "No",
        "AllowedValues": [ "Yes", "No" ]
      },
      "Registry": {
        "Type": "String"
      },
      {{ range ($.Manifest.Service .Service).Resources }}
        "Resource{{ upper .}}": {
          "Type": "String",
          "NoEcho": "true"
        },
      {{ end }}
      "Role": {
        "Type": "String"
      },
      "ServiceRole": {
        "Type": "String"
      },
      "Settings": {
        "Type": "String"
      },
      "SyslogDestination": {
        "Type": "String",
        "Description": "Syslog address destination, you need to pass the protocol to be used, e.g. tcp+tls://logsX.syslog.com:1234",
        "Default": ""
      },
      "SyslogFormat": {
        "Type": "String",
        "Description": "Syslog format to sent to SyslogDestination.",
        "Default": "rfc5424"
      }
    },
    "Resources": {
      "LauncherPermission": {
        "Type" : "AWS::Lambda::Permission",
        "Properties" : {
          "Action" : "lambda:InvokeFunction",
          "FunctionName" : { "Ref": "Launcher" },
          "Principal" : "events.amazonaws.com",
          "SourceArn" : { "Fn::GetAtt": [ "Timer", "Arn" ] }
        }
      },
      "Timer": {
        "Type": "AWS::Events::Rule",
        "Properties": {
          "ScheduleExpression": "cron({{.Cron}})",
          "Targets": [ {
            "Arn": { "Fn::If": [ "FargateEither",
              { "Ref": "Launcher" },
              { "Fn::Sub": [ "arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${Cluster}", { "Cluster": { "Fn::ImportValue": { "Fn::Sub": "${Rack}:Cluster" } } } ] }
            ] },
            "EcsParameters": { "Fn::If": [ "FargateEither",
              { "Ref": "AWS::NoValue" },
              { "TaskCount": "1", "TaskDefinitionArn": { "Ref": "TaskDefinition" } }
            ] },
            "Id": "{{.Name}}",
            "Input": { "Fn::If": [ "FargateEither",
              { "Fn::Join": [ "", [ "{ \"cluster\": \"", { "Fn::ImportValue": { "Fn::Sub": "${Rack}:Cluster" } }, "\", \"taskDefinition\": \"", { "Ref": "TaskDefinition" }, "\" }" ] ] },
              { "Ref": "AWS::NoValue" }
            ] },
            "RoleArn": { "Fn::If": [ "FargateEither",
              { "Ref": "AWS::NoValue" },
              { "Ref": "Role" }
            ] }
          } ]
        }
      },
      "TaskDefinition": {
        "Type": "AWS::ECS::TaskDefinition",
        "Properties": {
          "ContainerDefinitions": [
            {{ with $.Manifest.Service .Service }}
              {
                "Command": [ "sh", "-c", {{ safe $.Timer.Command }} ],
                "Cpu": { "Ref": "Cpu" },
                "DockerLabels": { "convox.app": "{{$.App}}", "convox.generation": "2", "convox.process.type": "timer", "convox.release": "{{$.Release.Id}}" },
                "Environment": [
                  {{ range $k, $v := .EnvironmentDefaults }}
                    { "Name": "{{$k}}", "Value": {{ safe $v }} },
                  {{ end }}
                  {{ range .Links }}
                    { "Name": "{{ envname . }}_URL", "Value": { "Fn::Join": [ ".", [
                      "https://{{$.App}}-{{.}}", { "Fn::ImportValue": { "Fn::Sub": "${Rack}:{{ router . $.Manifest }}Host" } }
                    ] ] } },
                  {{ end }}
                  {{ range .Resources }}
                    { "Name": "{{ envname . }}_URL", "Value": { "Ref": "Resource{{ upper . }}" } },
                  {{ end }}
                  { "Name": "AWS_REGION", "Value": { "Ref": "AWS::Region" } },
                  { "Name": "APP", "Value": "{{$.App}}" },
                  { "Name": "CONVOX_ENV_KEY", "Value": { "Fn::ImportValue": { "Fn::Sub": "${Rack}:EncryptionKey" } } },
                  { "Name": "CONVOX_ENV_URL", "Value": { "Fn::Sub": "s3://${Settings}/releases/{{$.Release.Id}}/env" } },
                  { "Name": "CONVOX_ENV_VARS", "Value": "{{.EnvironmentKeys}}" },
                  { "Name": "RACK", "Value": { "Ref": "Rack" } },
                  { "Fn::If": [ "RackUrl",
                    { "Name": "RACK_URL", "Value": { "Fn::Sub": "https://convox:{{$.Password}}@rack.${Rack}.convox" } },
                    { "Ref": "AWS::NoValue" }
                  ] },
                  { "Name": "RELEASE", "Value": "{{$.Release.Id}}" },
                  { "Name": "BUILD", "Value": "{{$.Build.Id}}" },
                  { "Name": "BUILD_DESCRIPTION", "Value": {{ safe $.Build.Description }} },
                  { "Name": "SERVICE", "Value": "{{.Name}}" }
                ],
                "Image": { "Fn::Sub": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Registry}:{{.Name}}.{{$.Release.Build}}" },
                "LogConfiguration": {
                  "Fn::If": [
                    "EnableSyslog",
                    {
                      "LogDriver": "syslog",
                      "Options": {
                        "syslog-address": { "Ref": "SyslogDestination" },
                        "syslog-format": { "Ref": "SyslogFormat" }
                      }
                    },
                    {
                      "Fn::If": [
                        "EnableCloudWatch",
                        {
                          "LogDriver": "awslogs",
                          "Options": {
                            "awslogs-region": { "Ref": "AWS::Region" },
                            "awslogs-group": { "Ref": "LogGroup" },
                            "awslogs-stream-prefix": "service"
                          }
                        },
                        {
                          "Ref": "AWS::NoValue"
                        }
                      ]
                    }
                  ]
                },
                "Memory": { "Ref": "Memory" },
                "MountPoints": [
                  {{ range $i, $v := .Volumes }}
                    { "SourceVolume": "volume-{{$i}}", "ContainerPath": "{{ volumeTo $v }}" },
                  {{ end }}
                  { "Ref": "AWS::NoValue" }
                ],
                "Name": "{{$.Timer.Name}}",
                "Ulimits": [ { "Name": "nofile", "SoftLimit": "1024000", "HardLimit": "1024000" } ]
              }
            {{ end }}
          ],
          "Cpu": { "Fn::If": [ "FargateEither", { "Ref": "Cpu" }, { "Ref": "AWS::NoValue" } ] },
          "ExecutionRoleArn": { "Ref": "ExecutionRole" },
          "Family": { "Fn::Sub": "${AWS::StackName}-timer-{{.Name}}" },
          "Memory": { "Fn::If": [ "FargateEither", { "Ref": "Memory" }, { "Ref": "AWS::NoValue" } ] },
          "NetworkMode": { "Fn::If": [ "FargateEither", "awsvpc", { "Ref": "AWS::NoValue" } ] },
          "RequiresCompatibilities": [ { "Fn::If": [ "FargateEither", "FARGATE", { "Ref": "AWS::NoValue" } ] } ],
          "TaskRoleArn": { "Ref": "ServiceRole" },
          "Volumes": [
            {{ range $i, $v := ($.Manifest.Service .Service).Volumes }}
              { "Name": "volume-{{$i}}", "Host": { "SourcePath": "{{ volumeFrom $.App $v }}" } },
            {{ end }}
            { "Ref": "AWS::NoValue" }
          ]
        }
      }
    }
  }
{{ end }}
