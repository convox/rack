{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "Agent": { "Fn::Equals": [ { "Ref": "Agent" }, "Yes" ] },
    "Autoscale": { "Fn::Equals": [ { "Ref": "Autoscale" }, "Yes" ] },
    "BlankAmi": { "Fn::Equals": [ { "Ref": "Ami" }, "" ] },
    "BlankBuildImage": { "Fn::Equals": [ { "Ref": "BuildImage" }, "" ] },
    "BlankExistingVpc": { "Fn::Equals": [ { "Ref": "ExistingVpc" }, "" ] },
    "BlankExistingVpcAndThirdAvailabilityZone": {
      "Fn::And": [ { "Condition": "BlankExistingVpc" }, { "Condition": "ThirdAvailabilityZone" } ]
    },
    "BlankInstanceBootCommand": { "Fn::Equals": [ { "Ref": "InstanceBootCommand" }, "" ] },
    "BlankInstanceRunCommand": { "Fn::Equals": [ { "Ref": "InstanceRunCommand" }, "" ] },
    "BlankInternetGateway": { "Fn::Equals": [ { "Ref": "InternetGateway"}, "" ] },
    "BlankKey": { "Fn::Equals": [ { "Ref": "Key" }, "" ] },
    "DedicatedBuilder": { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "BuildInstance" }, "" ] } ] },
    "Development": { "Fn::Equals": [ { "Ref": "Development" }, "Yes" ] },
    "EncryptEbs" : { "Fn::Equals": [ { "Ref": "EncryptEbs" }, "Yes" ] },
    "ExistingVpc": { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "ExistingVpc" }, "" ] } ] },
    "ExistingVpcAndBlankInternetGateway": {
      "Fn::And": [ { "Condition": "ExistingVpc" }, { "Condition": "BlankInternetGateway" } ]
    },
    "ExistingVpcAndInternetGateway": {
      "Fn::And": [ { "Condition": "ExistingVpc" }, { "Condition": "InternetGateway" } ]
    },
    "HttpProxy": { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "HttpProxy" }, "" ] } ] },
    "InternetGateway": { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "InternetGateway" }, "" ] } ] },
    "NotExistingVpcAndBlankInternetGateway": { "Fn::Not": [ { "Condition": "ExistingVpcAndBlankInternetGateway" } ] },
    "Private": { "Fn::Equals": [ { "Ref": "Private" }, "Yes" ] },
    "PrivateAndThirdAvailabilityZone": {
      "Fn::And": [ { "Condition": "Private" }, { "Condition": "ThirdAvailabilityZone" } ]
    },
    "PrivateApi": { "Fn::Equals": [ { "Ref": "PrivateApi" }, "Yes" ] },
    "RegionHasEFS": { "Fn::Equals": [
      { "Fn::FindInMap": [ "RegionConfig", { "Ref": "AWS::Region" }, "EFS" ] },
      "Yes"
    ] },
    "RegionHasEFSAndThirdAvailabilityZone": {
      "Fn::And": [ { "Condition": "RegionHasEFS" }, { "Condition": "ThirdAvailabilityZone" } ]
    },
    "ThirdAvailabilityZone": { "Fn::Equals": [
      { "Fn::FindInMap": [ "RegionConfig", { "Ref": "AWS::Region" }, "ThirdAvailabilityZone" ] },
      "Yes"
    ] },
    "ThirdAvailabilityZoneAndNotExistingVpcAndBlankInternetGateway": {
      "Fn::And": [
        { "Condition": "ThirdAvailabilityZone"},
        { "Condition": "NotExistingVpcAndBlankInternetGateway"}
      ]
    }
  },
  "Mappings": {
    "RegionConfig": {
      "us-east-1":      { "Ami": "ami-275ffe31", "EFS": "Yes", "ThirdAvailabilityZone": "Yes" },
      "us-east-2":      { "Ami": "ami-62745007", "EFS": "Yes", "ThirdAvailabilityZone": "Yes" },
      "us-west-1":      { "Ami": "ami-689bc208", "EFS": "No",  "ThirdAvailabilityZone": "No"  },
      "us-west-2":      { "Ami": "ami-62d35c02", "EFS": "Yes", "ThirdAvailabilityZone": "Yes" },
      "eu-west-1":      { "Ami": "ami-95f8d2f3", "EFS": "Yes", "ThirdAvailabilityZone": "Yes" },
      "eu-west-2":      { "Ami": "ami-bf9481db", "EFS": "No",  "ThirdAvailabilityZone": "No"  },
      "eu-central-1":   { "Ami": "ami-085e8a67", "EFS": "No",  "ThirdAvailabilityZone": "No"  },
      "ap-northeast-1": { "Ami": "ami-f63f6f91", "EFS": "No",  "ThirdAvailabilityZone": "No"  },
      "ap-southeast-1": { "Ami": "ami-b4ae1dd7", "EFS": "No",  "ThirdAvailabilityZone": "No"  },
      "ap-southeast-2": { "Ami": "ami-fbe9eb98", "EFS": "No",  "ThirdAvailabilityZone": "Yes" },
      "ca-central-1":   { "Ami": "ami-ee58e58a", "EFS": "No",  "ThirdAvailabilityZone": "No"  }
    }
  },
  "Outputs": {
    "Autoscale": {
      "Value": { "Fn::If": [ "Autoscale", "true", "false" ] }
    },
    "AutoscalingGroup": {
      "Value": { "Ref": "Instances" }
    },
    "AvailabilityZones": {
      "Value": { "Ref": "AvailabilityZones" }
    },
    "AwsRegion": {
      "Value": { "Ref": "AWS::Region" }
    },
    "AwsAccess": {
      "Condition": "Development",
      "Value": { "Ref": "KernelAccess" }
    },
    "AwsSecret": {
      "Condition": "Development",
      "Value": { "Fn::GetAtt": [ "KernelAccess", "SecretAccessKey" ] }
    },
    "BalancerSecurityGroup": {
      "Value": { "Ref": "BalancerSecurityGroup" }
    },
    "BuildCluster": {
      "Value": { "Fn::If": [ "DedicatedBuilder", { "Ref": "BuildCluster" }, { "Ref": "Cluster" } ] }
    },
    "CloudformationTopic": {
      "Value": { "Ref": "CloudformationTopic" }
    },
    "Cluster": {
      "Value": { "Ref": "Cluster" }
    },
    "CustomTopic": {
      "Value": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] }
    },
    "Dashboard": {
      "Value": { "Fn::GetAtt": [ "Balancer", "DNSName" ] }
    },
    "DockerImageApi": {
      "Value": { "Fn::Join": [ ":", [ "convox/api", { "Ref": "Version" } ] ] }
    },
    "DynamoBuilds": {
      "Value": { "Ref": "DynamoBuilds" }
    },
    "DynamoReleases": {
      "Value": { "Ref": "DynamoReleases" }
    },
    "EncryptionKey": {
      "Value": { "Ref": "EncryptionKey" }
    },
    "Gateway": {
      "Condition": "BlankExistingVpc",
      "Value": { "Ref": "Gateway" }
    },
    "GatewayAttachment": {
      "Condition": "BlankExistingVpc",
      "Value": { "Ref": "GatewayAttachment" }
    },
    "IamRole": {
      "Value": { "Ref": "IamRole" }
    },
    "InstanceProfile": {
      "Value": { "Ref": "InstanceProfile" }
    },
    "Internal": {
      "Value": { "Ref": "Internal" }
    },
    "LogGroup": {
      "Value": { "Ref": "LogGroup" }
    },
    "NatGateways": {
      "Value": {
        "Fn::If": [
          "Private",
          { "Fn::Join": [
            ",",
            [
              { "Ref": "Nat0" },
              { "Ref": "Nat1" },
              { "Fn::If": [ "ThirdAvailabilityZone", { "Ref": "Nat2" }, { "Ref": "AWS::NoValue" } ] }
            ]
          ]},
          ""
        ]
      }
    },
    "NatIPs": {
      "Value": {
        "Fn::If": [
          "Private",
          { "Fn::Join": [
            ",",
            [
              { "Ref": "NatAddress0" },
              { "Ref": "NatAddress1" },
              { "Fn::If": [ "ThirdAvailabilityZone", { "Ref": "NatAddress2" }, { "Ref": "AWS::NoValue" } ] }
            ]
          ]},
          ""
        ]
      }
    },
    "NotificationHost": {
      "Value": { "Fn::GetAtt": [ "Balancer", "DNSName" ] }
    },
    "NotificationTopic": {
      "Value" : { "Ref": "NotificationTopic" }
    },
    "Password": {
      "Condition": "Development",
      "Value": { "Ref": "Password" }
    },
    "Private": {
      "Value": { "Ref": "Private" }
    },
    "Provider": {
      "Condition": "Development",
      "Value": "aws"
    },
    "Rack": {
      "Value": { "Ref": "AWS::StackName" }
    },
    "Release": {
      "Value": { "Ref": "Version" }
    },
    "RouteTablePublic": {
      "Condition": "NotExistingVpcAndBlankInternetGateway",
      "Value": { "Ref": "Routes" }
    },
    "RouteTablesPrivate": {
      "Value": { "Fn::If": [ "Private",
        { "Fn::Join": [ ",", [ { "Ref": "RouteTablePrivate0" }, { "Ref": "RouteTablePrivate1" }, { "Fn::If": [ "ThirdAvailabilityZone", { "Ref": "RouteTablePrivate2" }, { "Ref": "AWS::NoValue" } ] } ] ] },
        ""
      ] }
    },
    "SecurityGroup": {
      "Value": { "Fn::GetAtt": [ "SecurityGroup", "GroupId" ] }
    },
    "SettingsBucket": {
      "Value": { "Ref": "Settings" }
    },
    "Subnets": {
      "Value": {
        "Fn::Join": [
          ",",
          [
            { "Ref": "Subnet0" },
            { "Ref": "Subnet1" },
            { "Fn::If": [ "ThirdAvailabilityZone", { "Ref": "Subnet2" }, { "Ref": "AWS::NoValue" } ] }
          ]
        ]
      }
    },
    "SubnetsPrivate": {
      "Value": { "Fn::If":
        [ "Private",
          { "Fn::Join": [ ",",
            [
              { "Ref": "SubnetPrivate0" },
              { "Ref": "SubnetPrivate1" },
              { "Fn::If": [ "ThirdAvailabilityZone", { "Ref": "SubnetPrivate2" }, { "Ref": "AWS::NoValue" } ] }
            ]
          ]},
          ""
        ]
      }
    },
    "StackId": {
      "Value": { "Ref": "AWS::StackId" }
    },
    "Vpc": {
      "Value": { "Fn::If": [ "BlankExistingVpc",
        { "Ref": "Vpc" },
        { "Ref": "ExistingVpc" }
      ] }
    },
    "Vpccidr": {
      "Condition": "Development",
      "Value": { "Ref": "VPCCIDR" }
    }
  },
  "Parameters": {
    "Agent": {
      "Type": "String",
      "Description": "Run Convox agent on each instance",
      "Default": "Yes",
      "AllowedValues": [ "Yes", "No" ]
    },
    "Ami": {
      "Type": "String",
      "Description": "Amazon Machine Image: http://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_container_instance.html",
      "Default": ""
    },
    "ApiCpu": {
      "Type": "String",
      "Description": "How much cpu should be reserved by the api web process",
      "Default": "128"
    },
    "ApiMemory": {
      "Type": "String",
      "Description": "How much memory should be reserved by the api web process",
      "Default": "128"
    },
    "Autoscale": {
      "Type": "String",
      "Description": "Autoscale rack instances",
      "Default": "Yes",
      "AllowedValues": [ "Yes", "No" ]
    },
    "BuildCpu": {
      "Type": "String",
      "Description": "How much cpu should be reserved by the builder",
      "Default": "0"
    },
    "BuildImage": {
      "Type": "String",
      "Description": "Override the default builder image",
      "Default": ""
    },
    "BuildInstance": {
      "Type": "String",
      "Description": "Instance type for a dedicated build cluster",
      "Default": ""
    },
    "BuildMemory": {
      "Type": "String",
      "Description": "How much memory should be reserved by the builder",
      "Default": "1024"
    },
    "ClientId": {
      "Type": "String",
      "Description": "Anonymous identifier",
      "Default": "dev@convox.com"
    },
    "ContainerDisk": {
      "Type": "Number",
      "Description": "Default container disk size in GB",
      "Default": "10"
    },
    "Development": {
      "Type": "String",
      "Description": "Development mode",
      "Default": "No",
      "AllowedValues": [ "Yes", "No" ]
    },
    "EncryptEbs": {
      "Type": "String",
      "Description": "Enable encryption at rest for EBS volumes",
      "Default": "No",
      "AllowedValues": [ "Yes", "No" ]
    },
    "Encryption": {
      "Type": "String",
      "Description": "Encrypt secrets with KMS",
      "Default": "Yes",
      "AllowedValues": [ "Yes", "No" ]
    },
    "ExistingVpc": {
      "Description": "Existing VPC ID (if blank a VPC will be created)",
      "Type": "String",
      "Default": ""
    },
    "HttpProxy": {
      "Description": "Connect using an outbound HTTP proxy (for network-restricted Racks)",
      "Type": "String",
      "Default": ""
    },
    "Internal": {
      "Type": "String",
      "Description": "Create applications that are only accessible inside the VPC",
      "Default": "No",
      "AllowedValues": [ "Yes", "No" ]
    },
    "InstanceBootCommand": {
      "Type": "String",
      "Description": "A single line of shell script to run as CloudInit command early during instance boot.",
      "Default": ""
    },
    "InstanceRunCommand": {
      "Type": "String",
      "Description": "A single line of shell script to run as CloudInit command late during instance boot.",
      "Default": ""
    },
    "InstanceCount": {
      "Default": "3",
      "Description": "The number of instances in the runtime cluster",
      "MinValue": "3",
      "Type": "Number"
    },
    "InstanceType": {
      "Default": "t2.small",
      "Description": "The type of the instances in the runtime cluster",
      "Type": "String"
    },
    "InstanceUpdateBatchSize": {
      "Default": "1",
      "Description": "The number of instances to update in a batch",
      "MinValue": "1",
      "Type": "Number"
    },
    "InternetGateway": {
      "Description": "The InternetGatway to route to if an Existing VPC is specified",
      "Type": "String",
      "Default": ""
    },
    "Key": {
      "Default": "",
      "Description": "SSH key name for access to cluster instances",
      "Type": "String"
    },
    "Password": {
      "Description": "(REQUIRED) API HTTP password",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "50",
      "NoEcho": true
    },
    "Private": {
      "Type": "String",
      "Description": "Create non publicly routable resources",
      "Default": "No",
      "AllowedValues": [ "Yes", "No" ]
    },
    "PrivateApi": {
      "Type": "String",
      "Description": "Put Rack API Load Balancer in private network",
      "Default": "No",
      "AllowedValues": [ "Yes", "No" ]
    },
    "Subnet0CIDR": {
      "Default": "10.0.1.0/24",
      "Description": "Public Subnet 0 CIDR Block",
      "Type": "String"
    },
    "Subnet1CIDR": {
      "Default": "10.0.2.0/24",
      "Description": "Public Subnet 1 CIDR Block",
      "Type": "String"
    },
    "Subnet2CIDR": {
      "Default": "10.0.3.0/24",
      "Description": "Public Subnet 2 CIDR Block",
      "Type": "String"
    },
    "SubnetPrivate0CIDR": {
      "Default": "10.0.4.0/24",
      "Description": "Private Subnet 0 CIDR Block",
      "Type": "String"
    },
    "SubnetPrivate1CIDR": {
      "Default": "10.0.5.0/24",
      "Description": "Private Subnet 1 CIDR Block",
      "Type": "String"
    },
    "SubnetPrivate2CIDR": {
      "Default": "10.0.6.0/24",
      "Description": "Private Subnet 2 CIDR Block",
      "Type": "String"
    },
    "SwapSize": {
      "Type": "Number",
      "Description": "Default swap volume size in GB",
      "Default": "5"
    },
    "Version": {
      "Description": "(REQUIRED) Convox release version",
      "MinLength" : "1",
      "Type": "String"
    },
    "VolumeSize": {
      "Type": "Number",
      "Description": "Default disk size in GB",
      "Default": "50"
    },
    "VPCCIDR": {
      "Default": "10.0.0.0/16",
      "Description": "VPC CIDR Block",
      "Type": "String"
    },
    "Tenancy": {
      "Type": "String",
      "Description": "Dedicated Hardware",
      "Default": "default",
      "AllowedValues": [ "default", "dedicated" ]
    }
  },
  "Resources": {
    "EncryptionKey": {
      "DependsOn": "CustomTopic",
      "Type": "Custom::KMSKey",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
        "Description": "Convox Master Encryption",
        "KeyUsage": "ENCRYPT_DECRYPT"
      }
    },
    "EncryptionKeyAlias": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": { "Fn::Join": ["", ["alias/convox-", {"Ref":"AWS::StackName"} ]] },
        "TargetKeyId": { "Ref": "EncryptionKey" }
      }
    },
    "LogGroup": {
      "Type": "AWS::Logs::LogGroup"
    },
    "LogSubscriptionFilter": {
      "DependsOn": [ "LogSubscriptionFilterPermission" ],
      "Type" : "AWS::Logs::SubscriptionFilter",
      "Properties" : {
        "DestinationArn" : { "Fn::GetAtt": [ "LogSubscriptionFilterFunction", "Arn" ] },
        "FilterPattern" : "",
        "LogGroupName" : { "Ref": "LogGroup" }
      }
    },
    "LogSubscriptionFilterFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile":  { "Fn::Join": ["\n", [
            "var AWS = require('aws-sdk');",
            "var zlib = require('zlib');",
            "exports.handler = function(input, context) {",
            "  var fn = process.env.AWS_LAMBDA_FUNCTION_NAME;",
            "  var stack = fn.split('-').slice(0,-2).join('-');",
            "  var cloudwatch = new AWS.CloudWatch();",
            "  var payload = new Buffer(input.awslogs.data, 'base64');",
            "  var dr = /(dim#)([^=]+)=(\\\")?([^ ]+)(\\\")?/g;",
            "  var mr = /(count#|measure#|sample#)([\\w.]+)=(\\\")?([\\d.]+)([\\w/%\\/]+)?(\\\")?/g;",
            "  var units = {'sec':'Seconds','s':'Seconds','us':'Microseconds','ms':'Milliseconds',",
            "    'B':'Bytes','kB':'Kilobytes','mB':'Megabytes','gB':'Gigabytes','tB':'Terabytes',",
            "    'b':'Bits','kb':'Kilobits','mb':'Megabits','gb':'Gigabits','tb':'Terabits',",
            "    'B/s':'Bytes/Second','kB/s':'Kilobytes/Second','mB/s':'Megabytes/Second','gB/s':'Gigabytes/Second','tB/s':'Terabytes/Second',",
            "    'b/s':'Bits/Second','kb/s':'Kilobits/Second','mb/s':'Megabits/Second','gb/s':'Gigabits/Second','tb/s':'Terabits/Second',",
            "    '%':'Percent','count':'Count','count/s':'Count/Second'};",
            "  zlib.gunzip(payload, function(e, r) {",
            "    if (e) {",
            "      context.fail(e);",
            "    } else {",
            "      data = [];",
            "      r = JSON.parse(r.toString('ascii'));",
            "      r.logEvents.forEach(function(e) {",
            "        dims = [];",
            "        e.message.replace(dr, function(match, p1, p2, p3, p4, p5, offset, string) {",
            "          dims.push({Name: p2, Value: p4});",
            "        });",
            "        e.message.replace(mr, function(match, p1, p2, p3, p4, p5, p6, offset, string) {",
            "          datum = {MetricName: p2, Dimensions: dims, Value: parseFloat(p4), Unit: units[p5] || 'None'};",
            "          if (p1 == 'count#')",
            "            datum.Unit = 'Count';",
            "          data.push(datum);",
            "        });",
            "      });",
            "      console.log('D:',data);",
            "      var cb = function(err, d) { if (err) { console.log(err, err.stack); context.fail(err) } else console.log(d) };",
            "      for (var i=0; i<data.length; i+=20) {",
            "        cloudwatch.putMetricData({MetricData: data.slice(i, i+20), Namespace: stack}, cb);",
            "      }",
            "      context.succeed();",
            "    }",
            "  });",
            "};"
          ]]}
        },
        "Description": "Function to support Convox logs filtering",
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": { "Fn::GetAtt": [ "LogSubscriptionFilterRole", "Arn" ] },
        "Runtime": "nodejs4.3",
        "Timeout": "30"
      }
    },
    "LogSubscriptionFilterPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties" : {
        "Action" : "lambda:InvokeFunction",
        "FunctionName" : { "Ref": "LogSubscriptionFilterFunction" },
        "Principal" : { "Fn::Join": [".", ["logs", { "Ref": "AWS::Region" }, "amazonaws.com"]] },
        "SourceAccount" : { "Ref": "AWS::AccountId" },
        "SourceArn" : { "Fn::GetAtt": [ "LogGroup", "Arn" ] }
      }
    },
    "LogSubscriptionFilterRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": [ "lambda.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/convox/",
        "Policies": [
          {
            "PolicyName": "LogSubscriptionFilterRole",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:PutMetricData"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "CustomTopicRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": [ "lambda.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/convox/",
        "Policies": [
          {
            "PolicyName": "Administrator",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                { "Effect": "Allow", "Action": "*", "Resource": "*" },
                { "Effect": "Deny", "Action": "s3:DeleteObject", "Resource": "*" }
              ]
            }
          }
        ]
      }
    },
    "NotificationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName" : { "Fn::Join": ["", [{"Ref":"AWS::StackName"}, "-notifications"]] }
      }
    },
    "CustomTopic": {
      "DependsOn": ["CustomTopicRole"],
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": { "Fn::Join": [ "-", [ "convox", { "Ref": "AWS::Region" } ] ] },
          "S3Key": { "Fn::Join": [ "", [ "release/", { "Ref": "Version" }, "/lambda/formation.zip" ] ] }
        },
        "Description": "Convox handler for custom resources",
        "Handler": "index.external",
        "MemorySize": "128",
        "Role": { "Fn::GetAtt": [ "CustomTopicRole", "Arn" ] },
        "Runtime": "nodejs4.3",
        "Timeout": "300"
      }
    },
    "AvailabilityZones": {
      "DependsOn": [ "CustomTopic" ],
      "Type": "Custom::EC2AvailabilityZones",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
        "Vpc": { "Fn::If": [ "BlankExistingVpc",
          { "Ref": "Vpc" },
          { "Ref": "ExistingVpc" }
        ] }
      }
    },
    "KernelUser": {
      "DependsOn": [ "KernelUserPolicy", "KernelUserIAMPolicy", "KernelUserGeneralPolicy" ],
      "Type": "AWS::IAM::User",
      "Properties": {
        "Path": "/convox/",
        "ManagedPolicyArns": [
          { "Ref": "KernelUserPolicy" },
          { "Ref": "KernelUserIAMPolicy" },
          { "Ref": "KernelUserGeneralPolicy" }
        ]
      }
    },
    "KernelUserGeneralPolicy": {
      "Type" : "AWS::IAM::ManagedPolicy",
      "Properties" : {
        "Path": "/convox/",
        "Description" : "Limited general policy used by the KernelUser",
        "PolicyDocument" : {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Sid": "LimitedGeneralPermissions",
                    "Effect": "Allow",
                    "Action": [
                      "acm:DeleteCertificate",
                      "acm:DescribeCertificate",
                      "acm:ListCertificates",
                      "acm:RequestCertificate",
                      "autoscaling:CreateAutoScalingGroup",
                      "autoscaling:CreateLaunchConfiguration",
                      "autoscaling:DeleteAutoScalingGroup",
                      "autoscaling:DeleteLaunchConfiguration",
                      "autoscaling:DeleteLifecycleHook",
                      "autoscaling:DescribeAutoScalingGroups",
                      "autoscaling:DescribeAutoScalingInstances",
                      "autoscaling:DescribeLaunchConfigurations",
                      "autoscaling:DescribeScalingActivities",
                      "autoscaling:DescribeScheduledActions",
                      "autoscaling:DisableMetricsCollection",
                      "autoscaling:EnableMetricsCollection",
                      "autoscaling:PutLifecycleHook",
                      "autoscaling:ResumeProcesses",
                      "autoscaling:SetDesiredCapacity",
                      "autoscaling:SetInstanceHealth",
                      "autoscaling:SuspendProcesses",
                      "autoscaling:TerminateInstanceInAutoScalingGroup",
                      "autoscaling:UpdateAutoScalingGroup",
                      "cloudformation:DescribeStacks",
                      "cloudwatch:GetMetricStatistics",
                      "ec2:AllocateAddress",
                      "ec2:AssociateRouteTable",
                      "ec2:AuthorizeSecurityGroupIngress",
                      "ec2:CreateKeyPair",
                      "ec2:CreateNatGateway",
                      "ec2:CreateNetworkInterface",
                      "ec2:CreateRoute",
                      "ec2:CreateRouteTable",
                      "ec2:CreateSecurityGroup",
                      "ec2:CreateSubnet",
                      "ec2:CreateTags",
                      "ec2:CreateVpc",
                      "ec2:DeleteNatGateway",
                      "ec2:DeleteNetworkInterface",
                      "ec2:DeleteRoute",
                      "ec2:DeleteRouteTable",
                      "ec2:DeleteSecurityGroup",
                      "ec2:DeleteSubnet",
                      "ec2:DeleteTags",
                      "ec2:DeleteVpc",
                      "ec2:DescribeAccountAttributes",
                      "ec2:DescribeAddresses",
                      "ec2:DescribeInstances",
                      "ec2:DescribeNatGateways",
                      "ec2:DescribeRouteTables",
                      "ec2:DescribeSecurityGroups",
                      "ec2:DescribeSubnets",
                      "ec2:DescribeVpcs",
                      "ec2:DisassociateAddress",
                      "ec2:DisassociateRouteTable",
                      "ec2:ModifyVpcAttribute",
                      "ec2:ReleaseAddress",
                      "ec2:RevokeSecurityGroupIngress",
                      "ecs:CreateCluster",
                      "ecs:CreateService",
                      "ecs:DeleteService",
                      "ecs:DescribeContainerInstances",
                      "ecs:DescribeServices",
                      "ecs:DescribeTaskDefinition",
                      "ecs:DescribeTasks",
                      "ecs:ListContainerInstances",
                      "ecs:ListServices",
                      "ecs:ListTaskDefinitions",
                      "ecs:ListTasks",
                      "ecs:RegisterTaskDefinition",
                      "ecs:RunTask",
                      "ecs:StopTask",
                      "ecs:UpdateService",
                      "elasticache:CreateCacheCluster",
                      "elasticache:CreateCacheSubnetGroup",
                      "elasticache:CreateReplicationGroup",
                      "elasticache:DeleteCacheCluster",
                      "elasticache:DeleteCacheSubnetGroup",
                      "elasticache:DeleteReplicationGroup",
                      "elasticache:DescribeCacheClusters",
                      "elasticache:DescribeCacheSubnetGroups",
                      "elasticache:DescribeReplicationGroups",
                      "elasticache:ModifyCacheCluster",
                      "elasticache:ModifyReplicationGroup",
                      "elasticfilesystem:CreateFileSystem",
                      "elasticfilesystem:CreateMountTarget",
                      "elasticfilesystem:CreateTags",
                      "elasticfilesystem:DeleteMountTarget",
                      "elasticfilesystem:DescribeFileSystems",
                      "elasticfilesystem:DescribeMountTargets",
                      "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
                      "elasticloadbalancing:AttachLoadBalancerToSubnets",
                      "elasticloadbalancing:ConfigureHealthCheck",
                      "elasticloadbalancing:CreateLoadBalancer",
                      "elasticloadbalancing:CreateLoadBalancerListeners",
                      "elasticloadbalancing:CreateLoadBalancerPolicy",
                      "elasticloadbalancing:DeleteLoadBalancer",
                      "elasticloadbalancing:DeleteLoadBalancerListeners",
                      "elasticloadbalancing:DeleteLoadBalancerPolicy",
                      "elasticloadbalancing:DescribeLoadBalancers",
                      "elasticloadbalancing:ModifyLoadBalancerAttributes",
                      "elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer",
                      "elasticloadbalancing:SetLoadBalancerPoliciesOfListener",
                      "events:DescribeRule",
                      "iam:DeleteServerCertificate",
                      "iam:GetPolicy",
                      "iam:GetServerCertificate",
                      "iam:ListServerCertificates",
                      "iam:PassRole",
                      "iam:UploadServerCertificate",
                      "kms:CreateAlias",
                      "kms:Decrypt",
                      "kms:DeleteAlias",
                      "kms:GenerateDataKey",
                      "kms:GenerateRandom",
                      "kms:CreateAlias",
                      "kms:ListAliases",
                      "lambda:CreateFunction",
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:DeleteLogGroup",
                      "logs:DeleteSubscriptionFilter",
                      "logs:DescribeLogGroups",
                      "logs:FilterLogEvents",
                      "logs:PutLogEvents",
                      "logs:PutSubscriptionFilter",
                      "rds:CreateDBInstance",
                      "rds:CreateDBParameterGroup",
                      "rds:CreateDBSubnetGroup",
                      "rds:DescribeDBInstances",
                      "rds:DescribeDBParameters",
                      "rds:DescribeDBSubnetGroups",
                      "s3:CreateBucket",
                      "s3:GetObject",
                      "sns:ConfirmSubscription",
                      "sns:CreateTopic",
                      "sns:DeleteTopic",
                      "sns:GetTopicAttributes",
                      "sns:ListTopics",
                      "sns:ListSubscriptionsByTopic",
                      "sns:Publish",
                      "sns:SetTopicAttributes",
                      "sns:Subscribe",
                      "sns:Unsubscribe",
                      "sqs:CreateQueue",
                      "sqs:DeleteMessage",
                      "sqs:DeleteQueue",
                      "sqs:GetQueueAttributes",
                      "sqs:ReceiveMessage",
                      "sqs:SetQueueAttributes"
                    ],
                    "Resource": "*"
                }
            ]
        }
      }
    },
    "KernelUserPolicy": {
      "Type" : "AWS::IAM::ManagedPolicy",
      "Properties" : {
        "Path": "/convox/",
        "Description" : "Policy used by the KernelUser",
        "PolicyDocument" : {
            "Version": "2012-10-17",
            "Statement": [
                {
                  "Action": "ecs:DeleteCluster",
                  "Resource": [
                    { "Fn::Join": [ "", [ "arn:aws:ecs:*:*:cluster/", { "Ref": "AWS::StackName" }, "*" ] ] }
                  ],
                  "Effect": "Allow",
                  "Sid": "LimitedECSAccess"
                },
                {
                  "Sid": "LimitedDynamoDBAccess",
                  "Action": "dynamodb:*",
                  "Effect": "Allow",
                  "Resource": [
                      { "Fn::Join": [ "", [ "arn:aws:dynamodb:*:*:table/", { "Ref": "AWS::StackName" }, "-*" ] ] },
                      { "Fn::Join": [ "", [ "arn:aws:dynamodb:*:*:table/", { "Ref": "AWS::StackName" }, "-*/index/*" ] ] }
                  ]
                }, {
                  "Sid": "LimitedRDSAccess",
                  "Action": "rds:*",
                  "Effect": "Allow",
                  "Resource": [
                      { "Fn::Join": [ "", [ "arn:aws:rds:*:*:db:", { "Ref": "AWS::StackName" }, "-*"] ] },
                      { "Fn::Join": [ "", [ "arn:aws:rds:*:*:pg:", { "Ref": "AWS::StackName" }, "-*"] ] },
                      { "Fn::Join": [ "", [ "arn:aws:rds:*:*:subgrp:", { "Ref": "AWS::StackName" }, "-*"] ] }
                  ]
                }, {
                  "Sid": "LimitedLambdaAccess",
                  "Action": "lambda:*",
                  "Effect": "Allow",
                  "Resource": [
                      { "Fn::Join": [ "", [ "arn:aws:lambda:*:*:function:", { "Ref": "AWS::StackName" }, "-*"] ] }
                  ]
                }, {
                  "Sid": "LimitedCloudFlormationAccess",
                  "Action": "cloudformation:*",
                  "Effect": "Allow",
                  "Resource": [
                      { "Fn::Join": [ "", [ "arn:aws:cloudformation:*:*:stack/", { "Ref": "AWS::StackName" }, "*"] ] }
                  ]
                }, {
                  "Sid": "LimitedECRAccess",
                  "Action": "ecr:*",
                  "Effect": "Allow",
                  "Resource": [
                      { "Fn::Join": [ "", [ "arn:aws:ecr:*:*:repository/", { "Ref": "AWS::StackName" }, "*"] ] }
                  ]
                }, {
                  "Sid": "ReadOnlyECRAccess",
                  "Action": [
                    "ecr:GetAuthorizationToken",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:GetRepositoryPolicy",
                    "ecr:DescribeRepositories",
                    "ecr:ListImages",
                    "ecr:DescribeImages",
                    "ecr:BatchGetImage"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                }, {
                  "Sid": "LimitedCloudWatchEventAccess",
                  "Action": "events:*",
                  "Effect": "Allow",
                  "Resource": [
                      { "Fn::Join": [ "", [ "arn:aws:events:*:*:rule/", { "Ref": "AWS::StackName" }, "*"] ] }
                  ]
                }, {
                  "Sid": "LimitedS3Access",
                  "Action": "s3:*",
                  "Effect": "Allow",
                  "Resource": [
                      { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "AWS::StackName" }, "-*"] ] },
                      { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "AWS::StackName" }, "-*/*"] ] }
                  ]
                }
            ]
        }
      }
    },
    "KernelUserIAMPolicy": {
      "Type" : "AWS::IAM::ManagedPolicy",
      "Properties" : {
        "Path": "/convox/",
        "Description" : "Limited IAM policy used by the KernelUser",
        "PolicyDocument" : {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Sid": "LimitedIAMPermissions",
                    "Effect": "Allow",
                    "Action": [
                      "iam:AddRoleToInstanceProfile",
                      "iam:AttachUserPolicy",
                      "iam:CreateAccessKey",
                      "iam:CreateInstanceProfile",
                      "iam:CreatePolicy",
                      "iam:CreatePolicyVersion",
                      "iam:CreateRole",
                      "iam:CreateUser",
                      "iam:DeleteAccessKey",
                      "iam:DeleteInstanceProfile",
                      "iam:DeletePolicy",
                      "iam:DeletePolicyVersion",
                      "iam:DeleteRole",
                      "iam:DeleteRolePolicy",
                      "iam:DeleteUser",
                      "iam:DeleteUserPolicy",
                      "iam:DetachUserPolicy",
                      "iam:GetRole",
                      "iam:ListAccessKeys",
                      "iam:ListPolicyVersions",
                      "iam:PutRolePolicy",
                      "iam:PutUserPolicy",
                      "iam:RemoveRoleFromInstanceProfile"
                    ],
                    "Resource": [
                      "arn:aws:iam::*:instance-profile/convox/*",
                      "arn:aws:iam::*:policy/convox/*",
                      "arn:aws:iam::*:role/convox/*",
                      "arn:aws:iam::*:user/convox/*"
                    ]
                }
            ]
        }
      }
    },
    "KernelAccess": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "Serial": "1",
        "Status": "Active",
        "UserName": { "Ref": "KernelUser" }
      }
    },
    "Cluster": {
      "Type": "AWS::ECS::Cluster"
    },
    "Vpc": {
      "Type": "AWS::EC2::VPC",
      "Condition": "BlankExistingVpc",
      "Properties": {
        "CidrBlock": { "Ref": "VPCCIDR" },
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "InstanceTenancy": { "Ref": "Tenancy" },
        "Tags": [
          { "Key": "Name", "Value": { "Ref": "AWS::StackName" } }
        ]
      }
    },
    "Gateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Condition": "BlankExistingVpc",
      "Properties": {
        "Tags": [
          { "Key": "Name", "Value": { "Ref": "AWS::StackName" } }
        ]
      }
    },
    "GatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Condition": "BlankExistingVpc",
      "Properties": {
        "InternetGatewayId": { "Ref": "Gateway" },
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "ExistingGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Condition": "ExistingVpcAndInternetGateway",
      "DeletionPolicy": "Retain",
      "Properties": {
        "InternetGatewayId": { "Ref": "InternetGateway" },
        "VpcId": { "Ref": "ExistingVpc" }
      }
    },
    "Nat0": {
      "Condition": "Private",
      "DependsOn": ["KernelAccess", "KernelUser"],
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": { "Fn::GetAtt": [ "NatAddress0", "AllocationId" ] },
        "SubnetId": { "Ref": "Subnet0" }
      }
    },
    "Nat1": {
      "Condition": "Private",
      "DependsOn": ["KernelAccess", "KernelUser"],
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": { "Fn::GetAtt": [ "NatAddress1", "AllocationId" ] },
        "SubnetId": { "Ref": "Subnet1" }
      }
    },
    "Nat2": {
      "Condition": "PrivateAndThirdAvailabilityZone",
      "DependsOn": ["KernelAccess", "KernelUser"],
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": { "Fn::GetAtt": [ "NatAddress2", "AllocationId" ] },
        "SubnetId": { "Ref": "Subnet2" }
      }
    },
    "NatAddress0": {
      "Condition": "Private",
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "NatAddress1": {
      "Condition": "Private",
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "NatAddress2": {
      "Condition": "Private",
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "SecureEnvironmentRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/convox/",
        "Policies": [
          {
            "PolicyName": "SecureEnvironmentPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": {
                "Effect": "Allow",
                "Action": [
                  "kms:Decrypt"
                ],
                "Resource": [
                  { "Ref": "EncryptionKey" }
                ]
              }
            }
          }
        ]
      }
    },
    "Subnet0": {
      "DependsOn": [ "AvailabilityZones" ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Join": [ " ", [ { "Ref": "AWS::StackName" }, "public", "0" ] ] } }
        ],
        "AvailabilityZone": { "Fn::GetAtt": [ "AvailabilityZones", "AvailabilityZone0" ] },
        "CidrBlock": { "Ref": "Subnet0CIDR" },
        "VpcId": { "Fn::If": [ "BlankExistingVpc",
          { "Ref": "Vpc" },
          { "Ref": "ExistingVpc" }
        ] }
      }
    },
    "Subnet1": {
      "DependsOn": [ "AvailabilityZones" ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Join": [ " ", [ { "Ref": "AWS::StackName" }, "public", "1" ] ] } }
        ],
        "AvailabilityZone": { "Fn::GetAtt": [ "AvailabilityZones", "AvailabilityZone1" ] },
        "CidrBlock": { "Ref": "Subnet1CIDR" },
        "VpcId": { "Fn::If": [ "BlankExistingVpc",
          { "Ref": "Vpc" },
          { "Ref": "ExistingVpc" }
        ] }
      }
    },
    "Subnet2": {
      "Condition": "ThirdAvailabilityZone",
      "DependsOn": [ "AvailabilityZones" ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Join": [ " ", [ { "Ref": "AWS::StackName" }, "public", "2" ] ] } }
        ],
        "AvailabilityZone": { "Fn::GetAtt": [ "AvailabilityZones", "AvailabilityZone2" ] },
        "CidrBlock": { "Ref": "Subnet2CIDR" },
        "VpcId": { "Fn::If": [ "BlankExistingVpc",
          { "Ref": "Vpc" },
          { "Ref": "ExistingVpc" }
        ] }
      }
    },
    "SubnetPrivate0": {
      "Condition": "Private",
      "DependsOn": [ "AvailabilityZones" ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Join": [ " ", [ { "Ref": "AWS::StackName" }, "private", "0" ] ] } }
        ],
        "AvailabilityZone": { "Fn::GetAtt": [ "AvailabilityZones", "AvailabilityZone0" ] },
        "CidrBlock": { "Ref": "SubnetPrivate0CIDR" },
        "VpcId": { "Fn::If": [ "BlankExistingVpc",
          { "Ref": "Vpc" },
          { "Ref": "ExistingVpc" }
        ] }
      }
    },
    "SubnetPrivate1": {
      "Condition": "Private",
      "DependsOn": [ "AvailabilityZones" ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Join": [ " ", [ { "Ref": "AWS::StackName" }, "private", "1" ] ] } }
        ],
        "AvailabilityZone": { "Fn::GetAtt": [ "AvailabilityZones", "AvailabilityZone1" ] },
        "CidrBlock": { "Ref": "SubnetPrivate1CIDR" },
        "VpcId": { "Fn::If": [ "BlankExistingVpc",
          { "Ref": "Vpc" },
          { "Ref": "ExistingVpc" }
        ] }
      }
    },
    "SubnetPrivate2": {
      "Condition": "PrivateAndThirdAvailabilityZone",
      "DependsOn": [ "AvailabilityZones" ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Join": [ " ", [ { "Ref": "AWS::StackName" }, "private", "2" ] ] } }
        ],
        "AvailabilityZone": { "Fn::GetAtt": [ "AvailabilityZones", "AvailabilityZone2" ] },
        "CidrBlock": { "Ref": "SubnetPrivate2CIDR" },
        "VpcId": { "Fn::If": [ "BlankExistingVpc",
          { "Ref": "Vpc" },
          { "Ref": "ExistingVpc" }
        ] }
      }
    },
    "Routes": {
      "Type": "AWS::EC2::RouteTable",
      "Condition": "NotExistingVpcAndBlankInternetGateway",
      "Properties": {
        "Tags": [
          { "Key": "Name", "Value": { "Ref": "AWS::StackName" } }
        ],
        "VpcId": { "Fn::If": [ "BlankExistingVpc",
          { "Ref": "Vpc" },
          { "Ref": "ExistingVpc" }
        ] }
      }
    },
    "RouteDefault": {
      "DependsOn": [ "Routes" ],
      "Type": "AWS::EC2::Route",
      "Condition": "NotExistingVpcAndBlankInternetGateway",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Fn::If": [ "ExistingVpcAndInternetGateway",
          { "Ref": "InternetGateway" },
          { "Ref": "Gateway" }
        ] },
        "RouteTableId": { "Ref": "Routes" }
      }
    },
    "RouteTablePrivate0": {
      "Condition": "Private",
      "DependsOn": [ "Nat0" ],
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "Tags": [
          { "Key": "Name", "Value": { "Ref": "AWS::StackName" } }
        ],
        "VpcId": { "Fn::If": [ "BlankExistingVpc",
          { "Ref": "Vpc" },
          { "Ref": "ExistingVpc" }
        ] }
      }
    },
    "RouteTablePrivate1": {
      "Condition": "Private",
      "DependsOn": [ "Nat1" ],
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "Tags": [
          { "Key": "Name", "Value": { "Ref": "AWS::StackName" } }
        ],
        "VpcId": { "Fn::If": [ "BlankExistingVpc",
          { "Ref": "Vpc" },
          { "Ref": "ExistingVpc" }
        ] }
      }
    },
    "RouteTablePrivate2": {
      "Condition": "PrivateAndThirdAvailabilityZone",
      "DependsOn": [ "Nat2" ],
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "Tags": [
          { "Key": "Name", "Value": { "Ref": "AWS::StackName" } }
        ],
        "VpcId": { "Fn::If": [ "BlankExistingVpc",
          { "Ref": "Vpc" },
          { "Ref": "ExistingVpc" }
        ] }
      }
    },
    "RouteDefaultPrivate0": {
      "Condition": "Private",
      "DependsOn": [ "Nat0", "RouteTablePrivate0" ],
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": { "Ref": "Nat0" },
        "RouteTableId": { "Ref": "RouteTablePrivate0" }
      }
    },
    "RouteDefaultPrivate1": {
      "Condition": "Private",
      "DependsOn": [ "Nat1", "RouteTablePrivate1" ],
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": { "Ref": "Nat1" },
        "RouteTableId": { "Ref": "RouteTablePrivate1" }
      }
    },
    "RouteDefaultPrivate2": {
      "Condition": "PrivateAndThirdAvailabilityZone",
      "DependsOn": [ "Nat2", "RouteTablePrivate2" ],
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": { "Ref": "Nat2" },
        "RouteTableId": { "Ref": "RouteTablePrivate2" }
      }
    },
    "Subnet0Routes": {
      "Condition": "NotExistingVpcAndBlankInternetGateway",
      "DependsOn": [ "Subnet0", "Routes" ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "Subnet0" },
        "RouteTableId": { "Ref": "Routes" }
      }
    },
    "Subnet1Routes": {
      "Condition": "NotExistingVpcAndBlankInternetGateway",
      "DependsOn": [ "Subnet1", "Routes" ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "Subnet1" },
        "RouteTableId": { "Ref": "Routes" }
      }
    },
    "Subnet2Routes": {
      "Condition": "ThirdAvailabilityZoneAndNotExistingVpcAndBlankInternetGateway",
      "DependsOn": [ "Subnet2", "Routes" ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "Subnet2" },
        "RouteTableId": { "Ref": "Routes" }
      }
    },
    "SubnetPrivate0Routes": {
      "Condition": "Private",
      "DependsOn": [ "SubnetPrivate0", "RouteTablePrivate0" ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "SubnetPrivate0" },
        "RouteTableId": { "Ref": "RouteTablePrivate0" }
      }
    },
    "SubnetPrivate1Routes": {
      "Condition": "Private",
      "DependsOn": [ "SubnetPrivate1", "RouteTablePrivate1" ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "SubnetPrivate1" },
        "RouteTableId": { "Ref": "RouteTablePrivate1" }
      }
    },
    "SubnetPrivate2Routes": {
      "Condition": "PrivateAndThirdAvailabilityZone",
      "DependsOn": [ "SubnetPrivate2", "RouteTablePrivate2" ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "SubnetPrivate2" },
        "RouteTableId": { "Ref": "RouteTablePrivate2" }
      }
    },
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Instances",
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": "0", "ToPort": "65535", "CidrIp": { "Ref": "VPCCIDR" } },
          { "IpProtocol": "udp", "FromPort": "0", "ToPort": "65535", "CidrIp": { "Ref": "VPCCIDR" } }
        ],
        "Tags": [
          { "Key": "Name", "Value": { "Ref": "AWS::StackName" } }
        ],
        "VpcId": { "Fn::If": [ "BlankExistingVpc",
          { "Ref": "Vpc" },
          { "Ref": "ExistingVpc" }
        ] }
      }
    },
    "IamRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": [ "ec2.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/convox/",
        "Policies": [
          {
            "PolicyName": "ClusterInstanceRole",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "autoscaling:CompleteLifecycleAction",
                    "autoscaling:DescribeAutoScalingInstances",
                    "autoscaling:DescribeLifecycleHooks",
                    "autoscaling:SetInstanceHealth",
                    "ecr:GetAuthorizationToken",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:BatchGetImage",
                    "ecr:BatchCheckLayerAvailability",
                    "ec2:DescribeInstances",
                    "ecs:CreateCluster",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Poll",
                    "ecs:RegisterContainerInstance",
                    "ecs:StartTelemetrySession",
                    "ecs:Submit*",
                    "kinesis:PutRecord",
                    "kinesis:PutRecords",
                    "logs:CreateLogStream",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "InstanceProfile": {
      "DependsOn": "IamRole",
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/convox/",
        "Roles": [ { "Ref": "IamRole" } ]
      }
    },
    "BuildCluster": {
      "Condition": "DedicatedBuilder",
      "Type": "AWS::ECS::Cluster"
    },
    "BuildLaunchConfiguration": {
      "DependsOn": [ "Balancer", "Cluster", "InstanceProfile", "SecurityGroup", "LogGroup" ],
      "Condition": "DedicatedBuilder",
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": { "Fn::If": [ "Private", false, true ] },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdb",
            "Ebs": {
              "Encrypted": { "Fn::If": [ "EncryptEbs", "true", { "Ref": "AWS::NoValue" } ] },
              "VolumeSize": { "Ref": "SwapSize" },
              "VolumeType":"gp2"
            }
          },
          {
            "DeviceName": "/dev/xvdcz",
            "Ebs": {
              "Encrypted": { "Fn::If": [ "EncryptEbs", "true", { "Ref": "AWS::NoValue" } ] },
              "VolumeSize": { "Ref": "VolumeSize" },
              "VolumeType":"gp2"
            }
          }
        ],
        "IamInstanceProfile": { "Ref": "InstanceProfile" },
        "ImageId": { "Fn::If": [ "BlankAmi", { "Fn::FindInMap": [ "RegionConfig", { "Ref": "AWS::Region" }, "Ami" ] }, { "Ref": "Ami" } ] },
        "InstanceMonitoring": true,
        "InstanceType": { "Ref": "BuildInstance" },
        "KeyName": { "Fn::If": [ "BlankKey", { "Ref": "AWS::NoValue" }, { "Ref": "Key" } ] },
        "PlacementTenancy" : { "Ref": "Tenancy" },
        "SecurityGroups": [ { "Ref": "SecurityGroup" } ],
        "UserData": { "Fn::Base64":
          { "Fn::Join": [ "", [
            "#cloud-config\n",
            "repo_upgrade_exclude:\n",
            "  - kernel*\n",
            "packages:\n",
            "  - aws-cfn-bootstrap\n",
            "mounts:\n",
            "  - ['/dev/xvdb', 'none', 'swap', 'sw', '0', '0']\n",
            "bootcmd:\n",
            "  - mkswap /dev/xvdb\n",
            "  - swapon /dev/xvdb\n",
            "  - [ cloud-init-per, instance, docker_storage_setup, /usr/bin/docker-storage-setup ]\n",
            "  - export HTTP_PROXY=", { "Ref": "HttpProxy" }, "\n",
            "  - echo HTTP_PROXY=", { "Ref": "HttpProxy" }, " >> /etc/environment\n",
            "  - echo ECS_CLUSTER=", { "Ref": "BuildCluster" }, " >> /etc/ecs/ecs.config\n",
            "  - echo ECS_ENGINE_AUTH_TYPE=docker >> /etc/ecs/ecs.config\n",
            "  - echo HTTP_PROXY=", { "Ref": "HttpProxy" }, " >> /etc/ecs/ecs.config\n",
            "  - echo NO_PROXY=169.254.169.254,169.254.170.2,/var/run/docker.sock >> /etc/ecs/ecs.config\n",
            "  - head -n -1 /etc/sysconfig/docker >> /etc/sysconfig/docker-tmp\n",
            "  - mv /etc/sysconfig/docker-tmp /etc/sysconfig/docker\n",
            "  - echo 'OPTIONS=\"--default-ulimit nofile=1024000:1024000\"' >> /etc/sysconfig/docker\n",
            { "Fn::Join": [ "", [
              "  - echo 'OPTIONS=\"${OPTIONS} --storage-opt dm.basesize=", { "Ref": "ContainerDisk" }, "G\"' >> /etc/sysconfig/docker\n",
              "  - echo 'OPTIONS=\"${OPTIONS} --log-opt max-file=2 --log-opt max-size=50m --host=unix:///var/run/docker.sock --host=0.0.0.0:2376\"' >> /etc/sysconfig/docker\n",
              "  - echo 'ECS_ENGINE_AUTH_DATA={\"index.docker.io\":{\"username\":\"\",\"password\":\"\",\"email\":\"\"}' >> /etc/ecs/ecs.config\n"
            ] ] },
            { "Fn::If": [ "HttpProxy",
              { "Fn::Join": ["", ["  - echo \"export HTTP_PROXY=", { "Ref": "HttpProxy" }, "/\" >> /etc/sysconfig/docker\n"
              ] ] },
              { "Ref": "AWS::NoValue" }
            ] },
            "  - mkdir -p /etc/convox\n",
            "  - echo -e '/var/log/docker {\\n  rotate 7\\n  daily\\n  nocompress\\n  copytruncate\\n}' >> /etc/logrotate.d/docker\n",
            { "Fn::If": [ "BlankInstanceBootCommand",
              { "Ref": "AWS::NoValue" },
              { "Fn::Join": [ "", [
              "  - ", { "Ref": "InstanceBootCommand" }, "\n"
              ] ] }
            ] },
            "runcmd:\n",
            { "Fn::If": [ "BlankInstanceRunCommand",
              { "Ref": "AWS::NoValue" },
              { "Fn::Join": [ "", [
              "  - ", { "Ref": "InstanceRunCommand" }, "\n"
              ] ] }
            ] },
            "  - /opt/aws/bin/cfn-signal --stack ", { "Ref": "AWS::StackName" }, " --region ", { "Ref":"AWS::Region" }, " --resource BuildInstances\n"
          ] ] }
        }
      }
    },
    "BuildInstances": {
      "DependsOn": [ "AvailabilityZones", "Subnet0", "Subnet1" ],
      "Condition": "DedicatedBuilder",
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "LaunchConfigurationName" : { "Ref": "BuildLaunchConfiguration" },
        "AvailabilityZones": [
          { "Fn::GetAtt": [ "AvailabilityZones", "AvailabilityZone0" ] },
          { "Fn::GetAtt": [ "AvailabilityZones", "AvailabilityZone1" ] },
          { "Fn::If": [ "ThirdAvailabilityZone", { "Fn::GetAtt": [ "AvailabilityZones", "AvailabilityZone2" ] }, { "Ref": "AWS::NoValue" } ] }
        ],
        "VPCZoneIdentifier": {
          "Fn::If": [ "Private", [
            { "Ref": "SubnetPrivate0" },
            { "Ref": "SubnetPrivate1" },
            { "Fn::If": [ "ThirdAvailabilityZone", { "Ref": "SubnetPrivate2" }, { "Ref": "AWS::NoValue" } ] }
          ], [
            { "Ref": "Subnet0" },
            { "Ref": "Subnet1" },
            { "Fn::If": [ "ThirdAvailabilityZone", { "Ref": "Subnet2" }, { "Ref": "AWS::NoValue" } ] }
          ] ]
        },
        "Cooldown": 5,
        "DesiredCapacity": "1",
        "HealthCheckType": "EC2",
        "HealthCheckGracePeriod": "120",
        "MinSize" : "1",
        "MaxSize" : "2",
        "MetricsCollection": [ { "Granularity": "1Minute" } ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Ref": "AWS::StackName" },
            "PropagateAtLaunch": true
          },
          {
            "Key": "Rack",
            "Value": { "Ref": "AWS::StackName" },
            "PropagateAtLaunch": true
          },
          {
            "Key": "GatewayAttachment",
            "Value": { "Fn::If": [ "ExistingVpc", "existing", { "Ref": "GatewayAttachment" } ] },
            "PropagateAtLaunch": false
          }
        ]
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": { "Ref": "InstanceUpdateBatchSize" },
          "MinInstancesInService": "1",
          "PauseTime" : "PT15M",
          "SuspendProcesses": [
            "ScheduledActions"
          ],
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "LaunchConfiguration": {
      "DependsOn": [ "Balancer", "Cluster", "InstanceProfile", "SecurityGroup", "LogGroup" ],
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": { "Fn::If": [ "Private", false, true ] },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdb",
            "Ebs": {
              "Encrypted": { "Fn::If": [ "EncryptEbs", "true", { "Ref": "AWS::NoValue" } ] },
              "VolumeSize": { "Ref": "SwapSize" },
              "VolumeType":"gp2"
            }
          },
          {
            "DeviceName": "/dev/xvdcz",
            "Ebs": {
              "Encrypted": { "Fn::If": [ "EncryptEbs", "true", { "Ref": "AWS::NoValue" } ] },
              "VolumeSize": { "Ref": "VolumeSize" },
              "VolumeType":"gp2"
            }
          }
        ],
        "IamInstanceProfile": { "Ref": "InstanceProfile" },
        "ImageId": { "Fn::If": [ "BlankAmi", { "Fn::FindInMap": [ "RegionConfig", { "Ref": "AWS::Region" }, "Ami" ] }, { "Ref": "Ami" } ] },
        "InstanceMonitoring": true,
        "InstanceType": { "Ref": "InstanceType" },
        "KeyName": { "Fn::If": [ "BlankKey", { "Ref": "AWS::NoValue" }, { "Ref": "Key" } ] },
        "PlacementTenancy" : { "Ref": "Tenancy" },
        "SecurityGroups": [ { "Ref": "SecurityGroup" } ],
        "UserData": { "Fn::Base64":
          { "Fn::Join": [ "", [
            "#cloud-config\n",
            "repo_upgrade_exclude:\n",
            "  - kernel*\n",
            "packages:\n",
            "  - aws-cfn-bootstrap\n",
            "mounts:\n",
            "  - ['/dev/xvdb', 'none', 'swap', 'sw', '0', '0']\n",
            "bootcmd:\n",
            "  - mkswap /dev/xvdb\n",
            "  - swapon /dev/xvdb\n",
            "  - export HTTP_PROXY=", { "Ref": "HttpProxy" }, "\n",
            "  - echo HTTP_PROXY=", { "Ref": "HttpProxy" }, " >> /etc/environment\n",
            "  - until yum install -y aws-cli nfs-utils; do echo \"Waiting for network\"; done;\n",
            "  - mkdir /volumes\n",
            { "Fn::If": [ "RegionHasEFS",
              { "Fn::Join": [ "", [
                "  - while true; do mount -t nfs -o nfsvers=4.1 $(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone).",
                { "Ref": "VolumeFilesystem" },
                ".efs.",
                { "Ref": "AWS::Region" },
                ".amazonaws.com:/ /volumes && break; sleep 5; done\n"
              ] ] },
              ""
            ] },
            "  - [ cloud-init-per, instance, docker_storage_setup, /usr/bin/docker-storage-setup ]\n",
            "  - echo ECS_CLUSTER=", { "Ref": "Cluster" }, " >> /etc/ecs/ecs.config\n",
            "  - echo ECS_ENGINE_AUTH_TYPE=docker >> /etc/ecs/ecs.config\n",
            "  - echo HTTP_PROXY=", { "Ref": "HttpProxy" }, " >> /etc/ecs/ecs.config\n",
            "  - echo NO_PROXY=169.254.169.254,169.254.170.2,/var/run/docker.sock >> /etc/ecs/ecs.config\n",
            "  - head -n -1 /etc/sysconfig/docker >> /etc/sysconfig/docker-tmp\n",
            "  - mv /etc/sysconfig/docker-tmp /etc/sysconfig/docker\n",
            "  - echo 'OPTIONS=\"--default-ulimit nofile=1024000:1024000\"' >> /etc/sysconfig/docker\n",
            { "Fn::Join": [ "", [
              "  - echo 'OPTIONS=\"${OPTIONS} --storage-opt dm.basesize=", { "Ref": "ContainerDisk" }, "G\"' >> /etc/sysconfig/docker\n",
              "  - echo 'OPTIONS=\"${OPTIONS} --log-opt max-file=2 --log-opt max-size=50m --host=unix:///var/run/docker.sock --host=0.0.0.0:2376\"' >> /etc/sysconfig/docker\n",
              "  - echo 'ECS_ENGINE_AUTH_DATA={\"index.docker.io\":{\"username\":\"\",\"password\":\"\",\"email\":\"\"}' >> /etc/ecs/ecs.config\n"
            ] ] },
            { "Fn::If": [ "HttpProxy",
              { "Fn::Join": ["", ["  - echo \"export HTTP_PROXY=", { "Ref": "HttpProxy" }, "/\" >> /etc/sysconfig/docker\n"
              ] ] },
              { "Ref": "AWS::NoValue" }
            ] },
            "  - mkdir -p /etc/convox\n",
            "  - echo \"", { "Ref": "AWS::Region" }, "\" > /etc/convox/region\n",
            "  - echo \"", { "Ref": "ClientId" }, "\" > /etc/convox/client_id\n",
            "  - echo \"", { "Ref": "LogGroup" }, "\" > /etc/convox/log_group\n",
            { "Fn::If": [ "Agent",
              "  - curl -s https://convox.s3.amazonaws.com/agent/0.71/convox.conf > /etc/init/convox.conf\n",
              ""
            ] },
            "  - echo -e '/var/log/docker {\\n  rotate 7\\n  daily\\n  nocompress\\n  copytruncate\\n}' >> /etc/logrotate.d/docker\n",
            { "Fn::If": [ "BlankInstanceBootCommand",
              { "Ref": "AWS::NoValue" },
              { "Fn::Join": [ "", [
              "  - ", { "Ref": "InstanceBootCommand" }, "\n"
              ] ] }
            ] },
            "runcmd:\n",
            { "Fn::If": [ "BlankInstanceRunCommand",
              { "Ref": "AWS::NoValue" },
              { "Fn::Join": [ "", [
              "  - ", { "Ref": "InstanceRunCommand" }, "\n"
              ] ] }
            ] },
            "  - export INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\n",
            "  - export ASG_NAME=$(/usr/bin/aws autoscaling describe-auto-scaling-instances --instance-ids=$INSTANCE_ID --region ", {"Ref":"AWS::Region"}, " --output text --query 'AutoScalingInstances[0].AutoScalingGroupName')\n",
            "  - export LIFECYCLE_HOOK=$(/usr/bin/aws autoscaling describe-lifecycle-hooks --auto-scaling-group-name $ASG_NAME --region ", {"Ref":"AWS::Region"}, " --output text --query \"LifecycleHooks[?contains(LifecycleHookName, '", { "Ref": "AWS::StackName" }, "-InstancesLifecycleLaunching') == \\`true\\`].LifecycleHookName | [0]\")\n",
            "  - /usr/bin/aws autoscaling complete-lifecycle-action --region ", { "Ref": "AWS::Region" }, " --instance-id $INSTANCE_ID --lifecycle-hook-name $LIFECYCLE_HOOK --auto-scaling-group-name $ASG_NAME --lifecycle-action-result CONTINUE\n",
            "  - /opt/aws/bin/cfn-signal --stack ", { "Ref": "AWS::StackName" }, " --region ", { "Ref": "AWS::Region" }, " --resource Instances\n"
          ] ] }
        }
      }
    },
    "Instances": {
      "DependsOn": [ "AvailabilityZones", "Subnet0", "Subnet1" ],
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "LaunchConfigurationName" : { "Ref": "LaunchConfiguration" },
        "AvailabilityZones": [
          { "Fn::GetAtt": [ "AvailabilityZones", "AvailabilityZone0" ] },
          { "Fn::GetAtt": [ "AvailabilityZones", "AvailabilityZone1" ] },
          { "Fn::If": [ "ThirdAvailabilityZone", { "Fn::GetAtt": [ "AvailabilityZones", "AvailabilityZone2" ] }, { "Ref": "AWS::NoValue" } ] }
        ],
        "VPCZoneIdentifier": {
          "Fn::If": [ "Private", [
            { "Ref": "SubnetPrivate0" },
            { "Ref": "SubnetPrivate1" },
            { "Fn::If": [ "ThirdAvailabilityZone", { "Ref": "SubnetPrivate2" }, { "Ref": "AWS::NoValue" } ] }
          ], [
            { "Ref": "Subnet0" },
            { "Ref": "Subnet1" },
            { "Fn::If": [ "ThirdAvailabilityZone", { "Ref": "Subnet2" }, { "Ref": "AWS::NoValue" } ] }
          ] ]
        },
        "Cooldown": 5,
        "DesiredCapacity": { "Ref": "InstanceCount" },
        "HealthCheckType": "EC2",
        "HealthCheckGracePeriod": "120",
        "MinSize" : { "Ref": "InstanceCount" },
        "MaxSize" : "1000",
        "MetricsCollection": [ { "Granularity": "1Minute" } ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Ref": "AWS::StackName" },
            "PropagateAtLaunch": true
          },
          {
            "Key": "Rack",
            "Value": { "Ref": "AWS::StackName" },
            "PropagateAtLaunch": true
          },
          {
            "Key": "GatewayAttachment",
            "Value": { "Fn::If": [ "ExistingVpc", "existing", { "Ref": "GatewayAttachment" } ] },
            "PropagateAtLaunch": false
          }
        ]
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": { "Ref": "InstanceUpdateBatchSize" },
          "MinInstancesInService": { "Ref": "InstanceCount" },
          "PauseTime" : "PT15M",
          "SuspendProcesses": [
            "ScheduledActions"
          ],
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "InstancesLifecycleLaunching": {
      "Type": "AWS::AutoScaling::LifecycleHook",
      "Properties": {
        "AutoScalingGroupName": { "Ref": "Instances" },
        "DefaultResult": "CONTINUE",
        "HeartbeatTimeout": "600",
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_LAUNCHING",
        "NotificationTargetARN": { "Ref": "InstancesLifecycleTopic" },
        "RoleARN": { "Fn::GetAtt": [ "InstancesLifecycleRole", "Arn" ] }
      }
    },
    "InstancesLifecycleTerminating": {
      "Type": "AWS::AutoScaling::LifecycleHook",
      "Properties": {
        "AutoScalingGroupName": { "Ref": "Instances" },
        "DefaultResult": "CONTINUE",
        "HeartbeatTimeout": "300",
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "NotificationTargetARN": { "Ref": "InstancesLifecycleTopic" },
        "RoleARN": { "Fn::GetAtt": [ "InstancesLifecycleRole", "Arn" ] }
      }
    },
    "InstancesLifecycleRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": [ "autoscaling.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/convox/",
        "Policies": [
          {
            "PolicyName": "InstancesLifecycleRole",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": { "Ref": "InstancesLifecycleTopic" }
                }
              ]
            }
          }
        ]
      }
    },
    "InstancesLifecycleTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [ { "Endpoint": { "Fn::GetAtt": [ "InstancesLifecycleHandler", "Arn" ] }, "Protocol": "lambda" } ],
        "TopicName" : { "Fn::Join": ["", [{"Ref":"AWS::StackName"}, "-lifecycle"]] }
      }
    },
    "InstancesLifecycleHandler": {
      "DependsOn": ["InstancesLifecycleHandlerRole"],
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": { "Fn::Join": [ "-", [ "convox", { "Ref": "AWS::Region" } ] ] },
          "S3Key": { "Fn::Join": [ "", [ "release/", { "Ref": "Version" }, "/lambda/lifecycle.zip" ] ] }
        },
        "Description": { "Fn::Join": [ "", [ "{\"Cluster\": \"", { "Ref": "Cluster" }, "\", \"Rack\": \"", { "Ref": "AWS::StackName" }, "\"}" ] ] },
        "Handler": "index.external",
        "MemorySize": "128",
        "Role": { "Fn::GetAtt": [ "InstancesLifecycleHandlerRole", "Arn" ] },
        "Runtime": "nodejs4.3",
        "Timeout": "300"
      }
    },
    "InstancesLifecycleHandlerPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": { "Fn::GetAtt": [ "InstancesLifecycleHandler", "Arn" ] },
        "Action": "lambda:InvokeFunction",
        "Principal": "sns.amazonaws.com",
        "SourceArn": { "Ref": "InstancesLifecycleTopic" }
      }
    },
    "InstancesLifecycleHandlerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": [ "lambda.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/convox/",
        "Policies": [
          {
            "PolicyName": "InstancesLifecycleHandlerRole",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "autoscaling:CompleteLifecycleAction",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DescribeContainerInstances",
                    "ecs:DescribeServices",
                    "ecs:DescribeTasks",
                    "ecs:ListContainerInstances",
                    "ecs:ListServices",
                    "ecs:ListTasks",
                    "ecs:StopTask",
                    "ecs:UpdateContainerInstancesState",
                    "lambda:GetFunction",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "AccountEvents": {
      "Type": "AWS::SQS::Queue"
    },
    "AccountEventsPolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "Queues": [ { "Ref": "AccountEvents" } ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "AWS": "*" },
              "Action": "sqs:SendMessage",
              "Resource": { "Fn::GetAtt": [ "AccountEvents", "Arn" ] },
              "Condition": { "ArnEquals": { "aws:SourceArn": { "Fn::GetAtt": [ "AccountEventsRule", "Arn" ] } } }
            }
          ]
        }
      }
    },
    "AccountEventsRule": {
      "Type" : "AWS::Events::Rule",
      "Properties" : {
        "Description" : "Specified event changes",
        "EventPattern" : {
          "account":  [ { "Ref": "AWS::AccountId" } ],
          "source": [
            "aws.ecs"
          ],
          "detail-type": [
            "ECS Task State Change"
          ],
          "detail": {
            "clusterArn": [
              { "Fn::Sub": "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${Cluster}" }
            ]
          }
        },
        "State" : "ENABLED",
        "Targets" : [
          { "Arn": { "Fn::GetAtt": [ "AccountEvents", "Arn" ] }, "Id": "Events" }
        ]
      }
    },
    "CloudformationEvents": {
      "Type": "AWS::SQS::Queue"
    },
    "CloudformationEventsPolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "Queues": [ { "Ref": "CloudformationEvents" } ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "AWS": "*" },
              "Action": "sqs:SendMessage",
              "Resource": { "Fn::GetAtt": [ "CloudformationEvents", "Arn" ] },
              "Condition": { "ArnEquals": { "aws:SourceArn": { "Ref": "CloudformationTopic" } } }
            }
          ]
        }
      }
    },
    "CloudformationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": { "Fn::Sub": "${AWS::StackName}-events" },
        "Subscription": [
          { "Protocol": "sqs", "Endpoint": { "Fn::GetAtt": [ "CloudformationEvents", "Arn" ] } }
        ]
      }
    },
    "Balancer": {
      "DependsOn": [ "BalancerSecurityGroup" ],
      "Properties": {
        "ConnectionDrainingPolicy": {
          "Enabled": true,
          "Timeout": 60
        },
        "ConnectionSettings": {
          "IdleTimeout": 3600
        },
        "CrossZone": true,
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": 5,
          "Target": "HTTP:3000/check",
          "Timeout": 3,
          "UnhealthyThreshold": "2"
        },
        "LBCookieStickinessPolicy": [
          {
            "PolicyName": "affinity"
          }
        ],
        "Listeners": [
          {
            "Protocol": "TCP",
            "LoadBalancerPort": "80",
            "InstanceProtocol": "TCP",
            "InstancePort": "3000"
          },
          {
            "Protocol": "TCP",
            "LoadBalancerPort": "443",
            "InstanceProtocol": "TCP",
            "InstancePort": "3001"
          }
        ],
        "LoadBalancerName": { "Fn::If": [ "PrivateApi",
          { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "i" ] ] },
          { "Ref": "AWS::StackName" }
        ] },
        "Scheme": { "Fn::If": [ "PrivateApi", "internal", { "Ref": "AWS::NoValue" } ] },
        "SecurityGroups": [
          {
            "Ref": "BalancerSecurityGroup"
          }
        ],
        "Subnets": {
          "Fn::If": [ "PrivateApi", [
            { "Ref": "SubnetPrivate0" },
            { "Ref": "SubnetPrivate1" },
            { "Fn::If": [ "ThirdAvailabilityZone", { "Ref": "SubnetPrivate2" }, { "Ref": "AWS::NoValue" } ] }
          ], [
            { "Ref": "Subnet0" },
            { "Ref": "Subnet1" },
            { "Fn::If": [ "ThirdAvailabilityZone", { "Ref": "Subnet2" }, { "Ref": "AWS::NoValue" } ] }
          ] ]
        },
        "Tags": [
          {
            "Key": "GatewayAttachment",
            "Value": { "Fn::If": [ "ExistingVpc", "existing", { "Ref": "GatewayAttachment" } ] }
          },
          {
            "Key": "Name",
            "Value": { "Ref": "AWS::StackName" }
          }
        ]
      },
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
    },
    "BalancerSecurityGroup": {
      "Properties": {
        "GroupDescription": {
          "Fn::Join": [
            " ",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-balancer"
            ]
          ]
        },
        "SecurityGroupIngress": [
          {
            "CidrIp": {
              "Fn::If" : [
                "PrivateApi",
                { "Ref": "VPCCIDR" },
                "0.0.0.0/0"
              ]
            },
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80"
          },
          {
            "CidrIp": {
              "Fn::If" : [
                "PrivateApi",
                { "Ref": "VPCCIDR" },
                "0.0.0.0/0"
              ]
            },
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443"
          }
        ],
        "Tags": [
          { "Key": "Name", "Value": { "Ref": "AWS::StackName" } }
        ],
        "VpcId": { "Fn::If": [ "BlankExistingVpc",
          { "Ref": "Vpc" },
          { "Ref": "ExistingVpc" }
        ] }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "WebService": {
      "DependsOn": [ "WebTasks", "Balancer", "Cluster", "CustomTopic", "Instances", "ServiceRole" ],
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": { "Ref": "Cluster" },
        "DeploymentConfiguration": {
          "MinimumHealthyPercent": "50",
          "MaximumPercent": "200"
        },
        "DesiredCount": "2",
        "LoadBalancers": [
          {
            "ContainerName": "web",
            "ContainerPort": "4443",
            "LoadBalancerName": { "Ref": "Balancer" }
          }
        ],
        "Role": { "Fn::GetAtt": [ "ServiceRole", "Arn" ] },
        "TaskDefinition": { "Ref": "WebTasks" }
      }
    },
    "MonitorService": {
      "DependsOn": [ "MonitorTasks", "Balancer", "Cluster", "CustomTopic", "Instances", "ServiceRole" ],
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": { "Ref": "Cluster" },
        "DeploymentConfiguration": {
          "MinimumHealthyPercent": "100",
          "MaximumPercent": "200"
        },
        "DesiredCount": "1",
        "TaskDefinition": { "Ref": "MonitorTasks" }
      }
    },
    "ServiceRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/convox/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "ec2:Describe*",
                    "ec2:AuthorizeSecurityGroupIngress"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ]
                }
              ]
            },
            "PolicyName": "ServiceRole"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "DynamoBuilds": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "builds" ] ] },
        "AttributeDefinitions": [
          { "AttributeName": "id", "AttributeType": "S" },
          { "AttributeName": "app", "AttributeType": "S" },
          { "AttributeName": "created", "AttributeType": "S" }
        ],
        "KeySchema": [ { "AttributeName": "id", "KeyType": "HASH" } ],
        "GlobalSecondaryIndexes": [ {
          "IndexName": "app.created",
          "KeySchema": [ { "AttributeName": "app", "KeyType": "HASH" }, { "AttributeName": "created", "KeyType": "RANGE" } ],
          "Projection": { "ProjectionType": "ALL" },
          "ProvisionedThroughput": { "ReadCapacityUnits": "5", "WriteCapacityUnits": "5" }
        }],
        "ProvisionedThroughput": { "ReadCapacityUnits": "5", "WriteCapacityUnits": "5" }
      }
    },
    "DynamoReleases": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "releases" ] ] },
        "AttributeDefinitions": [
          { "AttributeName": "id", "AttributeType": "S" },
          { "AttributeName": "app", "AttributeType": "S" },
          { "AttributeName": "created", "AttributeType": "S" }
        ],
        "KeySchema": [ { "AttributeName": "id", "KeyType": "HASH" } ],
        "GlobalSecondaryIndexes": [{
          "IndexName": "app.created",
          "KeySchema": [ { "AttributeName": "app", "KeyType": "HASH" }, { "AttributeName": "created", "KeyType": "RANGE" } ],
          "Projection": { "ProjectionType": "ALL" },
          "ProvisionedThroughput": { "ReadCapacityUnits": "5", "WriteCapacityUnits": "5" }
        }],
        "ProvisionedThroughput": { "ReadCapacityUnits": "5", "WriteCapacityUnits": "5" }
      }
    },
    "VolumeFilesystem": {
      "Type": "AWS::EFS::FileSystem",
      "Condition": "RegionHasEFS",
      "Properties": {
        "FileSystemTags": [
          { "Key": "Name", "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "shared-volumes" ] ] } }
        ]
      }
    },
    "VolumeSecurity": {
      "Type": "AWS::EC2::SecurityGroup",
      "Condition": "RegionHasEFS",
      "Properties": {
        "GroupDescription": "volume security group",
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": "2049", "ToPort": "2049", "CidrIp": { "Ref": "VPCCIDR" } }
        ],
        "Tags": [
          { "Key": "Name", "Value": { "Ref": "AWS::StackName" } }
        ],
        "VpcId": { "Fn::If": [ "BlankExistingVpc",
          { "Ref": "Vpc" },
          { "Ref": "ExistingVpc" }
        ] }
      }
    },
    "VolumeTarget0": {
      "Type": "AWS::EFS::MountTarget",
      "Condition": "RegionHasEFS",
      "DependsOn": "Subnet0",
      "Properties": {
        "FileSystemId": { "Ref": "VolumeFilesystem" },
        "SubnetId": {
          "Fn::If": [
            "Private",
            { "Ref": "SubnetPrivate0" },
            { "Ref": "Subnet0" }
          ]
        },
        "SecurityGroups": [ { "Ref": "VolumeSecurity" } ]
      }
    },
    "VolumeTarget1": {
      "Type": "AWS::EFS::MountTarget",
      "Condition": "RegionHasEFS",
      "DependsOn": "Subnet1",
      "Properties": {
        "FileSystemId": { "Ref": "VolumeFilesystem" },
        "SubnetId": {
          "Fn::If": [
            "Private",
            { "Ref": "SubnetPrivate1" },
            { "Ref": "Subnet1" }
          ]
        },
        "SecurityGroups": [ { "Ref": "VolumeSecurity" } ]
      }
    },
    "VolumeTarget2": {
      "Type": "AWS::EFS::MountTarget",
      "Condition": "RegionHasEFSAndThirdAvailabilityZone",
      "DependsOn": "Subnet2",
      "Properties": {
        "FileSystemId": { "Ref": "VolumeFilesystem" },
        "SubnetId": {
          "Fn::If": [
            "Private",
            { "Ref": "SubnetPrivate2" },
            { "Ref": "Subnet2" }
          ]
        },
        "SecurityGroups": [ { "Ref": "VolumeSecurity" } ]
      }
    },
    "Settings": {
      "Properties": {
        "AccessControl": "Private",
        "Tags": [
          {
            "Key": "system",
            "Value": "convox"
          },
          {
            "Key": "app",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Name",
            "Value": { "Ref": "AWS::StackName" }
          }
        ]
      },
      "DeletionPolicy": "Retain",
      "Type": "AWS::S3::Bucket"
    },
    "RackBuildTasks": {
      "DependsOn": [ "Balancer", "Cluster", "CustomTopic", "DynamoBuilds", "DynamoReleases", "KernelAccess", "LogGroup", "Subnet0", "Subnet1" ],
      "Properties": {
        "Name": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "build" ] ] },
        "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
        "TaskRole": { "Fn::GetAtt": [ "SecureEnvironmentRole", "Arn" ] },
        "Tasks": [
          {
            "Cpu": { "Ref": "BuildCpu" },
            "Environment": {
              "AWS_REGION": { "Ref": "AWS::Region" },
              "AWS_ACCESS": { "Ref": "KernelAccess" },
              "AWS_SECRET": { "Fn::GetAtt": [ "KernelAccess", "SecretAccessKey" ] },
              "BUILD_CLUSTER": { "Fn::If": [ "DedicatedBuilder", { "Ref": "BuildCluster" }, { "Ref": "Cluster" } ] },
              "CLIENT_ID": { "Ref": "ClientId" },
              "CLUSTER": { "Ref": "Cluster" },
              "DYNAMO_BUILDS": { "Ref": "DynamoBuilds" },
              "DYNAMO_RELEASES": { "Ref": "DynamoReleases" },
              "ENCRYPTION_KEY": { "Ref": "EncryptionKey" },
              "LOG_GROUP": { "Ref": "LogGroup" },
              "NOTIFICATION_HOST": { "Fn::GetAtt": [ "Balancer", "DNSName" ] },
              "NOTIFICATION_TOPIC": { "Ref": "NotificationTopic"},
              "PROCESS": "build",
              "PROVIDER": "aws",
              "RACK": { "Ref": "AWS::StackName" },
              "RELEASE": { "Ref": "Version" },
              "ROLLBAR_TOKEN": "f67f25b8a9024d5690f997bd86bf14b0",
              "SEGMENT_WRITE_KEY": "KLvwCXo6qcTmQHLpF69DEwGf9zh7lt9i",
              "SETTINGS_BUCKET": { "Ref": "Settings" },
              "STACK_ID": { "Ref": "AWS::StackId" }
            },
            "Image": { "Fn::If": [ "BlankBuildImage", { "Fn::Join": [ ":", [ "convox/api", { "Ref": "Version" } ] ] }, { "Ref": "BuildImage" } ] },
            "Links": [],
            "Memory": { "Ref": "BuildMemory" },
            "Name": "build",
            "Volumes": [
              "/etc/sysconfig/docker:/etc/sysconfig/docker",
              "/var/run/docker.sock:/var/run/docker.sock"
            ]
          }
        ]
      },
      "Type": "Custom::ECSTaskDefinition",
      "Version": "1.0"
    },
    "WebTasks": {
      "DependsOn": [ "Balancer", "Cluster", "CustomTopic", "DynamoBuilds", "DynamoReleases", "KernelAccess", "LogGroup", "Subnet0", "Subnet1" ],
      "Properties": {
        "Name": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "web" ] ] },
        "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
        "Tasks": [
          {
            "Command": "api/bin/web",
            "Cpu": { "Ref": "ApiCpu" },
            "Environment": {
              "AWS_REGION": { "Ref": "AWS::Region" },
              "AWS_ACCESS": { "Ref": "KernelAccess" },
              "AWS_SECRET": { "Fn::GetAtt": [ "KernelAccess", "SecretAccessKey" ] },
              "BUILD_CLUSTER": { "Fn::If": [ "DedicatedBuilder", { "Ref": "BuildCluster" }, { "Ref": "Cluster" } ] },
              "CLIENT_ID": { "Ref": "ClientId" },
              "CLOUDFORMATION_TOPIC": { "Ref": "CloudformationTopic" },
              "CLUSTER": { "Ref": "Cluster" },
              "CUSTOM_TOPIC": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
              "DOCKER_IMAGE_API": { "Fn::Join": [ ":", [ "convox/api", { "Ref": "Version" } ] ] },
              "DYNAMO_BUILDS": { "Ref": "DynamoBuilds" },
              "DYNAMO_RELEASES": { "Ref": "DynamoReleases" },
              "ENCRYPTION_KEY": { "Ref": "EncryptionKey" },
              "HTTP_PROXY": { "Ref": "HttpProxy" },
              "HTTPS_PROXY": { "Ref": "HttpProxy" },
              "INTERNAL": { "Ref": "Internal" },
              "LOG_GROUP": { "Ref": "LogGroup" },
              "NOTIFICATION_HOST": { "Fn::GetAtt": [ "Balancer", "DNSName" ] },
              "NOTIFICATION_TOPIC": { "Ref": "NotificationTopic"},
              "PASSWORD": { "Ref": "Password" },
              "PRIVATE": { "Ref": "Private" },
              "PROCESS": "web",
              "PROVIDER": "aws",
              "RACK": { "Ref": "AWS::StackName" },
              "RELEASE": { "Ref": "Version" },
              "ROLLBAR_TOKEN": "f67f25b8a9024d5690f997bd86bf14b0",
              "SECURITY_GROUP": { "Fn::GetAtt": [ "SecurityGroup", "GroupId" ] },
              "SEGMENT_WRITE_KEY": "KLvwCXo6qcTmQHLpF69DEwGf9zh7lt9i",
              "SETTINGS_BUCKET": { "Ref": "Settings" },
              "STACK_ID": { "Ref": "AWS::StackId" },
              "SUBNETS": {
                "Fn::Join": [ ",", [
                  { "Ref": "Subnet0" },
                  { "Ref": "Subnet1" },
                  { "Fn::If": [ "ThirdAvailabilityZone", { "Ref": "Subnet2" }, { "Ref": "AWS::NoValue" } ] }
                ] ]
              },
              "SUBNETS_PRIVATE": { "Fn::If": [ "Private",
                { "Fn::Join": [ ",", [
                  { "Ref": "SubnetPrivate0" },
                  { "Ref": "SubnetPrivate1" },
                  { "Fn::If": [ "ThirdAvailabilityZone", { "Ref": "SubnetPrivate2" }, { "Ref": "AWS::NoValue" } ] }
                ] ] },
                ""
              ] },
              "VPC": { "Fn::If": [ "BlankExistingVpc",
                { "Ref": "Vpc" },
                { "Ref": "ExistingVpc" }
              ] },
              "VPCCIDR": { "Ref": "VPCCIDR" }
            },
            "Image": { "Fn::Join": [ ":", [ "convox/api", { "Ref": "Version" } ] ] },
            "Links": [],
            "Memory": { "Ref": "ApiMemory" },
            "Name": "web",
            "PortMappings": [
              "3000:3000/tcp",
              "3001:4443/tcp"
            ],
            "Volumes": [
              "/var/run/docker.sock:/var/run/docker.sock"
            ]
          }
        ]
      },
      "Type": "Custom::ECSTaskDefinition",
      "Version": "1.0"
    },
    "MonitorTasks": {
      "DependsOn": [ "Balancer", "Cluster", "CustomTopic", "DynamoBuilds", "DynamoReleases", "KernelAccess", "LogGroup", "Subnet0", "Subnet1" ],
      "Properties": {
        "Name": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "monitor" ] ] },
        "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
        "Tasks": [
          {
            "Command": "api/bin/monitor",
            "CPU": "64",
            "Environment": {
              "AUTOSCALE": { "Fn::If": [ "Autoscale", "true", "false" ] },
              "AWS_REGION": { "Ref": "AWS::Region" },
              "AWS_ACCESS": { "Ref": "KernelAccess" },
              "AWS_SECRET": { "Fn::GetAtt": [ "KernelAccess", "SecretAccessKey" ] },
              "BUILD_CLUSTER": { "Fn::If": [ "DedicatedBuilder", { "Ref": "BuildCluster" }, { "Ref": "Cluster" } ] },
              "CLIENT_ID": { "Ref": "ClientId" },
              "CLOUDFORMATION_TOPIC": { "Ref": "CloudformationTopic" },
              "CLUSTER": { "Ref": "Cluster" },
              "CUSTOM_TOPIC": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
              "DOCKER_IMAGE_API": { "Fn::Join": [ ":", [ "convox/api", { "Ref": "Version" } ] ] },
              "DYNAMO_BUILDS": { "Ref": "DynamoBuilds" },
              "DYNAMO_RELEASES": { "Ref": "DynamoReleases" },
              "ENCRYPTION_KEY": { "Ref": "EncryptionKey" },
              "HTTP_PROXY": { "Ref": "HttpProxy" },
              "HTTPS_PROXY": { "Ref": "HttpProxy" },
              "LOG_GROUP": { "Ref": "LogGroup" },
              "NOTIFICATION_HOST": { "Fn::GetAtt": [ "Balancer", "DNSName" ] },
              "NOTIFICATION_TOPIC": { "Ref": "NotificationTopic"},
              "PASSWORD": { "Ref": "Password" },
              "PRIVATE": { "Ref": "Private" },
              "PROCESS": "web",
              "PROVIDER": "aws",
              "RACK": { "Ref": "AWS::StackName" },
              "RELEASE": { "Ref": "Version" },
              "ROLLBAR_TOKEN": "f67f25b8a9024d5690f997bd86bf14b0",
              "SEGMENT_WRITE_KEY": "KLvwCXo6qcTmQHLpF69DEwGf9zh7lt9i",
              "STACK_ID": { "Ref": "AWS::StackId" },
              "SUBNETS": {
                "Fn::Join": [ ",", [
                  { "Ref": "Subnet0" },
                  { "Ref": "Subnet1" },
                  { "Fn::If": [ "ThirdAvailabilityZone", { "Ref": "Subnet2" }, { "Ref": "AWS::NoValue" } ] }
                ] ]
              },
              "SUBNETS_PRIVATE": { "Fn::If": [ "Private",
                { "Fn::Join": [ ",", [
                  { "Ref": "SubnetPrivate0" },
                  { "Ref": "SubnetPrivate1" },
                  { "Fn::If": [ "ThirdAvailabilityZone", { "Ref": "SubnetPrivate2" }, { "Ref": "AWS::NoValue" } ] }
                ] ] },
                ""
              ] },
              "VPC": { "Fn::If": [ "BlankExistingVpc",
                { "Ref": "Vpc" },
                { "Ref": "ExistingVpc" }
              ] }
            },
            "Image": { "Fn::Join": [ ":", [ "convox/api", { "Ref": "Version" } ] ] },
            "Links": [],
            "Memory": "64",
            "Name": "monitor",
            "Volumes": [
              "/var/run/docker.sock:/var/run/docker.sock"
            ]
          }
        ]
      },
      "Type": "Custom::ECSTaskDefinition",
      "Version": "1.0"
    }
  }
}
