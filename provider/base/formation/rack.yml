AWSTemplateFormatVersion: "2010-09-09"
Outputs:
  Cluster:
    Value: !Ref Cluster
  ClusterCertificateAuthority:
    Value: !GetAtt Cluster.CertificateAuthorityData
  ClusterEndpoint:
    Value: !GetAtt Cluster.Endpoint
  NodesInstanceRole:
    Value: !GetAtt NodesInstanceRole.Arn
Parameters:
  Cidr:
    Type: String
    Default: 10.0.0.0/16
Resources:
  Cluster:
    Type: AWS::EKS::Cluster
    Properties:
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ClusterSecurityGroup
        SubnetIds:
          - !Ref VpcSubnet0
          - !Ref VpcSubnet1
          - !Ref VpcSubnet2
      RoleArn: !GetAtt ClusterRole.Arn
  ClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: { Service: [ "eks.amazonaws.com" ] }
            Action: [ "sts:AssumeRole" ]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "${AWS::StackName} cluster"
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} cluster"
  ClusterSecurityGroupIngressNodes:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ClusterSecurityGroup
      SourceSecurityGroupId: !Ref NodesSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
  ClusterSecurityGroupEgressNodes:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref ClusterSecurityGroup
      DestinationSecurityGroupId: !Ref NodesSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535
  NodesInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref NodesInstanceRole
  NodesInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: "Allow"
            Principal: { Service: [ "ec2.amazonaws.com" ] }
            Action: [ "sts:AssumeRole" ]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Path: "/"
  NodesLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: 'true'
      IamInstanceProfile: !Ref NodesInstanceProfile
      ImageId: ami-dea4d5a1
      InstanceType: t2.small
      KeyName: test
      SecurityGroups:
        - !Ref NodesSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          CA_CERTIFICATE_DIRECTORY=/etc/kubernetes/pki
          CA_CERTIFICATE_FILE_PATH=$CA_CERTIFICATE_DIRECTORY/ca.crt
          MODEL_DIRECTORY_PATH=~/.aws/eks
          MODEL_FILE_PATH=$MODEL_DIRECTORY_PATH/eks-2017-11-01.normal.json
          mkdir -p $CA_CERTIFICATE_DIRECTORY
          mkdir -p $MODEL_DIRECTORY_PATH
          curl -o $MODEL_FILE_PATH https://s3-us-west-2.amazonaws.com/amazon-eks/1.10.3/2018-06-05/eks-2017-11-01.normal.json
          aws configure add-model --service-model file://$MODEL_FILE_PATH --service-name eks
          aws eks describe-cluster --region=${AWS::Region} --name=${Cluster} --query 'cluster.{certificateAuthorityData: certificateAuthority.data, endpoint: endpoint}' > /tmp/describe_cluster_result.json
          cat /tmp/describe_cluster_result.json | grep certificateAuthorityData | awk '{print $2}' | sed 's/[,\"]//g' | base64 -d >  $CA_CERTIFICATE_FILE_PATH
          MASTER_ENDPOINT=$(cat /tmp/describe_cluster_result.json | grep endpoint | awk '{print $2}' | sed 's/[,\"]//g')
          INTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
          sed -i s,MASTER_ENDPOINT,$MASTER_ENDPOINT,g /var/lib/kubelet/kubeconfig
          sed -i s,CLUSTER_NAME,${Cluster},g /var/lib/kubelet/kubeconfig
          sed -i s,REGION,${AWS::Region},g /etc/systemd/system/kubelet.service
          sed -i s,MAX_PODS,8,g /etc/systemd/system/kubelet.service
          sed -i s,MASTER_ENDPOINT,$MASTER_ENDPOINT,g /etc/systemd/system/kubelet.service
          sed -i s,INTERNAL_IP,$INTERNAL_IP,g /etc/systemd/system/kubelet.service
          DNS_CLUSTER_IP=10.100.0.10
          if [[ $INTERNAL_IP == 10.* ]] ; then DNS_CLUSTER_IP=172.20.0.10; fi
          sed -i s,DNS_CLUSTER_IP,$DNS_CLUSTER_IP,g  /etc/systemd/system/kubelet.service
          sed -i s,CERTIFICATE_AUTHORITY_FILE,$CA_CERTIFICATE_FILE_PATH,g /var/lib/kubelet/kubeconfig
          sed -i s,CLIENT_CA_FILE,$CA_CERTIFICATE_FILE_PATH,g  /etc/systemd/system/kubelet.service
          systemctl daemon-reload
          systemctl restart kubelet
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Nodes --region ${AWS::Region}
  NodesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "${AWS::StackName} nodes"
      VpcId:
        !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} cluster"
        - Key: !Sub "kubernetes.io/cluster/${Cluster}"
          Value: owned
  NodesSecurityGroupIngressInternal:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref NodesSecurityGroup
      SourceSecurityGroupId: !Ref NodesSecurityGroup
      IpProtocol: "-1"
      FromPort: 0
      ToPort: 65535
  NodesSecurityGroupIngressCluster:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref NodesSecurityGroup
      SourceSecurityGroupId: !Ref ClusterSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535
  Nodes:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: 2
      LaunchConfigurationName: !Ref NodesLaunchConfig
      MinSize: 2
      MaxSize: 2
      VPCZoneIdentifier:
        - !Ref VpcSubnet0
        - !Ref VpcSubnet1
        - !Ref VpcSubnet2
      Tags:
        - Key: !Sub "kubernetes.io/cluster/${Cluster}"
          Value: owned
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref Cidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  VpcGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  VpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref VpcGateway
      VpcId: !Ref Vpc
  VpcRoutes:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  VpcRouteDefault:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VpcGateway
      RouteTableId: !Ref VpcRoutes
  VpcSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, { "Fn::GetAZs": "" } ]
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt Vpc.CidrBlock, "3", "14" ] ]
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} 0"
  VpcSubnet0Routes:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VpcSubnet0
      RouteTableId: !Ref VpcRoutes
  VpcSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, { "Fn::GetAZs": "" } ]
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt Vpc.CidrBlock, "3", "14" ] ]
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} 1"
  VpcSubnet1Routes:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VpcSubnet1
      RouteTableId: !Ref VpcRoutes
  VpcSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 2, { "Fn::GetAZs": "" } ]
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt Vpc.CidrBlock, "3", "14" ] ]
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} 2"
  VpcSubnet2Routes:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VpcSubnet2
      RouteTableId: !Ref VpcRoutes
