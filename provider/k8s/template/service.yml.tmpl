{{ if .Service.Port.Port }}
apiVersion: v1
kind: Service
metadata:
  namespace: {{.Namespace}}
  name: {{.Service.Name}}
  annotations:
    alb.ingress.kubernetes.io/target-type: pod
    convox.service.ports.{{.Service.Port.Port}}.protocol: {{.Service.Port.Scheme}}
  labels:
    system: convox
    rack: {{.Rack}}
    app: {{.App.Name}}
    service: {{.Service.Name}}
    release: {{.Release.Id}}
spec:
  type: NodePort
  selector:
    system: convox
    rack: {{.Rack}}
    app: {{.App.Name}}
    service: {{.Service.Name}}
    release: {{.Release.Id}}
  ports:
    - port: {{.Service.Port.Port}}
      protocol: TCP
      targetPort: {{.Service.Port.Port}}
---
{{ end }}
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{.Namespace}}
  name: {{.Service.Name}}
  labels:
    system: convox
    rack: {{.Rack}}
    app: {{.App.Name}}
    service: {{.Service.Name}}
    release: {{.Release.Id}}
spec:
  replicas: {{.Replicas}}
  selector:
    matchLabels:
      system: convox
      rack: {{.Rack}}
      app: {{.App.Name}}
      service: {{.Service.Name}}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  minReadySeconds: 5
  revisionHistoryLimit: 1
  template:
    metadata:
      labels:
        system: convox
        rack: {{.Rack}}
        app: {{.App.Name}}
        service: {{.Service.Name}}
        release: {{.Release.Id}}
    spec:
      containers:
      - name: main
        {{ with .Service.Command }}
        args:
        {{ range shellsplit . }}
          - {{ safe . }}
        {{ end }}
        {{ end }}
        env:
        {{ range env .Service.EnvironmentDefaults .Env }}
        - name: {{ safe .Key }}
          value: {{ safe .Value }}
        {{ end }}
        image: {{ image .App .Service .Release }}
        imagePullPolicy: IfNotPresent
        {{ with .Service.Port.Port }}
        livenessProbe:
          httpGet:
            path: "{{$.Service.Health.Path}}"
            port: {{.}}
            scheme: "{{ upper $.Service.Port.Scheme }}"
          initialDelaySeconds: {{$.Service.Health.Grace}}
          periodSeconds: {{$.Service.Health.Interval}}
          timeoutSeconds: {{$.Service.Health.Timeout}}
        readinessProbe:
          httpGet:
            path: "{{$.Service.Health.Path}}"
            port: {{.}}
            scheme: "{{ upper $.Service.Port.Scheme }}"
          initialDelaySeconds: {{$.Service.Health.Grace}}
          periodSeconds: {{$.Service.Health.Interval}}
          timeoutSeconds: {{$.Service.Health.Timeout}}
        ports:
          - containerPort: {{.}}
        {{ end }}
        resources:
          requests:
            {{ with .Service.Scale.Cpu }}
            cpu: "{{.}}m"
            {{ end }}
            {{ with .Service.Scale.Memory }}
            memory: "{{.}}Mi"
            {{ end }}
        volumeMounts:
        {{ range .Service.Volumes }}
        - name: {{ volumeName . }}
          mountPath: "{{ volumeTo . }}" 
        {{ end }}
      shareProcessNamespace: true
      volumes:
      {{ range .Service.Volumes }}
      - name: {{ volumeName . }}
        hostPath: 
          path: "{{ volumeFrom $.App.Name . }}"
      {{ end }}
{{ if .Service.Autoscale }}
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  namespace: {{.Namespace}}
  name: {{.Service.Name}}
  labels:
    system: convox
    rack: {{.Rack}}
    app: {{.App.Name}}
    service: {{.Service.Name}}
    release: {{.Release.Id}}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{.Service.Name}}
  minReplicas: {{.Service.Scale.Count.Min}}
  maxReplicas: {{.Service.Scale.Count.Max}}
  metrics:
  {{ with .Service.Scale.Targets.Cpu }}
  - type: Resource
    resource:
      name: cpu
      targetAverageUtilization: {{.}}
  {{ end }}
  {{ with .Service.Scale.Targets.Memory }}
  - type: Resource
    resource:
      name: memory
      targetAverageUtilization: {{.}}
  {{ end }}
{{ end }}
