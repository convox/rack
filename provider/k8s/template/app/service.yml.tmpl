apiVersion: v1
kind: Secret
metadata:
  namespace: {{.Namespace}}
  name: env-{{.Service.Name}}
  labels:
    type: env
    service: {{.Service.Name}}
type: Opaque
data:
  {{ range env .SystemEnv .Service.EnvironmentDefaults .Env }}
  {{.Key}}: {{ safe (base64 .Value) }}
  {{ end }}
---
apiVersion: apps/v1
kind: {{ if .Service.Agent.Enabled }} DaemonSet {{ else }} Deployment {{ end }}
metadata:
  namespace: {{.Namespace}}
  name: {{.Service.Name}}
  annotations:
    atom.conditions: Available=True,Progressing=True/NewReplicaSetAvailable
  labels:
    app: {{.App.Name}}
    type: service
    service: {{.Service.Name}}
spec:
  selector:
    matchLabels:
      system: convox
      rack: {{.Rack}}
      app: {{.App.Name}}
      service: {{.Service.Name}}
  {{ if not .Service.Agent.Enabled }}
  replicas: {{.Replicas}}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: "{{.MaxSurge}}%"
      maxUnavailable: "{{.MaxUnavailable}}%"
  {{ end }}
  minReadySeconds: 1
  revisionHistoryLimit: 1
  template:
    metadata:
      {{ if .Service.Agent.Enabled }}
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
      {{ end }}
      labels:
        system: convox
        rack: {{.Rack}}
        app: {{.App.Name}}
        name: {{.Service.Name}}
        service: {{.Service.Name}}
        release: {{.Release.Id}}
        type: service
    spec:
      {{ with .Resolver }}
      dnsPolicy: "None"
      dnsConfig:
        nameservers:
          - "{{ . }}"
      {{ end }}
      {{ if .Service.Agent.Ports }}
      hostNetwork: true
      {{ end }}
      shareProcessNamespace: {{.Service.Init}}
      containers:
      - name: main
        {{ with .Service.Command }}
        args:
        {{ range shellsplit . }}
          - {{ safe . }}
        {{ end }}
        {{ end }}
        env:
        {{ range .Service.Links }}
        - name: {{ envname . }}_URL
          value: https://{{.}}.{{$.App.Name}}.{{$.Rack}}
        {{ end }}
        {{ range .Service.Resources }}
        - name: {{ envname . }}_URL
          valueFrom:
            configMapKeyRef:
              name: resource-{{.}}
              key: URL
        {{ end }}
        envFrom:
        - secretRef:
            name: env-{{.Service.Name}}
        image: {{ image .App .Service .Release }}
        imagePullPolicy: IfNotPresent
        {{ with .Service.Port.Port }}
        readinessProbe:
          httpGet:
            path: "{{$.Service.Health.Path}}"
            port: {{.}}
            scheme: "{{ upper $.Service.Port.Scheme }}"
          initialDelaySeconds: {{$.Service.Health.Grace}}
          periodSeconds: {{$.Service.Health.Interval}}
          timeoutSeconds: {{$.Service.Health.Timeout}}
          successThreshold: 1
          failureThreshold: 3
        {{ end }}
        ports:
        {{ with .Service.Port.Port }}
          - containerPort: {{.}}
        {{ end }}
        {{ if .Service.Agent.Enabled }}
        {{ range .Service.Agent.Ports }}
          - containerPort: {{.Port}}
            hostPort: {{.Port}}
            protocol: {{ upper .Protocol }}
        {{ end }}
        {{ end }}
        resources:
          requests:
            {{ with .Service.Scale.Cpu }}
            cpu: "{{.}}m"
            {{ end }}
            {{ with .Service.Scale.Memory }}
            memory: "{{.}}Mi"
            {{ end }}
        volumeMounts:
        - name: ca
          mountPath: /etc/convox
        {{ range .Service.Volumes }}
        - name: {{ volumeName $.App.Name (volumeFrom $.App.Name $.Service.Name .) }}
          mountPath: "{{ volumeTo . }}" 
        {{ end }}
      volumes:
      - name: ca
        configMap:
          name: ca
          optional: true
      {{ range (volumeSources $.App.Name .Service.Name .Service.Volumes) }}
      - name: {{ volumeName $.App.Name . }}
        {{ if systemVolume . }}
        hostPath:
          path: "{{.}}"
        {{ else }}
        persistentVolumeClaim:
          claimName: {{ volumeName $.App.Name . }}
        {{ end }}
      {{ end }}
{{ if not (eq .Service.Scale.Count.Min .Service.Scale.Count.Max) }}
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  namespace: {{.Namespace}}
  name: {{.Service.Name}}
  labels:
    service: {{.Service.Name}}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{.Service.Name}}
  minReplicas: {{.Service.Scale.Count.Min}}
  maxReplicas: {{.Service.Scale.Count.Max}}
  metrics:
  {{ with .Service.Scale.Targets.Cpu }}
  - type: Resource
    resource:
      name: cpu
      targetAverageUtilization: {{.}}
  {{ end }}
  {{ with .Service.Scale.Targets.Memory }}
  - type: Resource
    resource:
      name: memory
      targetAverageUtilization: {{.}}
  {{ end }}
{{ end }}
