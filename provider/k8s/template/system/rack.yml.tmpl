apiVersion: v1
kind: Namespace
metadata:
  name: ==RACK==
  labels:
    type: rack
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  namespace: ==RACK==
  name: rack
rules:
  - apiGroups: [ "*" ]
    resources: [ "*" ]
    verbs: [ "*" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  namespace: ==RACK==
  name: rack
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: rack
subjects:
  - kind: ServiceAccount
    name: rack
    namespace: ==RACK==
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: ==RACK==
  name: rack
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: ==RACK==
  name: api
  annotations:
    atom.conditions: Available=True,Progressing=True/NewReplicaSetAvailable
  labels:
    app: rack
    service: api
spec:
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      system: convox
      rack: ==RACK==
      app: rack
      service: api
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  minReadySeconds: 3
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
      labels:
        system: convox
        rack: ==RACK==
        app: rack
        service: api
        type: service
        name: api
    spec:
      shareProcessNamespace: true
      containers:
      - name: main
        args:
        - rack
        env:
        - name: DATA
          value: /data
        - name: DEVELOPMENT
          value: "false"
        - name: IMAGE
          value: convox/rack:{{.Version}}
        - name: RACK
          value: ==RACK==
        - name: VERSION
          value: "{{.Version}}"
        envFrom:
        - configMapRef:
            name: env-api
        image: convox/rack:{{.Version}}
        livenessProbe:
          httpGet:
            path: "/check"
            port: 5443
            scheme: "HTTPS"
          failureThreshold: 3
          initialDelaySeconds: 15
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: "/check"
            port: 5443
            scheme: "HTTPS"
          periodSeconds: 5
          timeoutSeconds: 3
        ports:
        - containerPort: 5443
        volumeMounts:
        - name: data
          mountPath: /data
        - name: docker
          mountPath: /var/run/docker.sock
      serviceAccountName: rack
      volumes:
      - name: data
        hostPath:
          path: /var/rack/==RACK==
          type: DirectoryOrCreate
      - name: docker
        hostPath:
          path: ==SOCKET==
---
apiVersion: v1
kind: Service
metadata:
  namespace: ==RACK==
  name: api
  annotations:
    convox.service.ports.5443.protocol: https
  labels:
    app: rack
    service: api
spec:
  type: NodePort
  ports:
  - name: https
    port: 5443
    targetPort: 5443
    protocol: TCP
  selector:
    system: convox
    rack: ==RACK==
    app: rack
    service: api
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  namespace: ==RACK==
  name: rack
  annotations:
    convox.idles: "true"
    convox.ingress.service.api.5443.protocol: https
spec:
  tls:
  - hosts:
    - ==HOST==
  rules:
    - host: ==HOST==
      http:
        paths:
        - backend:
            serviceName: api
            servicePort: 5443
