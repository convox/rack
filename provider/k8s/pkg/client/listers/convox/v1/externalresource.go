/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/convox/rack/provider/k8s/pkg/apis/convox/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ExternalResourceLister helps list ExternalResources.
type ExternalResourceLister interface {
	// List lists all ExternalResources in the indexer.
	List(selector labels.Selector) (ret []*v1.ExternalResource, err error)
	// ExternalResources returns an object that can list and get ExternalResources.
	ExternalResources(namespace string) ExternalResourceNamespaceLister
	ExternalResourceListerExpansion
}

// externalResourceLister implements the ExternalResourceLister interface.
type externalResourceLister struct {
	indexer cache.Indexer
}

// NewExternalResourceLister returns a new ExternalResourceLister.
func NewExternalResourceLister(indexer cache.Indexer) ExternalResourceLister {
	return &externalResourceLister{indexer: indexer}
}

// List lists all ExternalResources in the indexer.
func (s *externalResourceLister) List(selector labels.Selector) (ret []*v1.ExternalResource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ExternalResource))
	})
	return ret, err
}

// ExternalResources returns an object that can list and get ExternalResources.
func (s *externalResourceLister) ExternalResources(namespace string) ExternalResourceNamespaceLister {
	return externalResourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ExternalResourceNamespaceLister helps list and get ExternalResources.
type ExternalResourceNamespaceLister interface {
	// List lists all ExternalResources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.ExternalResource, err error)
	// Get retrieves the ExternalResource from the indexer for a given namespace and name.
	Get(name string) (*v1.ExternalResource, error)
	ExternalResourceNamespaceListerExpansion
}

// externalResourceNamespaceLister implements the ExternalResourceNamespaceLister
// interface.
type externalResourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ExternalResources in the indexer for a given namespace.
func (s externalResourceNamespaceLister) List(selector labels.Selector) (ret []*v1.ExternalResource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ExternalResource))
	})
	return ret, err
}

// Get retrieves the ExternalResource from the indexer for a given namespace and name.
func (s externalResourceNamespaceLister) Get(name string) (*v1.ExternalResource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("externalresource"), name)
	}
	return obj.(*v1.ExternalResource), nil
}
