/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	convoxv1 "github.com/convox/rack/provider/k8s/pkg/apis/convox/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeExternalResources implements ExternalResourceInterface
type FakeExternalResources struct {
	Fake *FakeConvoxV1
	ns   string
}

var externalresourcesResource = schema.GroupVersionResource{Group: "convox.com", Version: "v1", Resource: "externalresources"}

var externalresourcesKind = schema.GroupVersionKind{Group: "convox.com", Version: "v1", Kind: "ExternalResource"}

// Get takes name of the externalResource, and returns the corresponding externalResource object, and an error if there is any.
func (c *FakeExternalResources) Get(name string, options v1.GetOptions) (result *convoxv1.ExternalResource, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(externalresourcesResource, c.ns, name), &convoxv1.ExternalResource{})

	if obj == nil {
		return nil, err
	}
	return obj.(*convoxv1.ExternalResource), err
}

// List takes label and field selectors, and returns the list of ExternalResources that match those selectors.
func (c *FakeExternalResources) List(opts v1.ListOptions) (result *convoxv1.ExternalResourceList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(externalresourcesResource, externalresourcesKind, c.ns, opts), &convoxv1.ExternalResourceList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &convoxv1.ExternalResourceList{ListMeta: obj.(*convoxv1.ExternalResourceList).ListMeta}
	for _, item := range obj.(*convoxv1.ExternalResourceList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested externalResources.
func (c *FakeExternalResources) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(externalresourcesResource, c.ns, opts))

}

// Create takes the representation of a externalResource and creates it.  Returns the server's representation of the externalResource, and an error, if there is any.
func (c *FakeExternalResources) Create(externalResource *convoxv1.ExternalResource) (result *convoxv1.ExternalResource, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(externalresourcesResource, c.ns, externalResource), &convoxv1.ExternalResource{})

	if obj == nil {
		return nil, err
	}
	return obj.(*convoxv1.ExternalResource), err
}

// Update takes the representation of a externalResource and updates it. Returns the server's representation of the externalResource, and an error, if there is any.
func (c *FakeExternalResources) Update(externalResource *convoxv1.ExternalResource) (result *convoxv1.ExternalResource, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(externalresourcesResource, c.ns, externalResource), &convoxv1.ExternalResource{})

	if obj == nil {
		return nil, err
	}
	return obj.(*convoxv1.ExternalResource), err
}

// Delete takes name of the externalResource and deletes it. Returns an error if one occurs.
func (c *FakeExternalResources) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(externalresourcesResource, c.ns, name), &convoxv1.ExternalResource{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeExternalResources) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(externalresourcesResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &convoxv1.ExternalResourceList{})
	return err
}

// Patch applies the patch and returns the patched externalResource.
func (c *FakeExternalResources) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *convoxv1.ExternalResource, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(externalresourcesResource, c.ns, name, data, subresources...), &convoxv1.ExternalResource{})

	if obj == nil {
		return nil, err
	}
	return obj.(*convoxv1.ExternalResource), err
}
