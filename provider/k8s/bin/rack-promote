#!/bin/sh

set -e

rack=$1
version=$2

[ "$rack" == "" ] && echo "rack required" && exit 1
[ "$version" == "" ] && echo "version required" && exit 1

kubectl apply -f - <<EOF
apiVersion: v1
kind: Namespace
metadata:
  name: $rack
  labels:
    system: convox
    type: rack
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  namespace: $rack
  name: rack
  labels:
    system: convox
    rack: $rack
rules:
  - apiGroups:
      - ""
      - apps
      - autoscaling
      - extensions
    resources:
      - autoscaling
      - configmaps
      - daemonsets
      - deployments
      - endpoints
      - events
      - horizontalpodautoscalers
      - ingresses
      - ingresses/status
      - namespaces
      - pods
      - pods/exec
      - secrets
      - services
    verbs:
      - create
      - delete
      - get
      - list
      - update
      - watch
      - patch
  - apiGroups:
      - convox.com
    resources:
      - builds
      - releases
    verbs:
      - create
      - delete
      - get
      - list
      - update
      - watch
      - patch
  - apiGroups:
      - ""
      - apps
      - batch
      - extensions
    resources:
      - cronjobs
      - daemonsets
      - jobs
      - nodes
      - persistentvolumeclaims
      - persistentvolumes
      - pods/log
      - replicasets
      - replicationcontrollers
      - secrets
      - statefulsets
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  namespace: $rack
  name: rack
  labels:
    system: convox
    rack: $rack
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: rack
subjects:
  - kind: ServiceAccount
    name: rack
    namespace: $rack
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: $rack
  name: rack
  labels:
    system: convox
    rack: $rack
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: $rack
  name: web
  labels:
    system: convox
    rack: $rack
    app: system
    service: web
spec:
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      system: convox
      rack: $rack
      app: system
      service: web
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  minReadySeconds: 10
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
      labels:
        system: convox
        rack: $rack
        app: system
        service: web
    spec:
      shareProcessNamespace: true
      containers:
      - name: main
        args:
        - bin/web
        env:
        - name: DATA
          value: /data
        - name: DEVELOPMENT
          value: "false"
        - name: IMAGE
          value: convox/rack:$version
        - name: RACK
          value: $rack
        - name: VERSION
          value: "$version"
        envFrom:
        - configMapRef:
            name: env-web
        image: convox/rack:$version
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: "/check"
            port: 5443
            scheme: "HTTPS"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: "/check"
            port: 5443
            scheme: "HTTPS"
          initialDelaySeconds: 5
          periodSeconds: 30
          timeoutSeconds: 3
        ports:
        - containerPort: 5443
        volumeMounts:
        - name: data
          mountPath: /data
        - name: docker
          mountPath: /var/run/docker.sock
      serviceAccountName: rack
      volumes:
      - name: data
        hostPath:
          path: /var/rack/$rack
          type: DirectoryOrCreate
      - name: docker
        hostPath:
          path: /var/run/docker.sock
---
apiVersion: v1
kind: Service
metadata:
  namespace: $rack
  name: web
  annotations:
    convox.service.ports.5443.protocol: https
  labels:
    system: convox
    rack: $rack
    app: system
    service: web
spec:
  type: NodePort
  ports:
  - name: https
    port: 5443
    targetPort: 5443
    protocol: TCP
  selector:
    system: convox
    rack: $rack
    app: system
    service: web
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  namespace: $rack
  name: system
  annotations:
    convox.ingress.service.web.5443.protocol: https
  labels:
    system: convox
    rack: $rack
    app: system
spec:
  tls:
  - hosts:
    - rack
  rules:
    - host: rack
      http:
        paths:
        - backend:
            serviceName: web
            servicePort: 5443
EOF

# custom resources
kubectl apply -f - <<EOF
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: builds.convox.com
spec:
  group: convox.com
  versions:
    - name: v1
      served: true
      storage: true
  version: v1
  scope: Namespaced
  names:
    plural: builds
    singular: build
    kind: Build
    categories:
    - convox
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: releases.convox.com
spec:
  group: convox.com
  versions:
    - name: v1
      served: true
      storage: true
  version: v1
  scope: Namespaced
  names:
    plural: releases
    singular: release
    kind: Release
    categories:
    - convox
EOF

# metrics-server
kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: metrics-server:system:auth-delegator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: metrics-server-auth-reader
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: kube-system
---
apiVersion: apiregistration.k8s.io/v1beta1
kind: APIService
metadata:
  name: v1beta1.metrics.k8s.io
spec:
  service:
    name: metrics-server
    namespace: kube-system
  group: metrics.k8s.io
  version: v1beta1
  insecureSkipTLSVerify: true
  groupPriorityMinimum: 100
  versionPriority: 100
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: metrics-server
  namespace: kube-system
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: metrics-server
  namespace: kube-system
  labels:
    k8s-app: metrics-server
spec:
  selector:
    matchLabels:
      k8s-app: metrics-server
  template:
    metadata:
      name: metrics-server
      labels:
        k8s-app: metrics-server
    spec:
      serviceAccountName: metrics-server
      volumes:
      # mount in tmp so we can safely use from-scratch images and/or read-only containers
      - name: tmp-dir
        emptyDir: {}
      containers:
      - name: metrics-server
        image: k8s.gcr.io/metrics-server-amd64:v0.3.0
        imagePullPolicy: Always
        volumeMounts:
        - name: tmp-dir
          mountPath: /tmp
---
apiVersion: v1
kind: Service
metadata:
  name: metrics-server
  namespace: kube-system
  labels:
    kubernetes.io/name: "Metrics-server"
spec:
  selector:
    k8s-app: metrics-server
  ports:
  - port: 443
    protocol: TCP
    targetPort: 443
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: system:metrics-server
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - nodes
  - nodes/stats
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - "extensions"
  resources:
  - deployments
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system:metrics-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:metrics-server
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: kube-system
EOF

echo "promoted: $version"
