// Code generated by go-bindata.
// sources:
// appinit/templates/Dockerfile
// appinit/templates/dockerignore
// appinit/templates/entrypoint.sh
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _appinitTemplatesDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x50\xcb\x6a\xeb\x30\x14\xdc\xeb\x2b\x86\x10\xb2\xb9\x37\xd6\x3e\x90\x55\xeb\xd2\x50\x62\x07\x93\xb6\x84\xd2\x85\x2c\x9f\x5a\xc2\xb6\x24\x1c\x39\x34\x08\xfd\x7b\xb1\x1d\xba\x68\xa1\xab\xf3\x60\x1e\xcc\x3c\x14\xf9\x1e\x8a\x7a\xdb\x0c\x5c\x52\x25\x7a\xc6\x8a\xe7\x0c\xb2\x02\xf7\x9d\xc3\x6a\x85\x5a\x7b\xc8\xd6\x1a\x82\xf2\xde\x9d\x37\x9c\xd7\xda\xab\xa1\x4c\xa4\xed\xf8\x8d\x39\x8f\x75\x39\xe8\xb6\x72\x42\x36\xeb\x10\x90\x34\xda\x54\x88\x91\x85\x00\xfd\x81\x84\xcc\x45\xf7\xd6\x74\x64\xfc\xf8\x4d\xb3\x17\x84\x80\x5e\x98\x9a\xb0\x6c\xe8\xfa\x1f\xcb\x8b\x68\x07\xc2\x66\xfb\x13\x1c\xc2\x84\x40\x8c\xdb\x71\x9d\x61\x31\x8e\x7c\xfa\xf6\xb8\x6d\xa3\xee\x63\xbe\x4f\xb7\x5c\x38\xc7\x5e\xf3\xe2\xe9\x7e\x57\x60\x3a\xd8\x5d\x7e\x38\x21\x99\x8f\x29\xa5\xea\x6c\x85\x7f\x9f\xd3\x87\x93\xf1\xfd\xd5\x59\x6d\x7c\x72\x56\x73\x0d\x63\x07\x7f\x86\xe3\xa5\x36\x5c\xda\xce\xe9\x96\x26\x95\x99\x22\x85\x54\xc4\x58\x9a\x1d\x8b\xd3\x21\xdf\x65\x47\xbc\x2d\x7e\x7b\x2c\xde\xd9\x57\x00\x00\x00\xff\xff\xc9\x82\x37\x26\x7f\x01\x00\x00")

func appinitTemplatesDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_appinitTemplatesDockerfile,
		"appinit/templates/Dockerfile",
	)
}

func appinitTemplatesDockerfile() (*asset, error) {
	bytes, err := appinitTemplatesDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appinit/templates/Dockerfile", size: 383, mode: os.FileMode(420), modTime: time.Unix(1475420665, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appinitTemplatesDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\x4b\xce\xcf\x2b\xcb\xaf\xe0\xd2\x4b\xcd\x2b\xe3\xd2\x4b\xcf\x2c\x01\x13\x99\xe9\x79\xf9\x45\xa9\x5c\x5c\xd5\xd5\x0a\x99\x69\x0a\x7a\x10\xae\x5b\x66\x4e\x6a\xb1\x42\x6d\x2d\x48\xb4\x28\x31\x2f\x3d\x55\x41\x25\x2d\x33\x27\x55\xc1\xca\x16\x5d\x45\x75\x35\x54\xaa\xb6\x56\xa1\xba\x5a\x21\x35\x2f\x05\xaa\x0d\xca\x02\x04\x00\x00\xff\xff\xc9\x75\xf6\x46\x75\x00\x00\x00")

func appinitTemplatesDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_appinitTemplatesDockerignore,
		"appinit/templates/dockerignore",
	)
}

func appinitTemplatesDockerignore() (*asset, error) {
	bytes, err := appinitTemplatesDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appinit/templates/dockerignore", size: 117, mode: os.FileMode(420), modTime: time.Unix(1475420665, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appinitTemplatesEntrypointSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\xcd\xb1\x0a\xc2\x30\x14\x05\xd0\xd9\xf7\x15\xd7\x34\x93\xd0\xc6\xbd\x8b\x8b\xe0\x22\x7e\x80\x38\xd8\xf6\x3e\xfb\x20\x24\x92\x44\xf0\xf3\x45\x10\x1c\xcf\x74\xba\x6d\x98\x2c\x85\xe9\x5e\x57\xa9\x6c\xe8\x29\xa2\xb9\x40\x61\x09\xfe\x74\x39\x1f\xc3\xf0\x2c\x59\x2d\x72\x58\xc2\x6e\xc4\x92\x51\xf3\xab\xcc\x84\xd7\xaf\x12\x45\x4c\x71\x85\xf3\x9d\x43\xff\x68\xd8\xe3\x36\xa2\xad\x4c\xb2\xe1\x9b\x33\x9c\x3f\x38\x61\xac\xfc\xf9\x1f\xaa\xc9\x27\x00\x00\xff\xff\x90\xc3\x44\xab\x80\x00\x00\x00")

func appinitTemplatesEntrypointShBytes() ([]byte, error) {
	return bindataRead(
		_appinitTemplatesEntrypointSh,
		"appinit/templates/entrypoint.sh",
	)
}

func appinitTemplatesEntrypointSh() (*asset, error) {
	bytes, err := appinitTemplatesEntrypointShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appinit/templates/entrypoint.sh", size: 128, mode: os.FileMode(420), modTime: time.Unix(1475420665, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"appinit/templates/Dockerfile": appinitTemplatesDockerfile,
	"appinit/templates/dockerignore": appinitTemplatesDockerignore,
	"appinit/templates/entrypoint.sh": appinitTemplatesEntrypointSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"appinit": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"Dockerfile": &bintree{appinitTemplatesDockerfile, map[string]*bintree{}},
			"dockerignore": &bintree{appinitTemplatesDockerignore, map[string]*bintree{}},
			"entrypoint.sh": &bintree{appinitTemplatesEntrypointSh, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

