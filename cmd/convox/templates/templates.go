// Code generated by go-bindata.
// sources:
// templates/buildpack/.dockerignore
// templates/buildpack/Dockerfile
// templates/buildpack/entrypoint.sh
// templates/django/.dockerignore
// templates/django/Dockerfile
// templates/django/docker-compose.yml
// templates/python/.dockerignore
// templates/python/Dockerfile
// templates/python/docker-compose.yml
// templates/rails/.dockerignore
// templates/rails/Dockerfile
// templates/rails/docker-compose.yml
// templates/ruby/.dockerignore
// templates/ruby/Dockerfile
// templates/ruby/docker-compose.yml
// templates/sinatra/.dockerignore
// templates/sinatra/Dockerfile
// templates/sinatra/docker-compose.yml
// templates/unknown/.dockerignore
// templates/unknown/Dockerfile
// templates/unknown/docker-compose.yml
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _buildpackDockerignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\x4b\xce\xcf\x2b\xcb\xaf\xe0\xd2\x4b\xcd\x2b\xe3\xd2\x4b\xcf\x2c\x01\x13\x99\xe9\x79\xf9\x45\xa9\x5c\x80\x00\x00\x00\xff\xff\x57\x31\x5f\xce\x1d\x00\x00\x00")

func buildpackDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_buildpackDockerignore,
		"buildpack/.dockerignore",
	)
}

func buildpackDockerignore() (*asset, error) {
	bytes, err := buildpackDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "buildpack/.dockerignore", size: 29, mode: os.FileMode(420), modTime: time.Unix(1475420665, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _buildpackDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x50\xbb\x6a\xc3\x30\x14\xdd\xf5\x15\x97\x10\xb2\xb4\xb1\xf6\x40\xa6\xd6\xa5\xa1\xc4\x0e\x26\x6d\x09\xa5\x83\x2c\xdf\x58\xc2\xd6\x03\x45\x4e\x1b\x84\xfe\xbd\xd8\xf2\xd4\x0e\x9d\xee\x83\xf3\xe0\x9c\xa7\xaa\xdc\x83\x40\x67\xba\x81\x72\x6c\x98\x23\xa4\x7a\x2d\x80\x37\x40\xbd\xb2\xb0\x5a\x41\x2b\x3d\xf0\xde\x68\x04\xe1\xbd\xbd\x6c\x28\x6d\xa5\x17\x43\x9d\x71\xa3\xe8\xcc\x4c\x63\x5d\x0f\xb2\x6f\x2c\xe3\xdd\x3a\x04\xc8\xce\x8e\x29\xfc\x32\xae\x83\x18\x49\x08\x20\xcf\x90\xa1\xbe\x4a\x67\xb4\x42\xed\xc7\x6f\x5e\xbc\x41\x08\xe0\x98\x6e\x11\x96\x1d\xde\xee\x61\x79\x65\xfd\x80\xb0\xd9\xfe\x06\x87\x30\x21\x20\xc6\xed\xb8\x26\x58\x8c\x23\x1f\x75\x33\x7b\xcc\xdb\xa8\xfb\x5c\xee\xf3\x2d\x65\xd6\x92\xf7\xb2\x7a\x79\xdc\x55\x30\x1d\xe4\xa1\x3c\x9c\x20\x4b\xc7\x14\x55\x28\xd3\xc0\xdd\xf7\xf4\xa1\xa8\xbd\xbb\x59\x23\xb5\xcf\x2e\x22\x75\x31\x16\xf1\x7f\x42\x5a\x4b\x4d\xb9\x51\x56\xf6\x38\x49\x25\x1e\x67\x5c\x20\x21\x79\x71\xac\x4e\x87\x72\x57\x1c\xe1\x63\xf1\xd7\x68\xf1\x49\x7e\x02\x00\x00\xff\xff\x17\xd6\xcb\x56\x89\x01\x00\x00")

func buildpackDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_buildpackDockerfile,
		"buildpack/Dockerfile",
	)
}

func buildpackDockerfile() (*asset, error) {
	bytes, err := buildpackDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "buildpack/Dockerfile", size: 393, mode: os.FileMode(420), modTime: time.Unix(1475420665, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _buildpackEntrypointSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcd\xb1\x0a\xc2\x30\x14\x05\xd0\xd9\xf7\x15\xd7\x34\x93\xd0\xc6\xbd\x8b\x8b\xe0\x22\x7e\x80\x38\xd8\xf6\x3e\xfb\x20\x24\x92\x44\xf0\xf3\x45\x10\x1c\xcf\x74\xba\x6d\x98\x2c\x85\xe9\x5e\x57\xa9\x6c\xe8\x29\xa2\xb9\x40\x61\x09\xfe\x74\x39\x1f\xc3\xf0\x2c\x59\x2d\x72\x58\xc2\x6e\xc4\x92\x51\xf3\xab\xcc\x84\xd7\xaf\x12\x45\x4c\x71\x85\xf3\x9d\x43\xff\x68\xd8\xe3\x36\xa2\xad\x4c\xb2\xe1\x9b\x33\x9c\x3f\x38\x61\xac\xfc\xf9\x1f\xaa\xc9\x27\x00\x00\xff\xff\x90\xc3\x44\xab\x80\x00\x00\x00")

func buildpackEntrypointShBytes() ([]byte, error) {
	return bindataRead(
		_buildpackEntrypointSh,
		"buildpack/entrypoint.sh",
	)
}

func buildpackEntrypointSh() (*asset, error) {
	bytes, err := buildpackEntrypointShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "buildpack/entrypoint.sh", size: 128, mode: os.FileMode(420), modTime: time.Unix(1475420665, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _djangoDockerignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\x4b\xce\xcf\x2b\xcb\xaf\xe0\xd2\x4b\xcd\x2b\xe3\xd2\x4b\xcf\x2c\x01\x13\x99\xe9\x79\xf9\x45\xa9\x5c\x80\x00\x00\x00\xff\xff\x57\x31\x5f\xce\x1d\x00\x00\x00")

func djangoDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_djangoDockerignore,
		"django/.dockerignore",
	)
}

func djangoDockerignore() (*asset, error) {
	bytes, err := djangoDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "django/.dockerignore", size: 29, mode: os.FileMode(420), modTime: time.Unix(1475420665, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _djangoDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x41\x6f\xd4\x30\x10\x85\xef\xf9\x15\x4f\x2a\xd7\xdd\x3d\xf4\x17\x54\x4b\x38\x80\xe8\x46\x4b\x41\xea\x09\x19\x67\x36\x75\x71\x66\xcc\xd8\x86\x8d\x50\xff\x3b\xb2\xd3\xd0\x0d\x70\xe0\x96\x79\x33\xf3\xe6\xcb\xf3\x9b\xe3\xe1\x3d\xac\xf0\x77\x39\xef\xfa\x47\xc3\x83\x34\xcd\x15\x94\x82\x37\x96\x40\x67\x33\x06\x4f\x26\x04\x18\xee\x97\x32\xa8\x3c\x92\x4d\x48\x82\x64\x9c\x17\x45\x7a\x20\xb8\xd1\x0c\x54\xb4\x49\xb2\xe2\x79\xa6\xb9\x42\x77\x3c\xbc\x6d\xf7\x77\x70\x11\xc6\x47\x41\x8e\xd4\xe3\xcb\x84\x21\xb3\xb3\xa2\x0c\xc7\x75\x7f\x05\x81\xd7\x62\xbf\x92\x9e\x9c\xa7\xa6\xbd\xfd\x84\x9b\xae\xbb\x80\xa9\xd2\xe2\xbb\x86\x2a\xf4\x86\x41\x63\x48\x13\x3e\xb4\xfb\x63\x7b\xf7\xf9\x5d\x7b\x8f\x3e\xab\xe3\x01\xa3\x61\x33\xd0\x36\x4c\xb0\x32\x8e\x86\xfb\x88\x1f\xce\x7b\x28\xc5\xec\x53\x41\x29\xcb\xaa\xa2\xf5\xc6\x85\xc1\x49\x6a\x32\x56\xc2\x04\x61\x3f\x55\xe6\xc2\x17\xc1\x44\x3d\xf5\x38\x89\x22\xb8\x00\xc7\x31\x19\xef\x9b\xfd\xa1\xbb\x87\xd2\xb7\xec\x94\x46\xe2\x14\xb7\xe9\x9c\xb0\x33\x21\xec\xfe\x54\x9b\xe3\xc7\xdb\xb2\x7b\xbd\x2c\x63\xb3\xc9\x61\x50\xd3\x53\x91\xff\xd1\xd6\xbf\x9c\xff\x83\xce\x8a\xf7\x64\x53\x4c\x26\x39\x3b\xf3\xbd\xfa\x79\xd3\x75\x4f\xbb\x59\x9a\xe1\x56\xd2\x32\xf5\x9c\xf6\xd3\x32\xb2\xd4\x73\xff\x25\xd6\xda\xfe\x5d\xce\xe0\x53\x7a\x10\xbe\x5e\x65\x7f\xc1\x81\xcd\x86\xc5\x71\xc8\x2f\x7f\x50\xe0\x95\x62\x82\x9c\xea\x77\x79\xf2\x7a\x67\x5b\xfd\x9b\x5f\x01\x00\x00\xff\xff\x22\xcb\xe6\x65\xb5\x02\x00\x00")

func djangoDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_djangoDockerfile,
		"django/Dockerfile",
	)
}

func djangoDockerfile() (*asset, error) {
	bytes, err := djangoDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "django/Dockerfile", size: 693, mode: os.FileMode(420), modTime: time.Unix(1475420665, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _djangoDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\xc1\x4a\xc6\x30\x10\x84\xef\x79\x8a\xe5\xbf\x1b\xe3\xdf\x08\x12\xe8\x49\x7a\xf2\xa6\x5e\x3c\x49\xd2\x2e\x25\x98\x66\x4b\x36\x8d\xf5\xed\xa5\x8d\xd4\x1e\xc4\xd3\x32\xf3\xcd\xcc\x16\x4c\xec\x29\x1a\xb8\x5c\x2f\x82\x31\x15\xdf\x23\x1b\x01\xf0\x89\x6e\x3b\x00\x6e\xf1\x61\x30\x20\x77\x81\xb1\xf8\x44\x71\xc2\x98\x2b\x05\xb8\x81\x97\xee\xf1\xb9\x7b\x7d\x7f\xea\xde\x76\x2b\x58\x87\x81\x7f\x71\x4f\xb1\xd0\x2a\x67\x4a\x59\x6a\xdd\xc8\x39\x51\xa6\x9e\x42\x9b\x03\xff\x17\x5a\xbf\xda\x9c\x16\xac\x9b\x3e\x7e\x9c\x26\x07\x9b\xad\xb3\x5c\xd9\xd6\x39\xb1\x07\x65\xb4\x52\xea\xd0\x5a\x37\x9b\x71\x27\xe0\xa8\xd5\xb0\x9f\xec\x88\xe6\xe7\xf3\xed\x4c\x9c\xc7\x84\xfc\xd7\xe4\xbd\x6e\xae\xe2\x3b\x00\x00\xff\xff\x7d\xb0\x3e\x2b\x2a\x01\x00\x00")

func djangoDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_djangoDockerComposeYml,
		"django/docker-compose.yml",
	)
}

func djangoDockerComposeYml() (*asset, error) {
	bytes, err := djangoDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "django/docker-compose.yml", size: 298, mode: os.FileMode(420), modTime: time.Unix(1475420665, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pythonDockerignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\x4b\xce\xcf\x2b\xcb\xaf\xe0\xd2\x4b\xcd\x2b\xe3\xd2\x4b\xcf\x2c\x01\x13\x99\xe9\x79\xf9\x45\xa9\x5c\x5a\x7a\x05\x95\xc9\x5c\x5a\x7a\xc5\xe5\x05\x5c\x80\x00\x00\x00\xff\xff\x1d\x2d\x61\xab\x29\x00\x00\x00")

func pythonDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_pythonDockerignore,
		"python/.dockerignore",
	)
}

func pythonDockerignore() (*asset, error) {
	bytes, err := pythonDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "python/.dockerignore", size: 41, mode: os.FileMode(420), modTime: time.Unix(1475420665, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pythonDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xce\x4f\x4b\x23\x41\x10\x05\xf0\x7b\x7f\x8a\xb7\x93\xeb\x66\x72\x08\xec\x61\xaf\x09\xcb\x8a\x24\x91\x01\x11\x11\x0f\x6d\x77\x8d\xd3\xd8\xd3\x55\x56\xd7\x30\xe6\xdb\x4b\x0c\x28\xf8\xe7\xf6\xea\x15\xfc\xaa\xfe\x75\x87\x1d\xe4\x68\x03\x97\xbf\xeb\xf6\x8f\x73\x0b\xa4\x52\xcd\xe7\x8c\x48\x42\x25\x52\x09\x89\x2a\xfa\xa4\xd5\xd0\xb3\xa2\xf7\xd5\x48\xa1\xf4\x30\xa5\x1c\xab\xdb\x1c\xae\x6e\xa1\xf4\x3c\x25\xa5\x91\x8a\xd5\xd6\x5e\x0c\x2b\x1b\x65\xf5\xb9\x75\xdd\xf5\x1e\x92\x64\xfd\x7e\x63\xb9\x9c\xe4\x51\x7d\xa4\x53\xfd\xcd\x5a\x7f\x80\xdc\x02\x81\xe5\x08\x1b\x08\x4a\xd5\xc0\xfd\x5b\xf6\x22\xe7\x87\x5a\xac\x4e\xf9\xe6\xd0\x5d\x6e\x2f\xba\xf3\xf0\x85\x6f\x4f\x4e\x47\x92\x7d\x20\xcc\xc9\x06\x1c\x79\x52\xf0\x5c\x10\x78\x1c\x7d\x89\x6e\xb3\xdb\xe2\xae\xa1\x30\x70\xf3\x1b\xcd\x7f\xca\x99\x31\xb3\xe6\xf8\x0b\x7b\x9e\x31\x49\xf4\x46\xb0\x21\x55\x6c\x39\x3c\x91\xf6\x29\x13\x8c\xa1\x53\xf9\xd0\xbc\x48\x4e\xc1\x5b\xe2\xd2\x36\xf7\xee\x35\x00\x00\xff\xff\x06\x52\xca\x78\x75\x01\x00\x00")

func pythonDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_pythonDockerfile,
		"python/Dockerfile",
	)
}

func pythonDockerfile() (*asset, error) {
	bytes, err := pythonDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "python/Dockerfile", size: 373, mode: os.FileMode(420), modTime: time.Unix(1475420665, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pythonDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xc1\x0a\x83\x30\x0c\x86\xef\x3e\x45\xe8\x7d\x5d\xd1\x0a\x52\xf0\x61\xac\x06\x29\xeb\x8c\x24\xd5\xb9\xb7\x1f\x6a\x61\x1e\xc6\x4e\x49\xbe\xfc\x7c\xc9\x8a\x2c\x81\x26\x07\xaa\x54\x85\x20\xaf\xa1\x47\x71\x05\xc0\x0b\xfd\x5e\x00\xfc\x12\xe2\xe0\x40\x1f\x43\xec\x3c\x46\x39\x17\x00\x37\xe8\x69\x5a\x69\xd3\x33\x71\xd2\xd6\x56\x7a\x66\x4a\xd4\x53\x6c\x53\x94\x7f\xa1\xed\xdd\x26\x5e\xf0\x74\x86\xe9\x71\x51\x0e\xfe\x68\xf7\xf4\x85\xaa\xc6\xb8\xda\x18\xa3\xbe\xc4\xda\xca\x35\x19\x0d\xf9\xd9\xf0\xec\x46\x74\xf9\xe2\x7d\x26\x49\x23\xa3\xfc\x14\xd6\xb6\x2a\x55\xf1\x09\x00\x00\xff\xff\x52\x3d\xec\x7f\x00\x01\x00\x00")

func pythonDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_pythonDockerComposeYml,
		"python/docker-compose.yml",
	)
}

func pythonDockerComposeYml() (*asset, error) {
	bytes, err := pythonDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "python/docker-compose.yml", size: 256, mode: os.FileMode(420), modTime: time.Unix(1475420665, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _railsDockerignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\x4b\xce\xcf\x2b\xcb\xaf\xe0\xd2\x4b\xcd\x2b\xe3\xd2\x4b\xcf\x2c\xe1\x4a\x49\xd2\xd7\xd2\x2b\x2e\xcc\xc9\x2c\x49\x35\x46\xe1\xe8\x66\xe5\x97\x16\xe5\x25\xe6\x70\xe5\xe4\xa7\xeb\x6b\x71\x95\xe4\x16\x70\x01\x02\x00\x00\xff\xff\xa3\x7f\x13\x17\x46\x00\x00\x00")

func railsDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_railsDockerignore,
		"rails/.dockerignore",
	)
}

func railsDockerignore() (*asset, error) {
	bytes, err := railsDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rails/.dockerignore", size: 70, mode: os.FileMode(420), modTime: time.Unix(1475420665, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _railsDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xbd\x6e\x83\x40\x10\x84\xfb\x7b\x8a\x95\xe8\x4d\x9f\x36\x52\x52\x25\x8e\x90\x52\xa4\xf3\x79\x59\xf0\x85\x63\xf7\x74\x3f\x96\x79\xfb\x88\x3b\x08\xc6\x32\x15\x33\xdf\xc2\xcc\xbc\x35\xc7\x0f\x40\xe1\xab\xdc\x6a\xaf\x8d\x0d\x4a\x55\x80\xe2\x26\x10\xb6\x13\xc4\x0b\x41\x67\x2c\x05\x60\xa2\x96\x5a\xe8\xc4\xc3\x39\x71\x6b\x09\x0c\x87\xa8\xad\x55\x15\x24\x46\x19\x47\xe2\x98\xef\xaf\xc4\xad\xf8\x1a\x35\x5e\x08\xac\x61\x02\xd3\xc1\x24\x09\x4e\xcb\x87\x4e\xe3\xa0\x7b\x3a\xcd\xa6\x87\x9e\xc6\xa0\x5e\x8f\x5f\x3f\xf0\x4e\xe3\x9c\x05\xf9\xa9\xb5\x73\xf5\xe2\xec\xf0\xc1\x0a\x0e\x3b\x9c\x1d\x55\x41\xbe\xda\xa5\xe7\xab\x7b\x47\x35\xdf\x9f\x8f\xfd\xd7\xc1\xbf\x29\xc4\xe7\x83\x75\x08\x14\xc3\x8b\xf3\x84\x32\xba\xff\x42\x8d\x1e\x68\x29\x9c\x83\x56\x5d\x28\x0a\x77\xa6\xdf\xb6\x14\x5d\x98\x4b\x67\x6b\x70\x63\x45\x17\x36\xeb\x12\x58\xd8\xa6\xef\xcb\xd3\x8d\x10\xbc\x1e\xe8\x49\xb9\x75\xd0\xbc\xc5\x53\x88\x20\x5d\x7e\xd7\xce\x95\x88\x43\xfe\xb3\xfa\x0b\x00\x00\xff\xff\x3d\xf9\xb5\xe2\xfc\x01\x00\x00")

func railsDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_railsDockerfile,
		"rails/Dockerfile",
	)
}

func railsDockerfile() (*asset, error) {
	bytes, err := railsDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rails/Dockerfile", size: 508, mode: os.FileMode(420), modTime: time.Unix(1475420665, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _railsDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8c\x31\x0a\xc3\x30\x0c\x45\x77\x9f\x42\x64\xaf\x71\x1b\x0d\xc5\x90\xc3\xd4\xae\x06\x83\x88\x82\xe4\xb8\xe9\xed\x8b\x5d\x28\x9d\x32\x89\xf7\xf4\xf8\x8d\xd4\x8a\xac\x11\xa6\xdb\xe4\x8c\xb4\x95\x4c\x16\x1d\xc0\x8b\x52\x3f\x00\x69\x2f\xfc\x8c\xe0\x07\xf0\x23\x11\xdb\xf7\x01\x70\x81\x2c\x6b\x93\xc3\x6f\xa2\xd5\x23\xce\x7e\x53\xa9\x92\x85\x97\xca\x76\x16\x1d\xef\xa5\xea\x4e\x23\xe9\xfe\x6f\xf2\x1e\x22\x86\x10\x7e\x8c\x38\x77\x71\x75\x9f\x00\x00\x00\xff\xff\x84\xf7\xad\xb9\xab\x00\x00\x00")

func railsDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_railsDockerComposeYml,
		"rails/docker-compose.yml",
	)
}

func railsDockerComposeYml() (*asset, error) {
	bytes, err := railsDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rails/docker-compose.yml", size: 171, mode: os.FileMode(420), modTime: time.Unix(1475420665, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rubyDockerignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\x4b\xce\xcf\x2b\xcb\xaf\xe0\xd2\x4b\xcd\x2b\xe3\xd2\x4b\xcf\x2c\xe1\x02\x04\x00\x00\xff\xff\xfa\xe4\xeb\x58\x1a\x00\x00\x00")

func rubyDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_rubyDockerignore,
		"ruby/.dockerignore",
	)
}

func rubyDockerignore() (*asset, error) {
	bytes, err := rubyDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ruby/.dockerignore", size: 26, mode: os.FileMode(420), modTime: time.Unix(1475420665, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rubyDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xbd\x6e\x03\x21\x10\x84\x7b\x9e\x62\xa4\xeb\xcd\x43\x44\x4a\xaa\xc4\x91\xa5\x14\xe9\x8c\x61\xb1\x91\x61\x17\xf1\x63\x85\xb7\x8f\x8e\x5c\xa4\x5c\xa8\xd0\x37\xb3\x3b\xb3\xcf\xa7\xe3\x2b\xac\xf0\x43\xbe\x74\xe9\x97\xa1\xd4\x02\x2b\x79\x40\x38\x0e\xb4\x1b\xc1\x87\x48\x15\x4c\xe4\xc8\xc1\x4b\xc1\xa5\xb3\x8b\x84\xc0\xb5\x99\x18\xd5\x82\xce\x56\x52\x22\x6e\xd3\xff\x20\x76\x52\xb4\x35\xf6\x46\x88\x81\x09\xc1\x63\x48\xc7\x79\x1b\xcc\xc6\xde\xcd\x95\xce\x2b\x2c\xb8\x52\xaa\xea\xe9\xf8\xfe\x89\x17\x4a\x6b\x16\xe6\xd3\x26\x67\xbd\x91\x9d\x7c\x88\x62\xef\x3b\x79\x12\xb5\x60\xba\x76\xe9\xd3\xf5\x97\xa8\xd3\xc7\xdb\xff\xfe\xbf\x07\xaf\xdd\x0b\xd5\x06\xf1\xf3\x6f\x72\xfe\x09\x3e\xcc\x3d\xea\x3b\x00\x00\xff\xff\x8b\xae\xa0\xae\x2a\x01\x00\x00")

func rubyDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_rubyDockerfile,
		"ruby/Dockerfile",
	)
}

func rubyDockerfile() (*asset, error) {
	bytes, err := rubyDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ruby/Dockerfile", size: 298, mode: os.FileMode(420), modTime: time.Unix(1475420665, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rubyDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8c\xcd\xaa\xc4\x20\x0c\x46\xf7\x7d\x8a\xe0\xbe\xe2\xbd\x75\x71\x11\xfa\x30\xad\x06\x2a\x57\x1b\x89\xb1\x3f\x6f\x3f\xb4\xc3\x0c\xb3\x9a\x55\xf8\x0e\x27\x67\x43\xae\x91\x56\x07\xea\x57\x75\x15\x79\x8b\x1e\xab\xeb\x00\x76\x9c\xaf\x03\x30\xb7\x98\x82\x03\x7d\x0f\x4f\x39\x4f\x6b\x70\x80\x7e\x21\x50\x18\xa2\x40\x20\xff\x8f\xdc\x7b\xca\x85\x2a\xea\x33\x27\xd8\xa3\x2c\x70\x52\x63\xa8\x32\xb1\xb4\xf2\x7a\x54\x77\x25\x4d\x33\xa6\xfa\xcc\x03\xf4\xe0\x69\xdd\xe8\xd0\x85\x58\xb4\xb5\x83\x2e\x4c\x42\x9e\xd2\x28\xa9\x7e\x93\x8e\x73\x14\x6e\x78\x2b\x17\xff\x48\xfe\x19\x67\x8d\x31\xef\x6d\xed\x70\x81\x9f\xee\x11\x00\x00\xff\xff\xe7\x9d\x9b\x72\xf1\x00\x00\x00")

func rubyDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_rubyDockerComposeYml,
		"ruby/docker-compose.yml",
	)
}

func rubyDockerComposeYml() (*asset, error) {
	bytes, err := rubyDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ruby/docker-compose.yml", size: 241, mode: os.FileMode(420), modTime: time.Unix(1475420665, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sinatraDockerignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\x4b\xce\xcf\x2b\xcb\xaf\xe0\xd2\x4b\xcd\x2b\xe3\xd2\x4b\xcf\x2c\xe1\x02\x04\x00\x00\xff\xff\xfa\xe4\xeb\x58\x1a\x00\x00\x00")

func sinatraDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_sinatraDockerignore,
		"sinatra/.dockerignore",
	)
}

func sinatraDockerignore() (*asset, error) {
	bytes, err := sinatraDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sinatra/.dockerignore", size: 26, mode: os.FileMode(420), modTime: time.Unix(1475420665, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sinatraDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xc1\x6e\x03\x21\x0c\x44\xef\x7c\xc5\x48\x7b\x0f\x1f\x51\xa9\x3d\xb5\xa9\x22\xf5\xd0\x5b\x5c\x30\x09\x0a\xd8\x08\xd8\xa8\xfb\xf7\xd5\xd2\xad\xd4\x0d\x27\xf4\x66\xec\x19\x3f\x9f\x8e\xaf\x70\x2a\x77\xfd\xb6\x2d\x0a\xf5\x4a\xc6\x4c\x70\x5a\x16\xa8\xa4\x05\xfd\xca\x08\x31\x71\x83\x30\x7b\xf6\x08\x5a\xf1\x35\x8b\x4f\x8c\x28\xad\x53\x4a\x66\xc2\x2c\x4e\x73\x66\xe9\xc3\x7f\x67\xf1\x5a\xad\x23\x77\x65\xa4\x28\x8c\x18\xb0\xe8\x8c\xf3\x36\x58\xc8\xdd\xe8\xc2\xe7\x15\x56\x5c\x38\x37\xf3\x74\x7c\xff\xc4\x0b\xe7\x35\x0b\xe3\x59\x2a\xc5\x6e\x64\x27\x1f\x92\xba\xdb\x4e\x1e\xc4\x4c\x18\xae\x5d\xfa\x70\xfd\x27\xe6\xf4\xf1\xf6\xd8\xff\xef\xe0\xb5\x7b\xe5\xd6\xa1\x61\xfc\xa9\x94\xdf\xe0\xc3\xd8\x63\x7e\x02\x00\x00\xff\xff\x9c\x51\x49\xbe\x2d\x01\x00\x00")

func sinatraDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_sinatraDockerfile,
		"sinatra/Dockerfile",
	)
}

func sinatraDockerfile() (*asset, error) {
	bytes, err := sinatraDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sinatra/Dockerfile", size: 301, mode: os.FileMode(420), modTime: time.Unix(1475420665, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sinatraDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8c\x31\x0a\xc3\x30\x0c\x45\x77\x9f\x42\x64\xaf\x71\x1b\x0d\xc5\x90\xc3\xd4\xae\x06\x83\x88\x82\xe4\xb8\xe9\xed\x8b\x5d\x28\x9d\x32\x89\xf7\xf4\xf8\x8d\xd4\x8a\xac\x11\xa6\xdb\xe4\x8c\xb4\x95\x4c\x16\x1d\xc0\x8b\x52\x3f\x00\x69\x2f\xfc\x8c\xe0\x07\xf0\x23\x11\xdb\xf7\x01\x70\x81\x2c\x6b\x93\xc3\x6f\xa2\xd5\x23\xce\x7e\x53\xa9\x92\x85\x97\xca\x76\x16\x1d\xef\xa5\xea\x4e\x23\xe9\xfe\x6f\xf2\x1e\x22\x86\x10\x7e\x8c\x38\x77\x71\x75\x9f\x00\x00\x00\xff\xff\x84\xf7\xad\xb9\xab\x00\x00\x00")

func sinatraDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_sinatraDockerComposeYml,
		"sinatra/docker-compose.yml",
	)
}

func sinatraDockerComposeYml() (*asset, error) {
	bytes, err := sinatraDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sinatra/docker-compose.yml", size: 171, mode: os.FileMode(420), modTime: time.Unix(1475420665, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _unknownDockerignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\x4b\xcd\x2b\xe3\xd2\x4b\xcf\x2c\xe1\x02\x04\x00\x00\xff\xff\x9c\x10\x28\x7b\x0a\x00\x00\x00")

func unknownDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_unknownDockerignore,
		"unknown/.dockerignore",
	)
}

func unknownDockerignore() (*asset, error) {
	bytes, err := unknownDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "unknown/.dockerignore", size: 10, mode: os.FileMode(420), modTime: time.Unix(1475420665, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _unknownDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0b\xf2\xf7\x55\x28\x4d\x2a\xcd\x2b\x29\xb5\x32\x34\xd3\x33\x30\xe1\xe2\x72\xf6\x0f\x88\x54\xd0\x53\xd0\x4f\x2c\x28\xe0\x02\x04\x00\x00\xff\xff\xf1\xa3\x65\xfc\x1f\x00\x00\x00")

func unknownDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_unknownDockerfile,
		"unknown/Dockerfile",
	)
}

func unknownDockerfile() (*asset, error) {
	bytes, err := unknownDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "unknown/Dockerfile", size: 31, mode: os.FileMode(420), modTime: time.Unix(1475420665, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _unknownDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\x50\x32\x52\xe2\x2a\x4e\x2d\x2a\xcb\x4c\x4e\x2d\xb6\xe2\x52\x50\xc8\x4d\xcc\xcc\x03\xd1\x0a\x0a\x49\xa5\x99\x39\x29\x56\x0a\x7a\x5c\x80\x00\x00\x00\xff\xff\x29\xee\x22\xf7\x2c\x00\x00\x00")

func unknownDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_unknownDockerComposeYml,
		"unknown/docker-compose.yml",
	)
}

func unknownDockerComposeYml() (*asset, error) {
	bytes, err := unknownDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "unknown/docker-compose.yml", size: 44, mode: os.FileMode(420), modTime: time.Unix(1475420665, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"buildpack/.dockerignore": buildpackDockerignore,
	"buildpack/Dockerfile": buildpackDockerfile,
	"buildpack/entrypoint.sh": buildpackEntrypointSh,
	"django/.dockerignore": djangoDockerignore,
	"django/Dockerfile": djangoDockerfile,
	"django/docker-compose.yml": djangoDockerComposeYml,
	"python/.dockerignore": pythonDockerignore,
	"python/Dockerfile": pythonDockerfile,
	"python/docker-compose.yml": pythonDockerComposeYml,
	"rails/.dockerignore": railsDockerignore,
	"rails/Dockerfile": railsDockerfile,
	"rails/docker-compose.yml": railsDockerComposeYml,
	"ruby/.dockerignore": rubyDockerignore,
	"ruby/Dockerfile": rubyDockerfile,
	"ruby/docker-compose.yml": rubyDockerComposeYml,
	"sinatra/.dockerignore": sinatraDockerignore,
	"sinatra/Dockerfile": sinatraDockerfile,
	"sinatra/docker-compose.yml": sinatraDockerComposeYml,
	"unknown/.dockerignore": unknownDockerignore,
	"unknown/Dockerfile": unknownDockerfile,
	"unknown/docker-compose.yml": unknownDockerComposeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"buildpack": &bintree{nil, map[string]*bintree{
		".dockerignore": &bintree{buildpackDockerignore, map[string]*bintree{}},
		"Dockerfile": &bintree{buildpackDockerfile, map[string]*bintree{}},
		"entrypoint.sh": &bintree{buildpackEntrypointSh, map[string]*bintree{}},
	}},
	"django": &bintree{nil, map[string]*bintree{
		".dockerignore": &bintree{djangoDockerignore, map[string]*bintree{}},
		"Dockerfile": &bintree{djangoDockerfile, map[string]*bintree{}},
		"docker-compose.yml": &bintree{djangoDockerComposeYml, map[string]*bintree{}},
	}},
	"python": &bintree{nil, map[string]*bintree{
		".dockerignore": &bintree{pythonDockerignore, map[string]*bintree{}},
		"Dockerfile": &bintree{pythonDockerfile, map[string]*bintree{}},
		"docker-compose.yml": &bintree{pythonDockerComposeYml, map[string]*bintree{}},
	}},
	"rails": &bintree{nil, map[string]*bintree{
		".dockerignore": &bintree{railsDockerignore, map[string]*bintree{}},
		"Dockerfile": &bintree{railsDockerfile, map[string]*bintree{}},
		"docker-compose.yml": &bintree{railsDockerComposeYml, map[string]*bintree{}},
	}},
	"ruby": &bintree{nil, map[string]*bintree{
		".dockerignore": &bintree{rubyDockerignore, map[string]*bintree{}},
		"Dockerfile": &bintree{rubyDockerfile, map[string]*bintree{}},
		"docker-compose.yml": &bintree{rubyDockerComposeYml, map[string]*bintree{}},
	}},
	"sinatra": &bintree{nil, map[string]*bintree{
		".dockerignore": &bintree{sinatraDockerignore, map[string]*bintree{}},
		"Dockerfile": &bintree{sinatraDockerfile, map[string]*bintree{}},
		"docker-compose.yml": &bintree{sinatraDockerComposeYml, map[string]*bintree{}},
	}},
	"unknown": &bintree{nil, map[string]*bintree{
		".dockerignore": &bintree{unknownDockerignore, map[string]*bintree{}},
		"Dockerfile": &bintree{unknownDockerfile, map[string]*bintree{}},
		"docker-compose.yml": &bintree{unknownDockerComposeYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

