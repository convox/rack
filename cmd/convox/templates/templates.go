// Code generated by go-bindata.
// sources:
// templates/init/rails/.dockerignore
// templates/init/rails/Dockerfile
// templates/init/rails/docker-compose.yml
// templates/init/ruby/.dockerignore
// templates/init/ruby/Dockerfile
// templates/init/ruby/docker-compose.yml
// templates/init/sinatra/.dockerignore
// templates/init/sinatra/Dockerfile
// templates/init/sinatra/docker-compose.yml
// templates/init/unknown/.dockerignore
// templates/init/unknown/Dockerfile
// templates/init/unknown/docker-compose.yml
// templates/templates.go
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _initRailsDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\xd7\x4b\xce\xcf\x2b\xcb\xaf\x00\x32\x52\xf3\xca\x80\x64\x7a\x66\x09\x97\x7e\x4a\x92\xbe\x96\x5e\x71\x61\x4e\x66\x49\xaa\x31\x2a\x4f\x37\x2b\xbf\xb4\x28\x2f\x31\x87\x4b\x3f\x27\x3f\x5d\x5f\x8b\x4b\xbf\x24\xb7\x80\x0b\x10\x00\x00\xff\xff\xa0\x04\x95\x56\x4e\x00\x00\x00")

func initRailsDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerignore,
		"init/rails/.dockerignore",
	)
}

func initRailsDockerignore() (*asset, error) {
	bytes, err := initRailsDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/.dockerignore", size: 78, mode: os.FileMode(420), modTime: time.Unix(1463932192, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRailsDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x50\xbb\x4e\xc4\x30\x10\xec\xfd\x15\x2b\xd1\x5f\x7a\x5a\x24\xa8\xe0\x50\x24\x0a\xba\xf3\x39\xeb\x60\xe2\xd8\x96\x1f\x27\xf2\xf7\x6c\xd6\x09\x21\xa7\xa4\xca\x3c\xec\x99\xf1\x73\x7b\x7e\x05\xe5\xdd\xcd\xff\x34\x51\x1a\x9b\x84\x78\x20\x1c\x26\xf0\xce\x4e\x90\xbf\x10\xb4\xb1\x98\xc0\x21\x76\xd8\x81\xf6\x11\xae\xc5\x75\x16\xc1\xb8\x94\xa5\xb5\xe4\x2f\x4e\xf9\x71\x44\x97\xd9\x7f\x43\xd7\xf9\xd8\x28\xa9\x08\x58\xe3\xc8\xa9\x61\xf2\x05\x2e\xcb\xc1\x20\xd5\x20\x7b\xbc\xcc\x64\x84\x1e\xc7\x24\x9e\xce\xef\x9f\xf0\x82\xe3\x9c\x05\xfc\x35\x32\x84\x66\x61\x76\xf2\xc9\x7a\x35\xec\x64\x66\xa8\x06\xbb\x76\xe9\xec\xfa\xcf\x88\xf6\xe3\xed\xbe\xff\x3a\xf8\xbb\xa4\x7c\x3c\x58\xa6\x84\x39\x3d\x86\x88\xb4\x33\xfc\x15\x6a\xe5\x80\x4b\x61\x0e\x5a\x71\x55\xe9\x51\xb5\xe9\xb7\x2d\x15\x57\x2d\x94\xab\x35\x6a\xd3\x2a\xae\xda\x8c\x6b\x60\xd5\x36\xcc\xe5\x23\x85\x1c\x14\x5a\x47\xcc\xfd\x23\xd2\x10\xaf\xf9\x9f\x4e\xd7\x6b\x4f\x7c\x9b\xf8\x0d\x00\x00\xff\xff\x08\xae\x24\x4e\xf0\x01\x00\x00")

func initRailsDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerfile,
		"init/rails/Dockerfile",
	)
}

func initRailsDockerfile() (*asset, error) {
	bytes, err := initRailsDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/Dockerfile", size: 496, mode: os.FileMode(420), modTime: time.Unix(1463769261, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRailsDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\x03\x32\x73\x12\x93\x52\x73\x8a\x41\x82\x0a\x0a\xba\x0a\xc9\xf9\x79\x65\xf9\x15\x7a\x05\xf9\x45\x25\x7a\x26\x26\xc6\x7a\x05\x45\xf9\x25\xf9\xc9\xf9\x39\xb6\x25\x39\xc5\xb8\x95\x54\x54\xda\x96\x14\x95\xa6\x02\x15\x80\x44\xe1\x86\x59\x18\x58\x99\x18\x18\x18\x40\x79\x40\xb5\x20\xae\x21\x17\x20\x00\x00\xff\xff\xc0\xe1\x22\xef\x84\x00\x00\x00")

func initRailsDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerComposeYml,
		"init/rails/docker-compose.yml",
	)
}

func initRailsDockerComposeYml() (*asset, error) {
	bytes, err := initRailsDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/docker-compose.yml", size: 132, mode: os.FileMode(420), modTime: time.Unix(1463769261, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRubyDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\xd7\x4b\xce\xcf\x2b\xcb\xaf\x00\x32\x52\xf3\xca\x80\x64\x7a\x66\x09\x17\x20\x00\x00\xff\xff\xc9\x68\x92\x70\x1e\x00\x00\x00")

func initRubyDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerignore,
		"init/ruby/.dockerignore",
	)
}

func initRubyDockerignore() (*asset, error) {
	bytes, err := initRubyDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/.dockerignore", size: 30, mode: os.FileMode(420), modTime: time.Unix(1463932192, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRubyDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xcd\x4e\xc0\x20\x10\x84\xef\x3c\xc5\x26\xde\xcb\x43\x98\xe8\x49\x6b\x9a\x78\xf0\x56\x0a\x4b\x6d\x0a\xbb\x84\x9f\x46\xde\x5e\x8a\x35\xb1\x72\x62\x67\xbf\x61\x86\xa7\x69\x7c\x01\xcd\x74\xf0\x97\x8c\x65\xa9\x42\x3c\xb4\x31\x54\x60\x72\x15\xf2\x27\x82\xdd\x1c\x26\x20\x44\x83\x06\x2c\x47\x58\x0a\x19\x87\xb0\x51\xca\xca\xb9\xc6\x17\xd2\xec\x3d\x52\xee\xfc\x81\x64\x38\x4a\xad\x74\x1b\xdc\x46\x8d\xb4\x50\xb9\xc0\x7c\x19\x83\xd2\xbb\x5a\x71\x3e\xc5\x08\x2b\xfa\x24\x1e\xc7\xb7\x0f\x78\x46\x7f\x66\x41\x3f\x52\x85\x20\x2f\xe5\xb6\x1e\x1c\xeb\xfd\xb6\xee\x4a\xab\xd1\xa9\x5b\x7a\xa7\xfe\x2a\x62\x7a\x7f\xfd\xdf\xff\xf7\xc3\x67\xf7\x88\x29\x03\xdb\x7e\x6f\xde\x9f\xe0\xa1\xbf\x23\xbe\x03\x00\x00\xff\xff\x8b\xae\xa0\xae\x2a\x01\x00\x00")

func initRubyDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerfile,
		"init/ruby/Dockerfile",
	)
}

func initRubyDockerfile() (*asset, error) {
	bytes, err := initRubyDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/Dockerfile", size: 298, mode: os.FileMode(420), modTime: time.Unix(1463769261, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRubyDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8c\xc1\x0a\x83\x30\x0c\x86\xef\x3e\x45\xf0\x6e\xe9\x98\x87\x21\xf8\x30\x5a\x03\xca\xa2\x29\x69\x3a\xed\xdb\x2f\x85\x6d\xb7\xdd\xfa\xf5\xff\xf2\x9d\x38\x0f\x0d\xc0\x9c\x37\x5a\x06\x70\xf6\x0c\xbc\xef\xd3\x61\x80\x61\x65\x68\x71\xd9\x14\x16\x0e\x4f\x94\xce\xa6\xc8\x09\x5d\xd9\x09\xce\x4d\x57\x28\x9c\x05\x92\x4e\xa2\x39\x7e\x0f\x5b\x6b\xd0\x34\x23\xa5\x1a\x06\xe8\x6c\x38\x5e\x7c\xb9\xc8\xa2\xae\xef\xef\x2e\x0a\x2b\x07\xa6\x51\x29\xfd\x57\xae\x32\xaa\x64\x34\xa1\xfe\xfe\x62\x0f\x3f\xf4\xde\xfb\x0f\x99\x5b\xf1\xd6\xbc\x03\x00\x00\xff\xff\xae\x01\x4e\xf5\xc8\x00\x00\x00")

func initRubyDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerComposeYml,
		"init/ruby/docker-compose.yml",
	)
}

func initRubyDockerComposeYml() (*asset, error) {
	bytes, err := initRubyDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/docker-compose.yml", size: 200, mode: os.FileMode(420), modTime: time.Unix(1463769261, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initSinatraDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\xd7\x4b\xce\xcf\x2b\xcb\xaf\x00\x32\x52\xf3\xca\x80\x64\x7a\x66\x09\x17\x20\x00\x00\xff\xff\xc9\x68\x92\x70\x1e\x00\x00\x00")

func initSinatraDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerignore,
		"init/sinatra/.dockerignore",
	)
}

func initSinatraDockerignore() (*asset, error) {
	bytes, err := initSinatraDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/.dockerignore", size: 30, mode: os.FileMode(420), modTime: time.Unix(1463932192, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initSinatraDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xc1\x6e\x84\x20\x10\x86\xef\x3c\xc5\x24\xbd\xcb\x43\x34\x69\x4f\xad\x8d\x49\x0f\xbd\x49\x61\x70\x89\x30\x43\x00\xcd\xfa\xf6\x8b\xac\x9b\xac\xeb\x49\xbe\xf9\x86\xff\xe7\x63\xe8\xbf\x40\x33\xad\x7c\x95\xd9\x91\x2a\x49\x09\xf1\x56\x49\xdc\x80\xc9\x6f\x50\x2e\x08\xd6\x79\xcc\x40\x88\x06\x0d\x58\x4e\xf0\xbf\x90\xf1\x08\x8e\x72\x51\xde\x57\x7f\x21\xcd\x21\x20\x95\xe6\xaf\x48\x86\x93\xd4\x4a\xd7\x83\x77\x54\x4d\x0b\x1b\x2f\x30\x1e\x8b\x51\xe9\x59\x4d\x38\xee\x30\xc1\x84\x21\x8b\xf7\xfe\xe7\x0f\x3e\x31\xec\x59\xd0\x3e\xa9\x62\x94\x07\x39\x8d\x3b\xcf\x7a\x3e\x8d\x1b\xa9\x35\x9a\x75\x4a\x6f\xd6\x33\x11\xc3\xef\xf7\x6b\xff\xc7\x83\xf7\xee\x09\x73\x01\xb6\xed\xbf\xee\xde\x83\xbb\x76\x8f\xb8\x05\x00\x00\xff\xff\x9c\x51\x49\xbe\x2d\x01\x00\x00")

func initSinatraDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerfile,
		"init/sinatra/Dockerfile",
	)
}

func initSinatraDockerfile() (*asset, error) {
	bytes, err := initSinatraDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/Dockerfile", size: 301, mode: os.FileMode(420), modTime: time.Unix(1463769261, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initSinatraDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\x03\x32\x73\x12\x93\x52\x73\x8a\x41\x82\x0a\x0a\xba\x0a\xc9\xf9\x79\x65\xf9\x15\x7a\x05\xf9\x45\x25\x7a\x26\x26\xc6\x7a\x05\x45\xf9\x25\xf9\xc9\xf9\x39\xb6\x25\x39\xc5\xb8\x95\x54\x54\xda\x96\x14\x95\xa6\x02\x15\x80\x44\xe1\x86\x59\x18\x58\x99\x18\x18\x18\x40\x79\x40\xb5\x20\xae\x21\x17\x20\x00\x00\xff\xff\xc0\xe1\x22\xef\x84\x00\x00\x00")

func initSinatraDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerComposeYml,
		"init/sinatra/docker-compose.yml",
	)
}

func initSinatraDockerComposeYml() (*asset, error) {
	bytes, err := initSinatraDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/docker-compose.yml", size: 132, mode: os.FileMode(420), modTime: time.Unix(1463769261, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initUnknownDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\x4b\xcd\x2b\xe3\xd2\x4b\xcf\x2c\xe1\x02\x04\x00\x00\xff\xff\x9c\x10\x28\x7b\x0a\x00\x00\x00")

func initUnknownDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initUnknownDockerignore,
		"init/unknown/.dockerignore",
	)
}

func initUnknownDockerignore() (*asset, error) {
	bytes, err := initUnknownDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/unknown/.dockerignore", size: 10, mode: os.FileMode(420), modTime: time.Unix(1464380098, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initUnknownDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x0b\xf2\xf7\x55\x28\x4d\x2a\xcd\x2b\x29\xb5\x32\x34\xd3\x33\x30\xe1\xe2\x72\xf6\x0f\x88\x54\xd0\x53\xd0\x4f\x2c\x28\xe0\x02\x04\x00\x00\xff\xff\xf1\xa3\x65\xfc\x1f\x00\x00\x00")

func initUnknownDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initUnknownDockerfile,
		"init/unknown/Dockerfile",
	)
}

func initUnknownDockerfile() (*asset, error) {
	bytes, err := initUnknownDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/unknown/Dockerfile", size: 31, mode: os.FileMode(420), modTime: time.Unix(1464380098, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initUnknownDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x4d\xcc\xcc\xb3\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\xe3\x02\x04\x00\x00\xff\xff\xa6\xe1\xc1\x85\x11\x00\x00\x00")

func initUnknownDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initUnknownDockerComposeYml,
		"init/unknown/docker-compose.yml",
	)
}

func initUnknownDockerComposeYml() (*asset, error) {
	bytes, err := initUnknownDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/unknown/docker-compose.yml", size: 17, mode: os.FileMode(420), modTime: time.Unix(1464380098, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9a\xdb\x6e\x1b\x47\x12\x86\xaf\xc5\xa7\x98\x08\x48\x40\x2d\x14\x6a\xce\x07\x01\xbe\x89\xed\x05\x7c\xb1\x0e\x90\x38\x17\x8b\xd5\x22\x98\x43\x8f\x96\xb0\x44\x6a\x49\x2a\x91\x6c\xf8\xdd\xb7\xbe\xae\x1e\x91\x22\x87\xd4\x19\xf1\xee\xc6\xc0\x98\x33\x3d\xdd\xd5\x55\xdd\x55\x7f\xff\x55\xa3\xa3\x23\xef\xf5\xb4\x31\xde\xa9\x99\x98\x59\xb9\x30\x8d\x57\x5d\x7b\xa7\xd3\xef\xab\xf1\xa4\x29\x17\xe5\x68\x20\x1d\xe6\xd3\xcb\x59\x6d\xe6\xc7\xdc\x2f\xcc\xf9\xc5\x99\xf4\x9b\x1f\x8d\x27\xe3\xc5\xd1\xac\x1c\x9f\xcd\x8f\x46\xcd\xb4\xfe\x68\x66\xe3\xd3\xc9\x74\x66\xb6\xf6\x7a\x63\x3b\xb5\xe3\xb3\xed\x5d\x54\xce\xf7\xf5\xf4\xfc\x62\x3a\x37\xa3\xeb\xf3\xb3\xbe\xae\x97\xd5\xf5\xdd\x53\xd2\x69\xf7\x8c\xf4\xb8\xd7\x84\xf3\xf1\xa4\x5c\xcc\xca\x3b\xe7\xec\xfa\xed\x9c\xb6\xeb\x74\xaf\x99\x2f\x27\x1f\x27\xd3\xdf\x27\x77\xce\xdc\xf5\xdb\x39\x73\xd7\xe9\xae\x99\x6f\xee\x46\xa7\x53\xde\xbc\xf9\xd1\x7b\xff\xe3\x07\xef\xed\x9b\x77\x1f\xbe\x19\x0c\x2e\xca\xfa\x63\x79\x6a\x96\xfd\x07\x83\xb1\x08\x9a\x2d\xbc\xe1\x60\x6f\xbf\xba\x96\x96\x7d\xb9\x41\xfa\xcc\xcc\xe7\x47\xa7\x9f\xc6\x17\x34\xb4\xe7\x0b\x7e\xc6\x53\xfd\xff\x68\x3c\xbd\x5c\x8c\xcf\x78\x98\xda\x01\x17\xe5\xe2\x5f\x47\x68\xce\x0d\x0d\xf3\xc5\x6c\x3c\x39\xb5\xef\x16\xe3\x73\xb3\x3f\x38\x18\x0c\xda\xcb\x49\xed\x39\xd7\xfc\xc9\x94\xcd\x90\x1b\xef\x1f\xff\x64\xda\x43\x6f\x52\x9e\x1b\x4f\x87\x1d\x78\xc3\xae\xd5\xcc\x66\xd3\xd9\x81\xf7\x79\xb0\x77\xfa\xc9\x3e\x79\xc7\xaf\x3c\xb4\x1a\xbd\x37\xbf\x23\xc4\xcc\x86\x56\x6d\x9e\x7f\xb8\x6c\x5b\x79\x46\xec\xc1\xc1\x60\x6f\xdc\xda\x01\xdf\xbc\xf2\x26\xe3\x33\x44\xec\xcd\xcc\xe2\x72\x36\xe1\xf1\xd0\x13\x93\x46\x6f\x91\xde\x0e\xf7\x11\xe4\x7d\xfb\xef\x63\xef\xdb\xdf\xf6\x55\x13\x3b\x97\xc8\xf8\x32\x18\xec\xfd\x56\xce\xbc\xea\xb2\xf5\x74\x1e\x9d\x64\xb0\xf7\xab\xaa\xf3\xca\x1b\x4f\x47\xaf\xa7\x17\xd7\xc3\xef\xa4\xcf\xa1\xe8\x26\xa3\xea\xb3\xb7\x9d\xa6\xa3\xd7\x67\xb2\x4f\x43\x31\xff\x99\xf4\x41\x8c\xca\xdf\x22\x48\x3a\xaa\xde\xae\x51\xd4\x1a\xfd\x80\xea\xc3\x83\x43\x7a\x0c\xe4\xdd\xe2\xfa\xc2\x78\xe5\x7c\x6e\x16\x2c\xf9\x65\xbd\x40\x8a\xb5\xcf\xed\x87\x4c\x33\x69\xa7\x9e\x37\x9d\x8f\xfe\x2a\xdb\xfa\x4e\x1e\x6e\xc6\xb9\x2d\xec\xda\x57\x24\xd8\x3d\x94\x7f\xba\x8d\x83\xbd\xf9\xf8\x93\x7d\x1e\x4f\x16\x69\x3c\xd8\x3b\x07\xab\xbc\x1b\xa1\x7f\x93\x47\xdb\xf8\x41\x3c\xc4\xc3\x4d\x46\xdc\x31\x8f\x75\x95\x61\x3b\x5e\x9f\xeb\xc0\x7b\x2f\x53\x0c\x0f\xdc\x0c\xcc\xe9\xac\x6c\xc7\x23\x66\x97\xc1\xdb\xc7\xfe\x2c\xea\xc8\x58\xab\xcd\xed\xa1\x28\xba\x73\x28\xba\xca\xd0\x15\xcd\x6f\x0b\xc0\xb4\xbb\x04\x60\x9c\xc8\xb8\x31\x74\x43\x82\xb3\x7e\xbb\x90\x77\xf3\x37\xe3\x99\x88\xa8\xa6\xd3\xb3\xd5\xd1\xe5\xd9\xfc\x0e\xcb\xaf\xe7\x6a\xb8\xe0\x4b\x59\x9b\xcf\x5f\x56\x46\x3b\x97\xc0\xcb\x7f\x05\x6a\x7e\x02\xcc\xdf\xac\x40\x96\xf8\xb8\x3a\xc5\x70\xff\xe4\x2a\x68\x4f\xae\xf2\xea\xe4\xca\xcf\xe5\xf2\xdd\x55\x9c\x5c\xa5\x46\xda\x5d\x5b\x2b\x7d\x9a\x50\xae\xec\xe4\x2a\x96\xbe\x61\x79\x72\x55\x37\x7a\x5f\x4b\xdf\x58\x2e\x93\xdc\xee\x53\xcb\xf8\x5a\xc6\x85\xdc\xcb\x55\xb6\x2a\x2b\x92\x3e\x89\x5c\x6d\x24\xed\x22\x27\x97\xb6\x34\x3e\xb9\xca\xe4\x3e\x4d\x75\xee\x42\x64\x64\x32\x3e\x96\xb6\x42\xfa\x56\x72\x5f\xc8\xbb\x44\x7e\xb3\x40\xfa\xc9\x15\x1b\xed\xcf\xdc\xa5\xf4\x8b\x02\xd5\x2b\x96\x79\xa2\x4c\xe7\xad\xe4\xbe\x12\xd9\xa1\xd8\x11\xb6\xda\x27\x77\xfa\x45\xe8\x96\xe9\x6f\x22\xb6\x24\x6e\x1d\x62\x37\x2e\x94\x71\x55\xa6\xfa\xf9\xd2\x16\xf8\xcb\xf5\x61\x3d\xb8\x4a\x9e\xa5\x5f\x21\xb6\x27\xa9\xea\x74\xb3\x86\xfe\x7e\x07\x91\xbd\x9b\xe0\x22\xb8\x0f\x19\xbb\x38\x5f\x41\x56\x81\x84\xfe\xbd\x3c\x94\x37\xfb\xdb\x0e\xff\x7d\x79\x7b\x70\x13\x7e\xbd\xe3\xd1\xe0\x2f\x16\x38\x56\x35\xb0\xc8\x71\x03\xcf\xbb\xf4\xbf\x0b\x05\x6f\xc0\xcb\xc2\x8f\x08\x5b\x73\xe5\xcf\x04\xf9\xb1\xb7\xc3\x04\x8f\x58\x3e\xf6\xb2\xfc\xd0\x23\x28\x8f\x57\x63\x76\x18\x87\xfe\x81\x6d\x27\xd4\x8e\x35\x14\x7f\x99\x8c\xaf\x86\x41\x9c\x46\x45\x14\x06\x45\x78\xe8\xf9\x07\x82\xb2\x25\x93\x7f\x67\x2d\xfd\x6c\xcd\x3b\xf6\x9c\x95\x68\x76\x6c\xff\xff\x72\xb3\xf6\xe5\xe1\xae\x30\xe2\x60\x7c\x54\x10\xa5\xb5\x38\x8a\xdc\x57\x95\x3a\x4b\x2d\xce\x13\xf9\xea\x5c\x46\xde\xb5\xe2\x88\x41\xa2\xce\xdb\x04\xea\x94\x04\x46\x52\xaa\x43\x96\x22\xcb\xf8\x2a\x83\x67\x5f\xda\xab\x52\x83\x29\x22\x08\x65\x5c\x8a\x2c\x02\x31\xd7\xa0\x09\x9c\xa3\xb7\x04\x5d\xa6\x3a\x34\x2e\xd0\x42\x99\xa3\x94\xb6\x32\xd6\x60\x8c\x6a\xd5\xa3\x90\x77\xad\xbc\xcb\x44\x6e\x56\x69\x30\xfa\x89\x0b\xf2\x46\x83\x1f\x7b\x22\x19\x97\x48\xbf\x80\x40\x95\x7e\x39\x81\x4c\xb0\x61\x93\xc8\x09\x65\x9e\xd6\x57\x30\xc0\xde\xc2\xd7\xe0\xc2\x5e\x02\xb3\x92\xb1\x85\xf4\xaf\x7d\xd5\x25\x4b\x55\xef\x5c\xee\x5b\x74\x47\x3f\xd6\x49\xe6\xcd\xe4\x0a\xa4\xad\x96\xb6\x0a\xdb\x58\x0f\x69\xab\xd0\x2b\xd6\x00\x67\x8e\xb6\x50\x90\x88\x63\x05\x92\x86\x67\xde\x45\x0a\x4e\xbc\x67\x0e\x40\xa1\x2c\x74\xcf\x12\xd6\x15\x40\x72\x6d\x00\x0c\xeb\x85\xcd\xa1\x51\x00\x63\x5e\xec\x6a\x12\xfd\x65\x5d\x2a\xb1\xb1\xae\x15\xc0\xb0\x3d\xa0\x6f\xa6\x7b\x53\x18\xb5\xdb\xc8\xdc\x45\xab\xeb\x90\x87\x3a\x4f\x51\xab\xec\x56\x7e\xa3\x44\x41\x91\xf1\x00\x5a\xea\xd6\x81\xf9\x01\x57\xf6\x9f\x3e\xc6\xcd\x43\x1f\xfc\xc0\x4f\xd5\x8f\xe8\x6b\x0a\xe7\x3f\xa5\x82\x2e\x3e\xc7\xfa\x31\x97\x69\x14\x40\xed\x7e\xe1\x2b\xb9\x8e\x63\xcf\xb3\x5a\xf7\x1c\xfb\xcb\x54\x75\xc0\x8f\x22\x19\x93\xa7\x2a\x87\x7d\x8a\x22\xd5\x15\xdf\x4c\x4b\xf5\x03\x80\x11\xb0\x44\x5f\xdf\xa8\x8f\xb2\xee\x49\xa2\xfa\xe0\x17\x95\xbb\x07\x48\x43\xe7\xdb\x89\xbb\xb7\xfb\x57\xa9\x6d\xc8\x6c\x22\x05\x70\xf6\xbb\xe1\x60\xc0\x5e\xe7\xcf\xac\x79\x94\xea\x5a\x33\x77\x28\x7d\xf3\x44\x7d\x2c\x88\x75\xee\x38\xd3\xf7\xc4\x10\xef\x39\x8c\xf0\x33\x0e\x1e\xf6\xbc\x70\xfe\x81\x0f\x20\x97\x83\x02\xfb\xf1\x5b\xd6\xc4\x6f\x36\x01\x1e\xdf\x40\x1f\xf6\xd3\xfa\x16\xef\x83\xbb\x00\x1e\x78\x78\x32\xbc\x23\x64\x1d\xdc\x97\x6f\x76\x22\x3b\x1d\x1e\x81\xeb\x2b\x6a\xbf\x00\xaa\xaf\xea\xee\x20\x3d\x2e\xd2\x07\x63\x7a\x96\x16\x61\x1a\xbc\x00\xa6\xbf\xd6\x04\xec\xef\xe7\x67\x8f\x42\xf6\x8e\x7a\xc4\x44\x5b\xa8\x08\x0c\xcd\x01\xa9\xe3\x7c\x49\x99\xf0\x50\x28\x0b\xc8\xc7\xfb\x06\x79\x91\x22\x00\x68\x1b\xc8\x6f\x11\xe9\x3b\x9e\x73\xe4\x06\x8a\x1c\xa0\x7d\x87\xf8\xfc\x82\x0e\x16\xed\xd0\x27\xd1\x7b\x22\x0c\xc4\xf0\xdd\x73\x4c\xb4\xb8\x36\xd0\x98\xab\x4e\x97\x7d\x62\xd7\x2f\x74\xbf\x9d\x4c\x50\xa0\x4a\xb5\x9d\x7b\x10\xd8\xa2\x2e\x11\x1c\xeb\x45\x94\xda\x13\xc6\x51\x20\x10\xc4\x0f\x55\x07\x8b\x0e\xd2\x6e\x02\x45\x92\x04\xdd\x1c\xd2\x16\xee\xbe\xbb\x62\x5f\x6d\xe0\xb7\x72\xe8\x6a\xa3\x8e\x93\x25\xd3\xe7\xf5\xc8\xe4\xc4\x40\x76\x18\x2a\xc2\x82\x5c\x77\x53\xaf\xe5\x26\x3f\x39\x3e\x97\xa2\xd6\xa3\x74\x33\xa3\xdf\x19\xad\x4b\x41\x8f\x88\xd9\x0d\x83\x5e\x20\x72\xfb\xec\x71\x11\x1c\x44\xe1\x1f\x1d\xc1\x97\xd5\xf5\x7f\x55\x6e\xb3\xd5\xa1\xd1\x2b\xd7\x7c\x27\xf3\x95\x4a\x6c\x73\xe8\x35\x9b\x1f\xe9\xcb\x6b\x52\x56\xdc\x78\xa3\xa4\xd7\xe3\xc0\x6b\xa3\xef\xed\xbb\xfd\xba\x3f\xaf\xdb\xf6\xe8\xef\x1c\x36\xf2\xff\xe8\x2c\xe2\xc6\xfe\x47\x27\x11\x89\x1c\x21\x79\xeb\xbc\xd4\x38\xf2\xec\x92\x08\x60\x10\x38\x84\xd4\x01\xd9\xc0\x7d\xe3\x08\x2c\x04\x18\xb2\x6d\x72\xf5\x6a\x48\x50\x51\x2a\x61\x87\xd8\x90\xc1\x72\xac\x58\x52\xd7\xb8\xa3\xc6\x91\x7a\x4b\x9e\x9c\x2c\xb2\xf0\xdc\x91\x52\x8e\xb1\x4c\x3c\x36\xe5\xca\x94\xdc\xa7\x0e\xf2\x49\x2c\xd2\x42\x49\x16\xa4\x09\x7d\xb3\x58\xe7\x82\x98\x5b\x82\x97\x28\xe1\x8e\x43\xd5\xd9\x92\xcd\x40\x8f\x17\x88\x5f\xe6\x8e\x13\xc8\x30\x49\x0c\xc7\x20\x09\x48\x97\x5c\x84\xee\x98\xc9\x23\x25\xc4\x61\xad\x44\x90\x63\x06\xfd\x83\x42\x33\xfe\xca\x57\x42\x4a\x54\x72\x55\x85\x1e\x83\x44\x23\x91\x0d\x79\x86\xf4\x12\xbd\xc6\x28\xd9\x25\x09\x21\x7a\xa3\x5c\x2b\x11\xa5\xd3\x3f\x20\x39\xab\x75\x3d\xf2\x46\x75\xb6\x49\x5d\xa1\x7b\x81\xbd\x76\x5e\x47\x42\x59\xc3\x8e\x1c\x47\x2e\x99\x61\x8f\x41\x8f\xd6\x25\x76\x5d\xe2\x00\x51\xf6\x5b\xdd\x13\xe4\x93\xb8\xd8\x2a\x47\xe0\x2a\x15\xa1\x12\x5f\xec\x26\xe1\x01\x99\x38\xa6\x19\xcf\x9a\x90\x00\x42\x80\x69\x33\xae\x82\x52\xba\x64\x92\x75\x4e\x2a\x45\x23\xf6\xa6\x35\x8a\x76\xec\x1d\x6d\xcc\xc5\xd8\xc6\x21\x12\xc9\x62\x1d\xe9\xbe\x72\x8f\x0f\x86\x85\xd2\x95\xc6\x25\x85\x69\xab\x3e\x81\x7f\x90\x98\x96\x81\xab\x9e\x44\x9a\x74\xd0\x77\x1d\xe9\xf0\x71\x8e\xf7\xb2\x3b\xe6\xcb\xed\xa4\xfa\x56\xb4\x3c\x15\xe7\xd6\x28\xf5\xed\x6f\x12\xbb\x20\xee\x41\x84\xba\x4f\xe5\xe7\x87\xb7\x1e\x3a\x1d\x16\x0f\x2f\x91\xbc\xd4\x61\xfc\x44\x36\x4d\x98\x01\x0f\xe4\xdc\x84\x31\xa1\x44\x9d\xc4\xaf\x15\x5a\x2c\xc4\x19\xc7\x5e\x7d\x1d\x4f\x9e\x09\xbc\x11\xee\x30\x47\x72\x3a\xc6\x10\x7a\xbe\x3b\x90\xcb\x50\x5d\x18\x58\x22\x17\x26\x37\xc6\x95\x09\x25\xc2\x0a\xd8\x23\x04\x81\x18\x42\xb3\x4d\x9c\xdb\xc2\xca\x1b\x85\x02\xc2\x93\x5c\x91\x50\x27\x8f\xa7\xd8\x68\xe7\x48\xf5\xe0\x26\xef\x46\x4f\x6a\x03\xe8\x49\x5e\x6b\x21\xd1\xd7\x5f\x20\x8f\x83\x1e\x38\xa0\x36\x01\x7b\xa6\xae\x41\x0e\x4d\x06\x41\x5e\x0c\xc1\x80\x4d\x53\x8f\x60\x7d\x28\x50\xd2\x97\x7b\x5b\x4b\x69\x5c\x1e\x9d\x2f\x6b\x09\x10\x07\x8e\x03\x6c\x84\xb1\xdb\x9a\x4d\xab\x21\x0f\xd4\x93\x69\x50\xaf\x21\x34\xa9\x9b\x04\x4e\x67\x8e\x03\x6a\x42\xd8\x66\x0b\xac\xb5\x83\xb2\x5c\x65\x95\xae\x86\xc1\x45\x2d\x84\xfd\x00\xba\xfc\x4c\x75\x04\x56\x59\xd3\xd6\xe9\x44\x7f\x88\x10\x45\x59\x0b\x9f\xb1\xc2\x02\x70\xc3\x05\xdc\xa0\x17\x70\xd6\xc6\x0a\x1f\x6d\xa5\x6d\x85\x83\x28\x6a\x4f\xd4\xa8\x58\xc3\x3e\x08\x61\x0e\xdf\x15\x81\xd9\xa3\x3a\xbf\x07\x59\x7a\x32\xf9\xef\x91\xb4\x06\x27\xf7\xa2\xfe\x3d\x62\x1e\x0e\x2e\x2f\x4c\xfc\xb7\x19\xd3\x41\x8d\xff\x70\x1e\xf5\xbc\x50\xf3\xb3\x7e\xb8\xfd\x7f\xa3\xfe\x3d\x66\x3f\xce\x99\x7b\x04\x2d\x7d\xb9\xf7\x13\xfb\xa6\x27\xf7\xc8\xb8\xaf\x23\x6f\xb7\xe3\x59\xfd\x78\x8b\x21\x5f\x4b\x32\x70\x6b\x15\x9e\x9e\x0f\x04\xee\x5d\xbc\x92\x0f\xa4\x6b\xf9\x00\x45\xf7\x66\x99\x0f\x00\xce\x1c\x86\x1c\x3c\xf0\x5b\xf8\x2c\x6e\x0f\x18\x57\xee\xde\x16\xa4\x91\x55\xe8\x81\x1a\x3b\x40\xae\xbb\x43\x32\x75\x9c\xce\x15\x53\x4b\xc7\x43\x6d\x99\xcb\x15\xe4\xd1\x03\x5d\x0d\x39\x41\xa4\x87\x0e\x3c\x91\x92\x0f\xc5\x65\xcb\xad\x6b\x2d\x23\x71\xd0\x15\xdd\xd7\x3c\x77\xe8\x71\x20\x24\xee\x6b\x1f\xdc\x9b\xf0\xb2\x61\xd3\xba\x8f\x21\x46\xd7\x89\x43\x83\x52\x92\x2d\xb3\xf9\x6e\x9d\x52\x3d\xb0\xc9\x09\xba\x22\x2e\x73\xf3\x31\x02\xb9\x8c\xcb\x8d\xe6\x1a\x1c\x66\x36\xc7\xc9\x94\x0f\x87\x2e\x6f\x09\x5d\xf1\x1f\xfd\x4c\xaa\x61\x4f\x59\x0f\xbb\x28\xd7\x35\xb1\x72\x6d\x60\x02\xb2\x92\x65\x9a\xc3\x70\x50\xdb\xaf\x87\x8e\x64\x44\x2e\xbc\x59\x2f\xe6\xb2\x85\xf2\x42\xfb\x71\x00\xc3\xd9\xe9\xc3\x5e\xda\x7d\x0c\xb4\x6f\xeb\xf8\xba\x71\xf9\x01\xe4\x87\x3c\x89\xbc\x85\xf1\xf6\x70\x37\xee\xe3\x45\xa8\x24\x82\x03\x1a\x22\xc0\x9e\x46\x95\xc2\x96\xfd\x98\x60\xb4\x0d\x9d\xe8\x4f\x1e\x67\xf3\xc0\x44\x6d\xb0\x9c\x3e\xd5\x7d\xe1\x03\x0c\x39\x80\x71\xf9\x00\x44\xc2\x42\x96\xb3\x93\x36\x74\x66\x8f\x28\x57\x72\x28\xdb\xdc\xa3\xd1\x35\xe6\x1d\xeb\x49\xdf\xee\x63\x05\xbe\x4a\x29\x11\xd2\xb2\x0e\x85\x90\x19\xd6\xa5\xf3\x1d\x3e\x14\x6c\xc9\x0d\x36\x82\xe7\x19\x80\xf0\x76\x86\xb0\xf9\x17\x44\x77\x60\xe0\x43\xf2\x84\x6d\xea\xbf\x08\xfe\xf5\x64\x0b\x91\x1f\x7c\x4d\x47\xf8\x9f\xe5\xf7\xff\xd5\xf2\xfb\x96\x6d\x7e\x86\x68\xed\xa3\xe1\xdb\xff\xa0\xef\x8e\xd8\x7d\x38\x19\xdf\x6d\xd8\x8b\xc4\xf1\x57\x5d\x8a\xff\x45\xff\xa2\xf1\x59\x28\xb9\xa5\xda\x8d\xd2\x6c\x13\xad\xb4\xb5\x5a\xe3\xc3\xf7\xf0\x75\x3f\xee\x3f\x43\xe0\x3e\x24\xc7\x7c\xa4\xb7\x71\xdb\xef\x9b\x3d\x2a\x3f\xce\x2f\x7b\x04\x2d\x7d\xb2\xf7\xef\x46\x37\xdd\xb1\x47\xc6\x7d\x5d\x71\xbb\x1d\xcf\xea\x86\x5b\x0c\xe9\x3c\xf0\xc1\x74\x3a\x8e\x72\xdf\xa7\x6a\xf5\x02\x0e\xf8\x68\x3a\x0d\x0d\x84\xb2\x75\x7f\x2f\xc3\xdf\x33\xe0\x4a\x1c\x2d\xdd\x31\x82\x5b\x52\xf3\xa8\xdc\xdf\x6e\x40\xa3\xa9\xf3\x44\xae\x4e\x85\x7b\x72\x04\x21\xcb\xd6\x83\xdc\xdf\x64\x58\xd8\xa6\x26\x15\xe9\x6f\xec\xdc\x39\x74\x7f\xd7\xb3\xcd\xa5\xa1\xa9\x65\xe4\x8e\x99\x5a\x6d\xb9\x8f\x4b\x3f\x9e\x16\x6d\x88\xd9\x74\xe7\x5d\xb4\x68\x63\xf8\xa3\x3c\xf9\xa5\x68\x51\x9f\x05\x1d\x2d\x7a\x30\x2b\x7a\x4e\x27\xfe\x4f\x00\x00\x00\xff\xff\x43\xba\xda\x24\x00\x30\x00\x00")

func templatesGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesGo,
		"templates.go",
	)
}

func templatesGo() (*asset, error) {
	bytes, err := templatesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates.go", size: 24576, mode: os.FileMode(420), modTime: time.Unix(1464888459, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"init/rails/.dockerignore": initRailsDockerignore,
	"init/rails/Dockerfile": initRailsDockerfile,
	"init/rails/docker-compose.yml": initRailsDockerComposeYml,
	"init/ruby/.dockerignore": initRubyDockerignore,
	"init/ruby/Dockerfile": initRubyDockerfile,
	"init/ruby/docker-compose.yml": initRubyDockerComposeYml,
	"init/sinatra/.dockerignore": initSinatraDockerignore,
	"init/sinatra/Dockerfile": initSinatraDockerfile,
	"init/sinatra/docker-compose.yml": initSinatraDockerComposeYml,
	"init/unknown/.dockerignore": initUnknownDockerignore,
	"init/unknown/Dockerfile": initUnknownDockerfile,
	"init/unknown/docker-compose.yml": initUnknownDockerComposeYml,
	"templates.go": templatesGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"init": &bintree{nil, map[string]*bintree{
		"rails": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initRailsDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initRailsDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initRailsDockerComposeYml, map[string]*bintree{}},
		}},
		"ruby": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initRubyDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initRubyDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initRubyDockerComposeYml, map[string]*bintree{}},
		}},
		"sinatra": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initSinatraDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initSinatraDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initSinatraDockerComposeYml, map[string]*bintree{}},
		}},
		"unknown": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initUnknownDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initUnknownDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initUnknownDockerComposeYml, map[string]*bintree{}},
		}},
	}},
	"templates.go": &bintree{templatesGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

