// Code generated by go-bindata.
// sources:
// templates/init/rails/.dockerignore
// templates/init/rails/Dockerfile
// templates/init/rails/docker-compose.yml
// templates/init/ruby/.dockerignore
// templates/init/ruby/Dockerfile
// templates/init/ruby/docker-compose.yml
// templates/init/sinatra/.dockerignore
// templates/init/sinatra/Dockerfile
// templates/init/sinatra/docker-compose.yml
// templates/init/unknown/.dockerignore
// templates/init/unknown/Dockerfile
// templates/init/unknown/docker-compose.yml
// templates/templates.go
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _initRailsDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\xd7\x4b\xce\xcf\x2b\xcb\xaf\x00\x32\x52\xf3\xca\x80\x64\x7a\x66\x09\x97\x7e\x4a\x92\xbe\x96\x5e\x71\x61\x4e\x66\x49\xaa\x31\x2a\x4f\x37\x2b\xbf\xb4\x28\x2f\x31\x87\x4b\x3f\x27\x3f\x5d\x5f\x8b\x4b\xbf\x24\xb7\x80\x0b\x10\x00\x00\xff\xff\xa0\x04\x95\x56\x4e\x00\x00\x00")

func initRailsDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerignore,
		"init/rails/.dockerignore",
	)
}

func initRailsDockerignore() (*asset, error) {
	bytes, err := initRailsDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/.dockerignore", size: 78, mode: os.FileMode(420), modTime: time.Unix(1465598672, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRailsDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x50\xbb\x4e\xc4\x30\x10\xec\xfd\x15\x2b\xd1\x5f\x7a\x5a\x24\xa8\xe0\x50\x24\x0a\xba\xf3\x39\xeb\x60\xe2\xd8\x96\x1f\x27\xf2\xf7\x6c\xd6\x09\x21\xa7\xa4\xca\x3c\xec\x99\xf1\x73\x7b\x7e\x05\xe5\xdd\xcd\xff\x34\x51\x1a\x9b\x84\x78\x20\x1c\x26\xf0\xce\x4e\x90\xbf\x10\xb4\xb1\x98\xc0\x21\x76\xd8\x81\xf6\x11\xae\xc5\x75\x16\xc1\xb8\x94\xa5\xb5\xe4\x2f\x4e\xf9\x71\x44\x97\xd9\x7f\x43\xd7\xf9\xd8\x28\xa9\x08\x58\xe3\xc8\xa9\x61\xf2\x05\x2e\xcb\xc1\x20\xd5\x20\x7b\xbc\xcc\x64\x84\x1e\xc7\x24\x9e\xce\xef\x9f\xf0\x82\xe3\x9c\x05\xfc\x35\x32\x84\x66\x61\x76\xf2\xc9\x7a\x35\xec\x64\x66\xa8\x06\xbb\x76\xe9\xec\xfa\xcf\x88\xf6\xe3\xed\xbe\xff\x3a\xf8\xbb\xa4\x7c\x3c\x58\xa6\x84\x39\x3d\x86\x88\xb4\x33\xfc\x15\x6a\xe5\x80\x4b\x61\x0e\x5a\x71\x55\xe9\x51\xb5\xe9\xb7\x2d\x15\x57\x2d\x94\xab\x35\x6a\xd3\x2a\xae\xda\x8c\x6b\x60\xd5\x36\xcc\xe5\x23\x85\x1c\x14\x5a\x47\xcc\xfd\x23\xd2\x10\xaf\xf9\x9f\x4e\xd7\x6b\x4f\x7c\x9b\xf8\x0d\x00\x00\xff\xff\x08\xae\x24\x4e\xf0\x01\x00\x00")

func initRailsDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerfile,
		"init/rails/Dockerfile",
	)
}

func initRailsDockerfile() (*asset, error) {
	bytes, err := initRailsDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/Dockerfile", size: 496, mode: os.FileMode(420), modTime: time.Unix(1465162563, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRailsDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\x03\x32\x73\x12\x93\x52\x73\x8a\x41\x82\x0a\x0a\xba\x0a\xc9\xf9\x79\x65\xf9\x15\x7a\x05\xf9\x45\x25\x7a\x26\x26\xc6\x7a\x05\x45\xf9\x25\xf9\xc9\xf9\x39\xb6\x25\x39\xc5\xb8\x95\x54\x54\xda\x96\x14\x95\xa6\x02\x15\x80\x44\xe1\x86\x59\x18\x58\x99\x18\x18\x18\x40\x79\x40\xb5\x20\xae\x21\x17\x20\x00\x00\xff\xff\xc0\xe1\x22\xef\x84\x00\x00\x00")

func initRailsDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerComposeYml,
		"init/rails/docker-compose.yml",
	)
}

func initRailsDockerComposeYml() (*asset, error) {
	bytes, err := initRailsDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/docker-compose.yml", size: 132, mode: os.FileMode(420), modTime: time.Unix(1465162563, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRubyDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\xd7\x4b\xce\xcf\x2b\xcb\xaf\x00\x32\x52\xf3\xca\x80\x64\x7a\x66\x09\x17\x20\x00\x00\xff\xff\xc9\x68\x92\x70\x1e\x00\x00\x00")

func initRubyDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerignore,
		"init/ruby/.dockerignore",
	)
}

func initRubyDockerignore() (*asset, error) {
	bytes, err := initRubyDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/.dockerignore", size: 30, mode: os.FileMode(420), modTime: time.Unix(1465598672, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRubyDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xcd\x4e\xc0\x20\x10\x84\xef\x3c\xc5\x26\xde\xcb\x43\x98\xe8\x49\x6b\x9a\x78\xf0\x56\x0a\x4b\x6d\x0a\xbb\x84\x9f\x46\xde\x5e\x8a\x35\xb1\x72\x62\x67\xbf\x61\x86\xa7\x69\x7c\x01\xcd\x74\xf0\x97\x8c\x65\xa9\x42\x3c\xb4\x31\x54\x60\x72\x15\xf2\x27\x82\xdd\x1c\x26\x20\x44\x83\x06\x2c\x47\x58\x0a\x19\x87\xb0\x51\xca\xca\xb9\xc6\x17\xd2\xec\x3d\x52\xee\xfc\x81\x64\x38\x4a\xad\x74\x1b\xdc\x46\x8d\xb4\x50\xb9\xc0\x7c\x19\x83\xd2\xbb\x5a\x71\x3e\xc5\x08\x2b\xfa\x24\x1e\xc7\xb7\x0f\x78\x46\x7f\x66\x41\x3f\x52\x85\x20\x2f\xe5\xb6\x1e\x1c\xeb\xfd\xb6\xee\x4a\xab\xd1\xa9\x5b\x7a\xa7\xfe\x2a\x62\x7a\x7f\xfd\xdf\xff\xf7\xc3\x67\xf7\x88\x29\x03\xdb\x7e\x6f\xde\x9f\xe0\xa1\xbf\x23\xbe\x03\x00\x00\xff\xff\x8b\xae\xa0\xae\x2a\x01\x00\x00")

func initRubyDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerfile,
		"init/ruby/Dockerfile",
	)
}

func initRubyDockerfile() (*asset, error) {
	bytes, err := initRubyDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/Dockerfile", size: 298, mode: os.FileMode(420), modTime: time.Unix(1465162563, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRubyDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8c\xc1\x0a\x83\x30\x0c\x86\xef\x3e\x45\xf0\x6e\xe9\x98\x87\x21\xf8\x30\x5a\x03\xca\xa2\x29\x69\x3a\xed\xdb\x2f\x85\x6d\xb7\xdd\xfa\xf5\xff\xf2\x9d\x38\x0f\x0d\xc0\x9c\x37\x5a\x06\x70\xf6\x0c\xbc\xef\xd3\x61\x80\x61\x65\x68\x71\xd9\x14\x16\x0e\x4f\x94\xce\xa6\xc8\x09\x5d\xd9\x09\xce\x4d\x57\x28\x9c\x05\x92\x4e\xa2\x39\x7e\x0f\x5b\x6b\xd0\x34\x23\xa5\x1a\x06\xe8\x6c\x38\x5e\x7c\xb9\xc8\xa2\xae\xef\xef\x2e\x0a\x2b\x07\xa6\x51\x29\xfd\x57\xae\x32\xaa\x64\x34\xa1\xfe\xfe\x62\x0f\x3f\xf4\xde\xfb\x0f\x99\x5b\xf1\xd6\xbc\x03\x00\x00\xff\xff\xae\x01\x4e\xf5\xc8\x00\x00\x00")

func initRubyDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerComposeYml,
		"init/ruby/docker-compose.yml",
	)
}

func initRubyDockerComposeYml() (*asset, error) {
	bytes, err := initRubyDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/docker-compose.yml", size: 200, mode: os.FileMode(420), modTime: time.Unix(1465162563, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initSinatraDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\xd7\x4b\xce\xcf\x2b\xcb\xaf\x00\x32\x52\xf3\xca\x80\x64\x7a\x66\x09\x17\x20\x00\x00\xff\xff\xc9\x68\x92\x70\x1e\x00\x00\x00")

func initSinatraDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerignore,
		"init/sinatra/.dockerignore",
	)
}

func initSinatraDockerignore() (*asset, error) {
	bytes, err := initSinatraDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/.dockerignore", size: 30, mode: os.FileMode(420), modTime: time.Unix(1465598672, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initSinatraDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xc1\x6e\x84\x20\x10\x86\xef\x3c\xc5\x24\xbd\xcb\x43\x34\x69\x4f\xad\x8d\x49\x0f\xbd\x49\x61\x70\x89\x30\x43\x00\xcd\xfa\xf6\x8b\xac\x9b\xac\xeb\x49\xbe\xf9\x86\xff\xe7\x63\xe8\xbf\x40\x33\xad\x7c\x95\xd9\x91\x2a\x49\x09\xf1\x56\x49\xdc\x80\xc9\x6f\x50\x2e\x08\xd6\x79\xcc\x40\x88\x06\x0d\x58\x4e\xf0\xbf\x90\xf1\x08\x8e\x72\x51\xde\x57\x7f\x21\xcd\x21\x20\x95\xe6\xaf\x48\x86\x93\xd4\x4a\xd7\x83\x77\x54\x4d\x0b\x1b\x2f\x30\x1e\x8b\x51\xe9\x59\x4d\x38\xee\x30\xc1\x84\x21\x8b\xf7\xfe\xe7\x0f\x3e\x31\xec\x59\xd0\x3e\xa9\x62\x94\x07\x39\x8d\x3b\xcf\x7a\x3e\x8d\x1b\xa9\x35\x9a\x75\x4a\x6f\xd6\x33\x11\xc3\xef\xf7\x6b\xff\xc7\x83\xf7\xee\x09\x73\x01\xb6\xed\xbf\xee\xde\x83\xbb\x76\x8f\xb8\x05\x00\x00\xff\xff\x9c\x51\x49\xbe\x2d\x01\x00\x00")

func initSinatraDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerfile,
		"init/sinatra/Dockerfile",
	)
}

func initSinatraDockerfile() (*asset, error) {
	bytes, err := initSinatraDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/Dockerfile", size: 301, mode: os.FileMode(420), modTime: time.Unix(1465162563, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initSinatraDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\x03\x32\x73\x12\x93\x52\x73\x8a\x41\x82\x0a\x0a\xba\x0a\xc9\xf9\x79\x65\xf9\x15\x7a\x05\xf9\x45\x25\x7a\x26\x26\xc6\x7a\x05\x45\xf9\x25\xf9\xc9\xf9\x39\xb6\x25\x39\xc5\xb8\x95\x54\x54\xda\x96\x14\x95\xa6\x02\x15\x80\x44\xe1\x86\x59\x18\x58\x99\x18\x18\x18\x40\x79\x40\xb5\x20\xae\x21\x17\x20\x00\x00\xff\xff\xc0\xe1\x22\xef\x84\x00\x00\x00")

func initSinatraDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerComposeYml,
		"init/sinatra/docker-compose.yml",
	)
}

func initSinatraDockerComposeYml() (*asset, error) {
	bytes, err := initSinatraDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/docker-compose.yml", size: 132, mode: os.FileMode(420), modTime: time.Unix(1465162563, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initUnknownDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\x4b\xcd\x2b\xe3\xd2\x4b\xcf\x2c\xe1\x02\x04\x00\x00\xff\xff\x9c\x10\x28\x7b\x0a\x00\x00\x00")

func initUnknownDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initUnknownDockerignore,
		"init/unknown/.dockerignore",
	)
}

func initUnknownDockerignore() (*asset, error) {
	bytes, err := initUnknownDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/unknown/.dockerignore", size: 10, mode: os.FileMode(420), modTime: time.Unix(1465598780, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initUnknownDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x0b\xf2\xf7\x55\x28\x4d\x2a\xcd\x2b\x29\xb5\x32\x34\xd3\x33\x30\xe1\xe2\x72\xf6\x0f\x88\x54\xd0\x53\xd0\x4f\x2c\x28\xe0\x02\x04\x00\x00\xff\xff\xf1\xa3\x65\xfc\x1f\x00\x00\x00")

func initUnknownDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initUnknownDockerfile,
		"init/unknown/Dockerfile",
	)
}

func initUnknownDockerfile() (*asset, error) {
	bytes, err := initUnknownDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/unknown/Dockerfile", size: 31, mode: os.FileMode(420), modTime: time.Unix(1465598780, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initUnknownDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x4d\xcc\xcc\xb3\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\xe3\x02\x04\x00\x00\xff\xff\xa6\xe1\xc1\x85\x11\x00\x00\x00")

func initUnknownDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initUnknownDockerComposeYml,
		"init/unknown/docker-compose.yml",
	)
}

func initUnknownDockerComposeYml() (*asset, error) {
	bytes, err := initUnknownDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/unknown/docker-compose.yml", size: 17, mode: os.FileMode(420), modTime: time.Unix(1465598780, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9a\x5b\x6f\x1b\x47\xd2\x86\xaf\xc5\x5f\x31\x11\x90\x80\xfa\xa0\x50\x73\x3e\x08\xc8\x4d\xec\x7c\x40\x2e\xd6\x01\x12\xe7\x62\xb1\x5a\x04\x73\xe8\xd1\x12\x96\x48\x2d\x49\x25\x92\x0d\xff\xf7\xad\xa7\xab\x47\xa4\xc8\x21\x25\x51\x12\xe2\x3d\x18\x18\x73\xa6\xa7\xbb\xba\xaa\xbb\xea\xed\xb7\x6a\x74\x72\xe2\xbd\x99\x36\xc6\x3b\x37\x13\x33\x2b\x17\xa6\xf1\xaa\x5b\xef\x7c\xfa\x6d\x35\x9e\x34\xe5\xa2\x1c\x0d\xa4\xc3\x7c\x7a\x3d\xab\xcd\xfc\x94\xfb\x85\xb9\xbc\xba\x90\x7e\xf3\x93\xf1\x64\xbc\x38\x99\x95\xe3\x8b\xf9\xc9\xa8\x99\xd6\x1f\xcc\x6c\x7c\x3e\x99\xce\xcc\xd6\x5e\x6f\x6d\xa7\x76\x7c\xb1\xbd\x8b\xca\xf9\xb6\x9e\x5e\x5e\x4d\xe7\x66\x74\x7b\x79\xd1\xd7\xf5\xba\xba\x7d\x78\x4a\x3a\xed\x9e\x91\x1e\x8f\x9a\x70\x3e\x9e\x94\x8b\x59\xf9\xe0\x9c\x5d\xbf\x9d\xd3\x76\x9d\x1e\x35\xf3\xf5\xe4\xc3\x64\xfa\xc7\xe4\xc1\x99\xbb\x7e\x3b\x67\xee\x3a\x3d\x34\xf3\xdd\xdd\xe8\x7c\xca\x9b\xb7\x3f\x79\xef\x7e\x7a\xef\xfd\xf0\xf6\xc7\xf7\x5f\x0d\x06\x57\x65\xfd\xa1\x3c\x37\xcb\xfe\x83\xc1\x58\x04\xcd\x16\xde\x70\x70\x70\x58\xdd\x4a\xcb\xa1\xdc\x20\x7d\x66\xe6\xf3\x93\xf3\x8f\xe3\x2b\x1a\xda\xcb\x05\x3f\xe3\xa9\xfe\x7f\x32\x9e\x5e\x2f\xc6\x17\x3c\x4c\xed\x80\xab\x72\xf1\x8f\x13\x34\xe7\x86\x86\xf9\x62\x36\x9e\x9c\xdb\x77\x8b\xf1\xa5\x39\x1c\x1c\x0d\x06\xed\xf5\xa4\xf6\x9c\x6b\xfe\x6c\xca\x66\xc8\x8d\xf7\xb7\xbf\x33\xed\xb1\x37\x29\x2f\x8d\xa7\xc3\x8e\xbc\x61\xd7\x6a\x66\xb3\xe9\xec\xc8\xfb\x34\x38\x38\xff\x68\x9f\xbc\xd3\xef\x3c\xb4\x1a\xbd\x33\x7f\x20\xc4\xcc\x86\x56\x6d\x9e\xbf\xbf\x6e\x5b\x79\x46\xec\xd1\xd1\xe0\x60\xdc\xda\x01\x5f\x7d\xe7\x4d\xc6\x17\x88\x38\x98\x99\xc5\xf5\x6c\xc2\xe3\xb1\x27\x26\x8d\x7e\x40\x7a\x3b\x3c\x44\x90\xf7\xf5\x3f\x4f\xbd\xaf\x7f\x3f\x54\x4d\xec\x5c\x22\xe3\xf3\x60\x70\xf0\x7b\x39\xf3\xaa\xeb\xd6\xd3\x79\x74\x92\xc1\xc1\x6f\xaa\xce\x77\xde\x78\x3a\x7a\x33\xbd\xba\x1d\x7e\x23\x7d\x8e\x45\x37\x19\x55\x5f\xfc\xd0\x69\x3a\x7a\x73\x21\xfb\x34\x14\xf3\x5f\x48\x1f\xc4\xa8\xfc\x2d\x82\xa4\xa3\xea\xed\x1a\x45\xad\xd1\xf7\xa8\x3e\x3c\x3a\xa6\xc7\x40\xde\x2d\x6e\xaf\x8c\x57\xce\xe7\x66\xc1\x92\x5f\xd7\x0b\xa4\x58\xfb\xdc\x7e\xc8\x34\x93\x76\xea\x79\xd3\xf9\xe8\xff\x65\x5b\x7f\x94\x87\xbb\x71\x6e\x0b\xbb\xf6\x15\x09\x76\x0f\xe5\x9f\x6e\xe3\xe0\x60\x3e\xfe\x68\x9f\xc7\x93\x45\x1a\x0f\x0e\x2e\xc1\x2a\xef\x4e\xe8\x5f\xe4\xd1\x36\xbe\x17\x0f\xf1\x70\x93\x11\x77\xcc\x63\x5d\x65\xd8\x8e\xd7\xe7\x3a\xf2\xde\xc9\x14\xc3\x23\x37\x03\x73\x3a\x2b\xdb\xf1\x88\xd9\x65\xf0\xf6\xb1\xbf\x88\x3a\x32\xd6\x6a\x73\x7f\x28\x8a\xee\x1c\x8a\xae\x32\x74\x45\xf3\xfb\x02\x30\xed\x21\x01\x18\x27\x32\xee\x0c\xdd\x90\xe0\xac\xdf\x2e\xe4\xc7\xf9\xdb\xf1\x4c\x44\x54\xd3\xe9\xc5\xea\xe8\xf2\x62\xfe\x80\xe5\xb7\x73\x35\x5c\xf0\xa5\xac\xcd\xa7\xcf\x2b\xa3\x9d\x4b\xe0\xe5\xbf\x01\x35\x3f\x03\xe6\x6f\x57\x20\x4b\x7c\x5c\x9d\x62\x78\x78\x76\x13\xb4\x67\x37\x79\x75\x76\xe3\xe7\x72\xf9\xee\x2a\xce\x6e\x52\x23\xed\xae\xad\x95\x3e\x4d\x28\x57\x76\x76\x13\x4b\xdf\xb0\x3c\xbb\xa9\x1b\xbd\xaf\xa5\x6f\x2c\x97\x49\xee\xf7\xa9\x65\x7c\x2d\xe3\x42\xee\xe5\x2a\x5b\x95\x15\x49\x9f\x44\xae\x36\x92\x76\x91\x93\x4b\x5b\x1a\x9f\xdd\x64\x72\x9f\xa6\x3a\x77\x21\x32\x32\x19\x1f\x4b\x5b\x21\x7d\x2b\xb9\x2f\xe4\x5d\x22\xbf\x59\x20\xfd\xe4\x8a\x8d\xf6\x67\xee\x52\xfa\x45\x81\xea\x15\xcb\x3c\x51\xa6\xf3\x56\x72\x5f\x89\xec\x50\xec\x08\x5b\xed\x93\x3b\xfd\x22\x74\xcb\xf4\x37\x11\x5b\x12\xb7\x0e\xb1\x1b\x17\xca\xb8\x2a\x53\xfd\x7c\x69\x0b\xfc\xe5\xfa\xb0\x1e\x5c\x25\xcf\xd2\xaf\x10\xdb\x93\x54\x75\xba\x5b\x43\xff\xb0\x83\xc8\xde\x4d\x70\x11\xdc\x87\x8c\x5d\x9c\xaf\x20\xab\x40\x42\xff\x5e\x1e\xcb\x9b\xc3\x6d\x87\xff\xa1\xbc\x3d\xba\x0b\xbf\xde\xf1\x68\xf0\x7f\x16\x38\x56\x35\xb0\xc8\x71\x07\xcf\xbb\xf4\x7f\x08\x05\xef\xc0\xcb\xc2\x8f\x08\x5b\x73\xe5\x4f\x04\xf9\xa9\xb7\xc3\x04\x8f\x58\x3e\xf5\xb2\xfc\xd8\x23\x28\x4f\x57\x63\x76\x18\x87\xfe\x91\x6d\x27\xd4\x4e\x35\x14\x7f\x9d\x8c\x6f\x86\x41\x9c\x26\x49\x91\xa7\x59\x78\xec\xf9\x47\x82\xb2\x25\x93\x7f\x63\x2d\xfd\x64\xcd\x3b\xf5\x9c\x95\x68\x76\x6a\xff\xff\x7c\xb7\xf6\xe5\xf1\xae\x30\xe2\x60\xdc\x2b\x88\xd2\x5a\x1c\x45\xee\xab\x4a\x9d\xa5\x16\xe7\x89\x7c\x75\x2e\x23\xef\x5a\x71\xc4\x20\x51\xe7\x6d\x02\x75\x4a\x02\x23\x29\xd5\x21\x4b\x91\x65\x7c\x95\xc1\xb3\x2f\xed\x55\xa9\xc1\x14\x11\x84\x32\x2e\x45\x16\x81\x98\x6b\xd0\x04\xce\xd1\x5b\x82\x2e\x53\x1d\x1a\x17\x68\xa1\xcc\x51\x4a\x5b\x19\x6b\x30\x46\xb5\xea\x51\xc8\xbb\x56\xde\x65\x22\x37\xab\x34\x18\xfd\xc4\x05\x79\xa3\xc1\x8f\x3d\x91\x8c\x4b\xa4\x5f\x40\xa0\x4a\xbf\x9c\x40\x26\xd8\xb0\x49\xe4\x84\x32\x4f\xeb\x2b\x18\x60\x6f\xe1\x6b\x70\x61\x2f\x81\x59\xc9\xd8\x42\xfa\xd7\xbe\xea\x92\xa5\xaa\x77\x2e\xf7\x2d\xba\xa3\x1f\xeb\x24\xf3\x66\x72\x05\xd2\x56\x4b\x5b\x85\x6d\xac\x87\xb4\x55\xe8\x15\x6b\x80\x33\x47\x5b\x28\x48\xc4\xb1\x02\x49\xc3\x33\xef\x22\x05\x27\xde\x33\x07\xa0\x50\x16\xba\x67\x09\xeb\x0a\x20\xb9\x36\x00\x86\xf5\xc2\xe6\xd0\x28\x80\x31\x2f\x76\x35\x89\xfe\xb2\x2e\x95\xd8\x58\xd7\x0a\x60\xd8\x1e\xd0\x37\xd3\xbd\x29\x8c\xda\x6d\x64\xee\xa2\xd5\x75\xc8\x43\x9d\xa7\xa8\x55\x76\x2b\xbf\x51\xa2\xa0\xc8\x78\x00\x2d\x75\xeb\xc0\xfc\x80\x2b\xfb\x4f\x1f\xe3\xe6\xa1\x0f\x7e\xe0\xa7\xea\x47\xf4\x35\x85\xf3\x9f\x52\x41\x17\x9f\x63\xfd\x98\xcb\x34\x0a\xa0\x76\xbf\xf0\x95\x5c\xc7\xb1\xe7\x59\xad\x7b\x8e\xfd\x65\xaa\x3a\xe0\x47\x91\x8c\xc9\x53\x95\xc3\x3e\x45\x91\xea\x8a\x6f\xa6\xa5\xfa\x01\xc0\x08\x58\xa2\xaf\x6f\xd4\x47\x59\xf7\x24\x51\x7d\xf0\x8b\xca\xdd\x03\xa4\xa1\xf3\xed\xc4\xdd\xdb\xfd\xab\xd4\x36\x64\x36\x91\x02\x38\xfb\xdd\x70\x30\x60\xaf\xf3\x67\xd6\x3c\x4a\x75\xad\x99\x3b\x94\xbe\x79\xa2\x3e\x16\xc4\x3a\x77\x9c\xe9\x7b\x62\x88\xf7\x1c\x46\xf8\x19\x07\x0f\x7b\x5e\x38\xff\xc0\x07\x90\xcb\x41\x81\xfd\xf8\x2d\x6b\xe2\x37\x9b\x00\x8f\x6f\xa0\x0f\xfb\x69\x7d\x8b\xf7\xc1\x43\x00\x0f\x3c\x3c\x1b\xde\x11\xb2\x0e\xee\xcb\x37\x3b\x91\x9d\x0e\x7b\xe0\xfa\x8a\xda\xaf\x80\xea\xab\xba\x3b\x48\x8f\x8b\xf4\xc9\x98\x1e\xa4\x61\x92\x46\xaf\x80\xe9\x6f\x34\x01\xfb\xeb\xe5\xc5\x5e\xc8\xde\x51\x8f\x98\x68\x0b\x15\x81\xa1\x39\x20\x75\x9c\x2f\x29\x13\x1e\x0a\x65\x01\xf9\x78\xdf\x20\x2f\x52\x04\x00\x6d\x03\xf9\x2d\x22\x7d\xc7\x73\x8e\xdc\x40\x91\x03\xb4\xef\x10\x9f\x5f\xd0\xc1\xa2\x1d\xfa\x24\x7a\x4f\x84\x81\x18\xbe\x7b\x8e\x89\x16\xd7\x06\x1a\x73\xd5\xe9\xb2\x4f\xec\xfa\x85\xee\xb7\x93\x09\x0a\x54\xa9\xb6\x73\x0f\x02\x5b\xd4\x25\x82\x63\xbd\x88\x52\x7b\xc2\x38\x0a\x04\x82\xf8\xa1\xea\x60\xd1\x41\xda\x4d\xa0\x48\x92\xa0\x9b\x43\xda\xc2\xdd\x77\x57\xec\xab\x0d\xfc\x56\x0e\x5d\x6d\xd4\x71\xb2\x64\xfa\xbc\x1e\x99\x9c\x18\xc8\x0e\x43\x45\x58\x90\xeb\x61\xea\xb5\xdc\xe4\x67\xc7\xe7\x52\xd4\x7a\x94\x6e\x66\xf4\x3b\xa3\x75\x29\x68\x8f\x98\xdd\x30\xe8\x15\x22\xb7\xcf\x1e\x17\xc1\x41\x14\xfe\xd9\x11\x7c\x5d\xdd\xfe\x5b\xe5\x36\x5b\x1d\x1a\xbd\x72\xcd\x77\x32\x5f\xa9\xc4\x36\x87\x5e\xb3\x79\x4f\x5f\x5e\x93\xb2\xe2\xc6\x1b\x25\xbd\x1e\x07\x5e\x1b\xfd\x68\xdf\xed\xd7\xfd\x65\xdd\xb6\x47\x7f\xe7\xb0\x91\xff\x67\x67\x11\x77\xf6\xef\x9d\x44\x24\x72\x84\xe4\xad\xf3\x52\xe3\xc8\xb3\x4b\x22\x80\x41\xe0\x10\x52\x07\x64\x03\xf7\x8d\x23\xb0\x10\x60\xc8\xb6\xc9\xd5\xab\x21\x41\x45\xa9\x84\x1d\x62\x43\x06\xcb\xb1\x62\x49\x5d\xe3\x8e\x1a\x47\xea\x2d\x79\x72\xb2\xc8\xc2\x73\x47\x4a\x39\xc6\x32\xf1\xd8\x94\x2b\x53\x72\x9f\x3a\xc8\x27\xb1\x48\x0b\x25\x59\x90\x26\xf4\xcd\x62\x9d\x0b\x62\x6e\x09\x5e\xa2\x84\x3b\x0e\x55\x67\x4b\x36\x03\x3d\x5e\x20\x7e\x99\x3b\x4e\x20\xc3\x24\x31\x1c\x83\x24\x20\x5d\x72\x11\xba\x63\x26\x8f\x94\x10\x87\xb5\x12\x41\x8e\x19\xf4\x0f\x0a\xcd\xf8\x2b\x5f\x09\x29\x51\xc9\x55\x15\x7a\x0c\x12\x8d\x44\x36\xe4\x19\xd2\x4b\xf4\x1a\xa3\x64\x97\x24\x84\xe8\x8d\x72\xad\x44\x94\x4e\xff\x80\xe4\xac\xd6\xf5\xc8\x1b\xd5\xd9\x26\x75\x85\xee\x05\xf6\xda\x79\x1d\x09\x65\x0d\x3b\x72\x1c\xb9\x64\x86\x3d\x06\x3d\x5a\x97\xd8\x75\x89\x03\x44\xd9\x6f\x75\x4f\x90\x4f\xe2\x62\xab\x1c\x81\xab\x54\x84\x4a\x7c\xb1\x9b\x84\x07\x64\xe2\x98\x66\x3c\x6b\x42\x02\x08\x01\xa6\xcd\xb8\x0a\x4a\xe9\x92\x49\xd6\x39\xa9\x14\x8d\xd8\x9b\xd6\x28\xda\xb1\x77\xb4\x31\x17\x63\x1b\x87\x48\x24\x8b\x75\xa4\xfb\xca\x3d\x3e\x18\x16\x4a\x57\x1a\x97\x14\xa6\xad\xfa\x04\xfe\x41\x62\x5a\x06\xae\x7a\x12\x69\xd2\x41\xdf\x75\xa4\xc3\xc7\x39\xde\xcb\xee\x98\x2f\xb7\x93\xea\x7b\xd1\xf2\x5c\x9c\x5b\xa3\xd4\xf7\xbf\x49\xec\x82\xb8\x27\x11\xea\x3e\x95\x5f\x1e\xde\x7a\xe8\x74\x58\x3c\xbd\x44\xf2\x5a\x87\xf1\x33\xd9\x34\x61\x06\x3c\x90\x73\x13\xc6\x84\x12\x75\x12\xbf\x56\x68\xb1\x10\x67\x1c\x7b\xf5\x75\x3c\x79\x26\xf0\x46\xb8\xc3\x1c\xc9\xe9\x18\x43\xe8\xf9\xee\x40\x2e\x43\x75\x61\x60\x89\x5c\x98\xdc\x18\x57\x26\x94\x08\x2b\x60\x8f\x10\x04\x62\x08\xcd\x36\x71\x6e\x0b\x2b\x6f\x14\x0a\x08\x4f\x72\x45\x42\x9d\x3c\x9e\x62\xa3\x9d\x23\xd5\x83\x9b\xbc\x1b\x3d\xa9\x0d\xa0\x27\x79\xad\x85\x44\x5f\x7f\x81\x3c\x0e\x7a\xe0\x80\xda\x04\xec\x99\xba\x06\x39\x34\x19\x04\x79\x31\x04\x03\x36\x4d\x3d\x82\xf5\xa1\x40\x49\x5f\xee\x6d\x2d\xa5\x71\x79\x74\xbe\xac\x25\x40\x1c\x38\x0e\xb0\x11\xc6\x6e\x6b\x36\xad\x86\x3c\x50\x4f\xa6\x41\xbd\x86\xd0\xa4\x6e\x12\x38\x9d\x39\x0e\xa8\x09\x61\x9b\x2d\xb0\xd6\x0e\xca\x72\x95\x55\xba\x1a\x06\x17\xb5\x10\xf6\x03\xe8\xf2\x33\xd5\x11\x58\x65\x4d\x5b\xa7\x13\xfd\x21\x42\x14\x65\x2d\x7c\xc6\x0a\x0b\xc0\x0d\x17\x70\x83\x5e\xc0\x59\x1b\x2b\x7c\xb4\x95\xb6\x15\x0e\xa2\xa8\x3d\x51\xa3\x62\x0d\xfb\x20\x84\x39\x7c\x57\x04\x66\x8f\xea\xfc\x11\x64\xe9\xd9\xe4\xbf\x47\xd2\x1a\x9c\x3c\x8a\xfa\xf7\x88\x79\x3a\xb8\xbc\x32\xf1\xdf\x66\x4c\x07\x35\xfe\xd3\x79\xd4\xcb\x42\xcd\x2f\xfa\xe1\xf6\xbf\x8d\xfa\xf7\x98\xbd\x9f\x33\xf7\x08\x5a\xfa\x72\xef\x27\xf6\x4d\x4f\xee\x91\xf1\x58\x47\xde\x6e\xc7\x8b\xfa\xf1\x16\x43\xbe\x94\x64\xe0\xde\x2a\x3c\x3f\x1f\x08\xdc\xbb\x78\x25\x1f\x48\xd7\xf2\x01\x8a\xee\xcd\x32\x1f\x00\x9c\x39\x0c\x39\x78\xe0\xb7\xf0\x59\xdc\x1e\x30\xae\xdc\xbd\x2d\x48\x23\xab\xd0\x03\x35\x76\x80\x5c\x77\x87\x64\xea\x38\x9d\x2b\xa6\x96\x8e\x87\xda\x32\x97\x2b\xc8\xa3\x07\xba\x1a\x72\x82\x48\x0f\x1d\x78\x22\x25\x1f\x8a\xcb\x96\x5b\xd7\x5a\x46\xe2\xa0\x2b\xba\xaf\x79\xee\xd0\xe3\x40\x48\xdc\xd7\x3e\xb8\x37\xe1\x65\xc3\xa6\x75\x1f\x43\x8c\xae\x13\x87\x06\xa5\x24\x5b\x66\xf3\xdd\x3a\xa5\x7a\x60\x93\x13\x74\x45\x5c\xe6\xe6\x63\x04\x72\x19\x97\x1b\xcd\x35\x38\xcc\x6c\x8e\x93\x29\x1f\x0e\x5d\xde\x12\xba\xe2\x3f\xfa\x99\x54\xc3\x9e\xb2\x1e\x76\x51\xae\x6b\x62\xe5\xda\xc0\x04\x64\x25\xcb\x34\x87\xe1\xa0\xb6\x5f\x0f\x1d\xc9\x88\x5c\x78\xb3\x5e\xcc\x65\x0b\xe5\x85\xf6\xe3\x00\x86\xb3\xd3\x87\xbd\xb4\xfb\x18\x68\xdf\xd6\xf1\x75\xe3\xf2\x03\xc8\x0f\x79\x12\x79\x0b\xe3\xed\xe1\x6e\xdc\xc7\x8b\x50\x49\x04\x07\x34\x44\x80\x3d\x8d\x2a\x85\x2d\xfb\x31\xc1\x68\x1b\x3a\xd1\x9f\x3c\xce\xe6\x81\x89\xda\x60\x39\x7d\xaa\xfb\xc2\x07\x18\x72\x00\xe3\xf2\x01\x88\x84\x85\x2c\x67\x27\x6d\xe8\xcc\x1e\x51\xae\xe4\x50\xb6\xb9\x47\xa3\x6b\xcc\x3b\xd6\x93\xbe\xdd\xc7\x0a\x7c\x95\x52\x22\xa4\x65\x1d\x0a\x21\x33\xac\x4b\xe7\x3b\x7c\x28\xd8\x92\x1b\x6c\x04\xcf\x0b\x00\xe1\xfd\x0c\x61\xf3\x2f\x88\x1e\xc0\xc0\xa7\xe4\x09\xdb\xd4\x7f\x15\xfc\xeb\xc9\x16\x22\x3f\xf8\x92\x8e\xf0\xff\x95\xdf\xff\x53\xcb\xef\x5b\xb6\xf9\x05\xa2\xb5\x8f\x86\x6f\xff\x83\xbe\x07\x62\xf7\xe9\x64\x7c\xb7\x61\xaf\x12\xc7\x5f\x74\x29\xfe\x57\xfd\x8b\xc6\x17\xa1\xe4\x96\x6a\x37\x4a\xb3\x4d\xb4\xd2\xd6\x6a\x8d\x0f\xdf\xc3\xd7\xfd\xb8\xff\x0c\x81\xfb\x90\x1c\xf3\x91\xde\xc6\x6d\xbf\x6f\xf6\xa8\xbc\x9f\x5f\xf6\x08\x5a\xfa\x64\xef\xdf\x8d\x6e\xba\x63\x8f\x8c\xc7\xba\xe2\x76\x3b\x5e\xd4\x0d\xb7\x18\xd2\x79\xe0\x5e\x74\x3a\xcb\xfd\x57\x71\xc0\xbd\xe9\x34\x34\x10\xca\xd6\xfd\xbd\x0c\x7f\xcf\x80\x2b\x71\xb4\x74\xc7\x08\x6e\x49\xcd\xa3\x72\x7f\xbb\x01\x8d\xa6\xce\x13\xb9\x3a\x15\xee\xc9\x11\x84\x2c\x5b\x0f\x72\x7f\x93\x61\x61\x9b\x9a\x54\xa4\xbf\xb1\x73\xe7\xd0\xfd\x5d\xcf\x36\x97\x86\xa6\x96\x91\x3b\x66\x6a\xb5\xe5\x31\x2e\xbd\x3f\x2d\xda\x10\xb3\xe9\xce\xbb\x68\xd1\xc6\xf0\xbd\x3c\xf9\xb5\x68\x51\x9f\x05\x1d\x2d\x7a\x3a\x2b\x7a\x41\x27\xfe\x57\x00\x00\x00\xff\xff\x0b\x37\xec\x80\x00\x30\x00\x00")

func templatesGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesGo,
		"templates.go",
	)
}

func templatesGo() (*asset, error) {
	bytes, err := templatesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates.go", size: 24576, mode: os.FileMode(420), modTime: time.Unix(1466542480, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"init/rails/.dockerignore": initRailsDockerignore,
	"init/rails/Dockerfile": initRailsDockerfile,
	"init/rails/docker-compose.yml": initRailsDockerComposeYml,
	"init/ruby/.dockerignore": initRubyDockerignore,
	"init/ruby/Dockerfile": initRubyDockerfile,
	"init/ruby/docker-compose.yml": initRubyDockerComposeYml,
	"init/sinatra/.dockerignore": initSinatraDockerignore,
	"init/sinatra/Dockerfile": initSinatraDockerfile,
	"init/sinatra/docker-compose.yml": initSinatraDockerComposeYml,
	"init/unknown/.dockerignore": initUnknownDockerignore,
	"init/unknown/Dockerfile": initUnknownDockerfile,
	"init/unknown/docker-compose.yml": initUnknownDockerComposeYml,
	"templates.go": templatesGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"init": &bintree{nil, map[string]*bintree{
		"rails": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initRailsDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initRailsDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initRailsDockerComposeYml, map[string]*bintree{}},
		}},
		"ruby": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initRubyDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initRubyDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initRubyDockerComposeYml, map[string]*bintree{}},
		}},
		"sinatra": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initSinatraDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initSinatraDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initSinatraDockerComposeYml, map[string]*bintree{}},
		}},
		"unknown": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initUnknownDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initUnknownDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initUnknownDockerComposeYml, map[string]*bintree{}},
		}},
	}},
	"templates.go": &bintree{templatesGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

