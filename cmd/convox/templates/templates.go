// Code generated by go-bindata.
// sources:
// templates/init/django/.dockerignore
// templates/init/django/Dockerfile
// templates/init/django/docker-compose.yml
// templates/init/rails/.dockerignore
// templates/init/rails/Dockerfile
// templates/init/rails/docker-compose.yml
// templates/init/ruby/.dockerignore
// templates/init/ruby/Dockerfile
// templates/init/ruby/docker-compose.yml
// templates/init/sinatra/.dockerignore
// templates/init/sinatra/Dockerfile
// templates/init/sinatra/docker-compose.yml
// templates/init/unknown/.dockerignore
// templates/init/unknown/Dockerfile
// templates/init/unknown/docker-compose.yml
// templates/templates.go
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _initDjangoDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\x4b\xce\xcf\x2b\xcb\xaf\xe0\xd2\x4b\xcd\x2b\xe3\xd2\x4b\xcf\x2c\x01\x13\x99\xe9\x79\xf9\x45\xa9\x5c\x80\x00\x00\x00\xff\xff\x57\x31\x5f\xce\x1d\x00\x00\x00")

func initDjangoDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initDjangoDockerignore,
		"init/django/.dockerignore",
	)
}

func initDjangoDockerignore() (*asset, error) {
	bytes, err := initDjangoDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/django/.dockerignore", size: 29, mode: os.FileMode(420), modTime: time.Unix(1468853813, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initDjangoDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\xcd\xae\xd3\x30\x10\x85\xf7\x79\x8a\x91\x60\xdb\x66\xd1\x27\x40\x25\x2c\x40\xb4\x51\x28\x48\x5d\x21\xe3\x4c\x52\x17\xc7\x63\xfc\x03\x8d\x50\xdf\x9d\xb1\xd3\xd0\xe6\xde\xbb\xb8\xbb\xcc\xf1\xcc\x99\x6f\x4e\x3e\x34\xfb\xcf\x20\xc9\xfc\xa6\x4b\xd9\x9e\x85\xe9\xa9\x28\xde\x80\x43\xab\x85\x44\xc0\x8b\x18\xac\x46\x61\x2d\x08\xd3\xce\xa5\x75\x74\x46\x19\x20\x10\x04\xa1\x34\x39\x08\x27\x04\x35\x88\x1e\x93\x36\x52\x74\x70\xeb\x61\xaf\xba\xd9\x7f\xac\xb6\x07\x50\x1e\x84\xf6\x04\xd1\x63\x0b\x3f\x46\xe8\xa3\x51\x92\x9c\x01\x65\xf2\xfc\x02\x02\xde\x93\xfc\x89\xae\x53\x1a\x8b\x6a\xf7\x0d\xde\xd5\xf5\x03\x4c\x96\x66\xdf\x25\x54\xa2\x17\x06\x70\xb0\x61\x84\x2f\xd5\xb6\xa9\x0e\xdf\x3f\x55\x47\x68\xa3\x53\xa6\x87\x41\x18\xa6\x5c\xdb\x91\xd7\x0d\x5c\xb4\x1e\xfe\x28\xad\xf9\x60\x1f\x75\x48\x28\x69\xd8\x39\x72\x79\xc7\x83\x41\x47\x39\x19\x49\x3c\x4b\x46\x8f\x99\x39\xf1\x79\x30\x88\x2d\xdf\xd4\x71\x10\x56\x59\x36\xf1\x41\x68\x5d\x6c\xf7\xf5\x91\x8d\x7f\x45\xe5\x70\x40\x13\xfc\x3a\x5c\x02\x94\xcc\x5f\x3e\x55\x8b\xe6\xeb\x2e\xcd\x6e\xe6\x61\x58\xad\xa2\xed\x9d\x68\x31\xc9\x2f\x3c\xbb\x67\xce\xaf\xa0\x93\xa4\x35\x67\xc4\x16\x41\xc9\x89\xef\xed\x5f\x8e\xf6\x5a\x4e\xd2\x04\xb7\x90\xe6\xae\x5b\xda\xd7\xb9\x65\xae\xa7\xf7\x7b\xac\xf9\xf9\x7f\x39\x81\x8f\xe1\x44\x66\xb3\xc8\xfe\x81\x83\x4f\x35\xa4\x8c\x8d\xf7\x0b\x12\x3c\xff\x91\x00\xd4\xe5\xef\xf4\xcb\xf3\x9e\x75\xf6\x2f\xfe\x05\x00\x00\xff\xff\x22\xcb\xe6\x65\xb5\x02\x00\x00")

func initDjangoDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initDjangoDockerfile,
		"init/django/Dockerfile",
	)
}

func initDjangoDockerfile() (*asset, error) {
	bytes, err := initDjangoDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/django/Dockerfile", size: 693, mode: os.FileMode(420), modTime: time.Unix(1468853813, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initDjangoDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8d\xc1\xaa\xc2\x30\x10\x45\xf7\xfd\x8a\xfc\xc0\xcb\x8b\x36\x82\x04\xba\x92\xae\xdc\xa9\x1b\x57\x92\xb4\x43\x09\xa6\x99\x92\x4c\x6b\xfd\x7b\x13\x68\xbb\x10\xdc\xcd\xbd\xf7\x70\xe6\x05\x46\x15\x8c\x99\xd1\xba\x56\x31\x9e\x4e\xf0\x93\x0d\xe8\x7b\xf0\x94\x17\xc6\xfe\xd8\xb5\x3e\x5d\xea\xdb\xe3\x5c\xdf\x53\xe1\xb4\x01\x17\xd7\xa9\x41\x3f\xe1\xcc\x07\x0c\xc4\xa5\x2c\xf9\x10\x90\xb0\x41\x57\x91\x8b\xbf\x91\xf9\x5d\x51\x18\x21\xdb\xac\x7f\x6e\xb2\x56\x93\x36\x3a\xe6\x3e\xd3\x5b\x7f\x14\x4a\x0a\x21\x96\x94\x1c\x39\xee\x8a\x15\xcf\x98\xed\x75\x07\x6a\xf9\xf5\x3f\x60\xa4\x2e\x40\xfc\x16\x1d\x64\xb9\x2f\x3e\x01\x00\x00\xff\xff\x25\x21\x30\xfe\xf3\x00\x00\x00")

func initDjangoDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initDjangoDockerComposeYml,
		"init/django/docker-compose.yml",
	)
}

func initDjangoDockerComposeYml() (*asset, error) {
	bytes, err := initDjangoDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/django/docker-compose.yml", size: 243, mode: os.FileMode(420), modTime: time.Unix(1468853813, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRailsDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\xd7\x4b\xce\xcf\x2b\xcb\xaf\x00\x32\x52\xf3\xca\x80\x64\x7a\x66\x09\x97\x7e\x4a\x92\xbe\x96\x5e\x71\x61\x4e\x66\x49\xaa\x31\x2a\x4f\x37\x2b\xbf\xb4\x28\x2f\x31\x87\x4b\x3f\x27\x3f\x5d\x5f\x8b\x4b\xbf\x24\xb7\x80\x0b\x10\x00\x00\xff\xff\xa0\x04\x95\x56\x4e\x00\x00\x00")

func initRailsDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerignore,
		"init/rails/.dockerignore",
	)
}

func initRailsDockerignore() (*asset, error) {
	bytes, err := initRailsDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/.dockerignore", size: 78, mode: os.FileMode(420), modTime: time.Unix(1464724173, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRailsDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x50\xbb\x4e\xc4\x30\x10\xec\xfd\x15\x2b\xd1\x5f\x7a\x5a\x24\xa8\xe0\x50\x24\x0a\xba\xf3\x39\xeb\x60\xe2\xd8\x96\x1f\x27\xf2\xf7\x6c\xd6\x09\x21\xa7\xa4\xca\x3c\xec\x99\xf1\x73\x7b\x7e\x05\xe5\xdd\xcd\xff\x34\x51\x1a\x9b\x84\x78\x20\x1c\x26\xf0\xce\x4e\x90\xbf\x10\xb4\xb1\x98\xc0\x21\x76\xd8\x81\xf6\x11\xae\xc5\x75\x16\xc1\xb8\x94\xa5\xb5\xe4\x2f\x4e\xf9\x71\x44\x97\xd9\x7f\x43\xd7\xf9\xd8\x28\xa9\x08\x58\xe3\xc8\xa9\x61\xf2\x05\x2e\xcb\xc1\x20\xd5\x20\x7b\xbc\xcc\x64\x84\x1e\xc7\x24\x9e\xce\xef\x9f\xf0\x82\xe3\x9c\x05\xfc\x35\x32\x84\x66\x61\x76\xf2\xc9\x7a\x35\xec\x64\x66\xa8\x06\xbb\x76\xe9\xec\xfa\xcf\x88\xf6\xe3\xed\xbe\xff\x3a\xf8\xbb\xa4\x7c\x3c\x58\xa6\x84\x39\x3d\x86\x88\xb4\x33\xfc\x15\x6a\xe5\x80\x4b\x61\x0e\x5a\x71\x55\xe9\x51\xb5\xe9\xb7\x2d\x15\x57\x2d\x94\xab\x35\x6a\xd3\x2a\xae\xda\x8c\x6b\x60\xd5\x36\xcc\xe5\x23\x85\x1c\x14\x5a\x47\xcc\xfd\x23\xd2\x10\xaf\xf9\x9f\x4e\xd7\x6b\x4f\x7c\x9b\xf8\x0d\x00\x00\xff\xff\x08\xae\x24\x4e\xf0\x01\x00\x00")

func initRailsDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerfile,
		"init/rails/Dockerfile",
	)
}

func initRailsDockerfile() (*asset, error) {
	bytes, err := initRailsDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/Dockerfile", size: 496, mode: os.FileMode(420), modTime: time.Unix(1464724173, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRailsDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\x03\x32\x73\x12\x93\x52\x73\x8a\x41\x82\x0a\x0a\xba\x0a\xc9\xf9\x79\x65\xf9\x15\x7a\x05\xf9\x45\x25\x7a\x26\x26\xc6\x7a\x05\x45\xf9\x25\xf9\xc9\xf9\x39\xb6\x25\x39\xc5\xb8\x95\x54\x54\xda\x96\x14\x95\xa6\x02\x15\x80\x44\xe1\x86\x59\x18\x58\x99\x18\x18\x18\x40\x79\x40\xb5\x20\xae\x21\x17\x20\x00\x00\xff\xff\xc0\xe1\x22\xef\x84\x00\x00\x00")

func initRailsDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerComposeYml,
		"init/rails/docker-compose.yml",
	)
}

func initRailsDockerComposeYml() (*asset, error) {
	bytes, err := initRailsDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/docker-compose.yml", size: 132, mode: os.FileMode(420), modTime: time.Unix(1465401430, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRubyDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\xd7\x4b\xce\xcf\x2b\xcb\xaf\x00\x32\x52\xf3\xca\x80\x64\x7a\x66\x09\x17\x20\x00\x00\xff\xff\xc9\x68\x92\x70\x1e\x00\x00\x00")

func initRubyDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerignore,
		"init/ruby/.dockerignore",
	)
}

func initRubyDockerignore() (*asset, error) {
	bytes, err := initRubyDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/.dockerignore", size: 30, mode: os.FileMode(420), modTime: time.Unix(1464724173, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRubyDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xcd\x4e\xc0\x20\x10\x84\xef\x3c\xc5\x26\xde\xcb\x43\x98\xe8\x49\x6b\x9a\x78\xf0\x56\x0a\x4b\x6d\x0a\xbb\x84\x9f\x46\xde\x5e\x8a\x35\xb1\x72\x62\x67\xbf\x61\x86\xa7\x69\x7c\x01\xcd\x74\xf0\x97\x8c\x65\xa9\x42\x3c\xb4\x31\x54\x60\x72\x15\xf2\x27\x82\xdd\x1c\x26\x20\x44\x83\x06\x2c\x47\x58\x0a\x19\x87\xb0\x51\xca\xca\xb9\xc6\x17\xd2\xec\x3d\x52\xee\xfc\x81\x64\x38\x4a\xad\x74\x1b\xdc\x46\x8d\xb4\x50\xb9\xc0\x7c\x19\x83\xd2\xbb\x5a\x71\x3e\xc5\x08\x2b\xfa\x24\x1e\xc7\xb7\x0f\x78\x46\x7f\x66\x41\x3f\x52\x85\x20\x2f\xe5\xb6\x1e\x1c\xeb\xfd\xb6\xee\x4a\xab\xd1\xa9\x5b\x7a\xa7\xfe\x2a\x62\x7a\x7f\xfd\xdf\xff\xf7\xc3\x67\xf7\x88\x29\x03\xdb\x7e\x6f\xde\x9f\xe0\xa1\xbf\x23\xbe\x03\x00\x00\xff\xff\x8b\xae\xa0\xae\x2a\x01\x00\x00")

func initRubyDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerfile,
		"init/ruby/Dockerfile",
	)
}

func initRubyDockerfile() (*asset, error) {
	bytes, err := initRubyDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/Dockerfile", size: 298, mode: os.FileMode(420), modTime: time.Unix(1464724173, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRubyDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8c\xc1\x0a\x83\x30\x0c\x86\xef\x3e\x45\xf0\x6e\xe9\x98\x87\x21\xf8\x30\x5a\x03\xca\xa2\x29\x69\x3a\xed\xdb\x2f\x85\x6d\xb7\xdd\xfa\xf5\xff\xf2\x9d\x38\x0f\x0d\xc0\x9c\x37\x5a\x06\x70\xf6\x0c\xbc\xef\xd3\x61\x80\x61\x65\x68\x71\xd9\x14\x16\x0e\x4f\x94\xce\xa6\xc8\x09\x5d\xd9\x09\xce\x4d\x57\x28\x9c\x05\x92\x4e\xa2\x39\x7e\x0f\x5b\x6b\xd0\x34\x23\xa5\x1a\x06\xe8\x6c\x38\x5e\x7c\xb9\xc8\xa2\xae\xef\xef\x2e\x0a\x2b\x07\xa6\x51\x29\xfd\x57\xae\x32\xaa\x64\x34\xa1\xfe\xfe\x62\x0f\x3f\xf4\xde\xfb\x0f\x99\x5b\xf1\xd6\xbc\x03\x00\x00\xff\xff\xae\x01\x4e\xf5\xc8\x00\x00\x00")

func initRubyDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerComposeYml,
		"init/ruby/docker-compose.yml",
	)
}

func initRubyDockerComposeYml() (*asset, error) {
	bytes, err := initRubyDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/docker-compose.yml", size: 200, mode: os.FileMode(420), modTime: time.Unix(1464724173, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initSinatraDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\xd7\x4b\xce\xcf\x2b\xcb\xaf\x00\x32\x52\xf3\xca\x80\x64\x7a\x66\x09\x17\x20\x00\x00\xff\xff\xc9\x68\x92\x70\x1e\x00\x00\x00")

func initSinatraDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerignore,
		"init/sinatra/.dockerignore",
	)
}

func initSinatraDockerignore() (*asset, error) {
	bytes, err := initSinatraDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/.dockerignore", size: 30, mode: os.FileMode(420), modTime: time.Unix(1464724173, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initSinatraDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xc1\x6e\x84\x20\x10\x86\xef\x3c\xc5\x24\xbd\xcb\x43\x34\x69\x4f\xad\x8d\x49\x0f\xbd\x49\x61\x70\x89\x30\x43\x00\xcd\xfa\xf6\x8b\xac\x9b\xac\xeb\x49\xbe\xf9\x86\xff\xe7\x63\xe8\xbf\x40\x33\xad\x7c\x95\xd9\x91\x2a\x49\x09\xf1\x56\x49\xdc\x80\xc9\x6f\x50\x2e\x08\xd6\x79\xcc\x40\x88\x06\x0d\x58\x4e\xf0\xbf\x90\xf1\x08\x8e\x72\x51\xde\x57\x7f\x21\xcd\x21\x20\x95\xe6\xaf\x48\x86\x93\xd4\x4a\xd7\x83\x77\x54\x4d\x0b\x1b\x2f\x30\x1e\x8b\x51\xe9\x59\x4d\x38\xee\x30\xc1\x84\x21\x8b\xf7\xfe\xe7\x0f\x3e\x31\xec\x59\xd0\x3e\xa9\x62\x94\x07\x39\x8d\x3b\xcf\x7a\x3e\x8d\x1b\xa9\x35\x9a\x75\x4a\x6f\xd6\x33\x11\xc3\xef\xf7\x6b\xff\xc7\x83\xf7\xee\x09\x73\x01\xb6\xed\xbf\xee\xde\x83\xbb\x76\x8f\xb8\x05\x00\x00\xff\xff\x9c\x51\x49\xbe\x2d\x01\x00\x00")

func initSinatraDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerfile,
		"init/sinatra/Dockerfile",
	)
}

func initSinatraDockerfile() (*asset, error) {
	bytes, err := initSinatraDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/Dockerfile", size: 301, mode: os.FileMode(420), modTime: time.Unix(1464724173, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initSinatraDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\x03\x32\x73\x12\x93\x52\x73\x8a\x41\x82\x0a\x0a\xba\x0a\xc9\xf9\x79\x65\xf9\x15\x7a\x05\xf9\x45\x25\x7a\x26\x26\xc6\x7a\x05\x45\xf9\x25\xf9\xc9\xf9\x39\xb6\x25\x39\xc5\xb8\x95\x54\x54\xda\x96\x14\x95\xa6\x02\x15\x80\x44\xe1\x86\x59\x18\x58\x99\x18\x18\x18\x40\x79\x40\xb5\x20\xae\x21\x17\x20\x00\x00\xff\xff\xc0\xe1\x22\xef\x84\x00\x00\x00")

func initSinatraDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerComposeYml,
		"init/sinatra/docker-compose.yml",
	)
}

func initSinatraDockerComposeYml() (*asset, error) {
	bytes, err := initSinatraDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/docker-compose.yml", size: 132, mode: os.FileMode(420), modTime: time.Unix(1464724173, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initUnknownDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\x4b\xcd\x2b\xe3\xd2\x4b\xcf\x2c\xe1\x02\x04\x00\x00\xff\xff\x9c\x10\x28\x7b\x0a\x00\x00\x00")

func initUnknownDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initUnknownDockerignore,
		"init/unknown/.dockerignore",
	)
}

func initUnknownDockerignore() (*asset, error) {
	bytes, err := initUnknownDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/unknown/.dockerignore", size: 10, mode: os.FileMode(420), modTime: time.Unix(1464724173, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initUnknownDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x0b\xf2\xf7\x55\x28\x4d\x2a\xcd\x2b\x29\xb5\x32\x34\xd3\x33\x30\xe1\xe2\x72\xf6\x0f\x88\x54\xd0\x53\xd0\x4f\x2c\x28\xe0\x02\x04\x00\x00\xff\xff\xf1\xa3\x65\xfc\x1f\x00\x00\x00")

func initUnknownDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initUnknownDockerfile,
		"init/unknown/Dockerfile",
	)
}

func initUnknownDockerfile() (*asset, error) {
	bytes, err := initUnknownDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/unknown/Dockerfile", size: 31, mode: os.FileMode(420), modTime: time.Unix(1464724173, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initUnknownDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x4d\xcc\xcc\xb3\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\xe3\x02\x04\x00\x00\xff\xff\xa6\xe1\xc1\x85\x11\x00\x00\x00")

func initUnknownDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initUnknownDockerComposeYml,
		"init/unknown/docker-compose.yml",
	)
}

func initUnknownDockerComposeYml() (*asset, error) {
	bytes, err := initUnknownDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/unknown/docker-compose.yml", size: 17, mode: os.FileMode(420), modTime: time.Unix(1464724173, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9b\x5b\x6f\x1b\x47\xb2\xc7\x9f\xc5\x4f\x31\x11\x90\x40\x3a\x50\xa4\xb9\x73\x46\x40\x5e\x62\xe7\x00\x79\x38\x09\x90\xcb\xc3\xc1\x7a\x11\xcc\xa5\x47\xcb\x8d\x44\x7a\x49\x2a\xb1\x62\xe4\xbb\x6f\xff\xaa\x6a\x44\x4a\x1c\x52\x32\x25\xc1\xde\x8b\x81\xb1\xc8\x9e\xee\xea\xaa\xee\xaa\x7f\x5d\xba\x79\x76\x16\xbc\x9a\xb5\x2e\xb8\x70\x53\x37\xaf\x96\xae\x0d\xea\x9b\xe0\x62\xf6\x65\x3d\x99\xb6\xd5\xb2\x3a\x1d\xf9\x0e\x8b\xd9\xf5\xbc\x71\x8b\x73\x3e\x2f\xdd\xd5\xdb\x4b\xdf\x6f\x71\x36\x99\x4e\x96\x67\xed\xdf\xab\xe9\xc5\xec\xec\xb4\x9d\x35\xbf\xba\xf9\xe4\x62\x3a\x9b\xbb\xed\xdd\x5e\x4b\xaf\x6e\x72\xb9\xa3\x8f\x52\xfa\xb2\x99\x5d\xbd\x9d\x2d\xdc\xe9\xcd\xd5\xe5\x40\xdf\x79\x35\xb9\x5c\x3c\x38\xab\xf6\xda\x39\xa9\x76\x79\xdc\x9c\xd7\xf5\xcd\xc3\x53\xd2\x69\xf7\x8c\xf4\x78\xd4\x84\x8b\xc9\xb4\x5a\xce\xab\x07\xe7\xec\xfb\xed\x9c\xb6\xef\xf4\xa8\x99\xaf\xa7\xbf\x4e\x67\xbf\x4f\x1f\x9c\xb9\xef\xb7\x73\xe6\xbe\xd3\x43\x33\xdf\x7e\x3a\xbd\x98\xf1\xe6\xf5\xf7\xc1\x77\xdf\xff\x14\x7c\xf3\xfa\xdb\x9f\x3e\x1b\x8d\xde\x56\xcd\xaf\xd5\x85\x5b\xf5\x1f\x8d\x26\x9e\xd0\x7c\x19\x1c\x8d\x0e\x0e\xeb\x1b\xdf\x72\xe8\x3f\x40\x7d\xee\x16\x8b\xb3\x8b\x3f\x26\x6f\x69\xe8\xae\x96\xfc\x99\xcc\xf4\xff\xb3\xc9\xec\x7a\x39\xb9\xe4\xcb\x4c\x06\xbc\xad\x96\x7f\x3b\x83\x73\x3e\xd0\xb0\x58\xce\x27\xd3\x0b\x79\xb7\x9c\x5c\xb9\xc3\xd1\xf1\x68\xd4\x5d\x4f\x9b\xc0\x2c\xe2\x07\x57\xb5\x47\x7c\x08\xfe\xf2\x57\xa6\x3d\x09\xa6\xd5\x95\x0b\x74\xd8\x71\x70\xd4\xb7\xba\xf9\x7c\x36\x3f\x0e\xde\x8f\x0e\x2e\xfe\x90\x6f\xc1\xf9\x57\x01\x5c\x9d\x7e\xe7\x7e\x87\x88\x9b\x1f\x09\xdb\x7c\xff\xfa\xba\xeb\xfc\x77\xc8\x1e\x1f\x8f\x0e\x26\x9d\x0c\xf8\xec\xab\x60\x3a\xb9\x84\xc4\xc1\xdc\x2d\xaf\xe7\x53\xbe\x9e\x04\x5e\xa4\xd3\x6f\xa0\xde\x1d\x1d\x42\x28\xf8\xfc\x1f\xe7\xc1\xe7\xbf\x1d\x2a\x27\x32\x97\xa7\xf1\xe7\x68\x74\xf0\x5b\x35\x0f\xea\xeb\x2e\xd0\x79\x74\x92\xd1\xc1\x2f\xca\xce\x57\xc1\x64\x76\xfa\x6a\xf6\xf6\xe6\xe8\x0b\xdf\xe7\xc4\xf3\xe6\x47\x35\x97\xdf\xf4\x9c\x9e\xbe\xba\xf4\xfb\x74\xe4\xc5\x7f\x26\x7e\x20\xa3\xf4\xb7\x10\xf2\x1d\x95\x6f\x6b\xf4\x6c\x9d\x7e\x0d\xeb\x47\xc7\x27\xf4\x18\xf9\x77\xcb\x9b\xb7\x2e\xa8\x16\x0b\xb7\x64\xc9\xaf\x9b\x25\x54\x44\x3e\xdb\x0f\x3f\xcd\xb4\x9b\x05\xc1\x6c\x71\xfa\xbf\x7e\x5b\xbf\xf5\x5f\x6e\xc7\xd9\x16\xf6\xed\x6b\x14\x64\x0f\xfd\x3f\xdd\xc6\xd1\xc1\x62\xf2\x87\x7c\x9f\x4c\x97\x79\x3a\x3a\xb8\x02\x22\x83\x5b\xa2\xff\xe7\xbf\x4a\xe3\x4f\x5e\x43\x02\xd4\xe4\x94\x4f\xcc\x23\xaa\x72\xd4\x4d\xee\xcf\x75\x1c\x7c\xe7\xa7\x38\x3a\xb6\x19\x98\xd3\xa4\xec\x26\xa7\xcc\xee\x07\x6f\x1f\xfb\xa3\x67\xc7\x8f\x15\x6e\xee\x0e\x85\xd1\x9d\x43\xe1\xd5\x0f\x5d\xe3\xfc\x2e\x01\x44\x7b\x88\x00\xc2\x79\x1a\xb7\x82\x6e\x50\x30\xe9\xb7\x13\xf9\x76\xf1\x7a\x32\xf7\x24\xea\xd9\xec\x72\x7d\x74\x75\xb9\x78\x40\xf2\x9b\x85\x0a\xee\xf1\xa5\x6a\xdc\xfb\x3f\xd7\x46\x9b\x4a\xa0\xe5\xbf\x00\x35\xaf\xc5\x83\xbc\x5e\xc3\x2c\xaf\xe4\xaa\x15\x47\x87\x6f\xde\x45\xdd\x9b\x77\x45\xfd\xe6\x5d\x58\xf8\x27\xb4\xa7\x7c\xf3\x2e\x77\xbe\xdd\xda\x3a\xdf\xa7\x8d\xdf\xbc\x4b\x7d\xbf\xc6\xb7\x37\xfe\x7b\xcc\x67\xff\x54\xfe\xb3\x0b\xd7\xde\xb7\xfa\xce\x25\x6b\x6d\xf4\x6f\x3c\xad\xc8\xcf\xe7\xdb\x4b\x4f\xdf\xf9\x67\xec\x9f\xce\x3f\x69\xe6\xe9\xf8\xbf\x99\xef\x53\x84\x6b\x7c\xd8\xdc\x3c\xd9\xf8\xcd\xbb\xc4\x8f\xcf\x3a\xe5\x21\x6a\xd7\xfb\x1d\xf6\x78\x34\x2c\xb1\xd9\xcb\x10\x0e\xf5\x56\xb5\x86\x63\xde\x00\xb7\xac\xdc\x89\x7f\x75\xb8\xd5\xc5\x1f\xfa\xd7\xc7\xb7\xea\x3e\x4c\x01\x26\xfe\x47\x2c\x75\x9d\x09\x31\xd5\x5b\x3c\xdc\x29\xc3\x43\xb8\x73\x0b\x17\x62\xf0\x9e\xda\x3d\xe5\x79\x8f\x59\x9d\x07\xbb\xa4\x08\x30\x9f\xf3\x20\x2e\x4f\x02\xec\xe0\x7c\xdd\x4c\x8e\xd2\x38\x3c\x96\x76\xb4\xfb\x5c\xb5\xff\xe7\xe9\xe4\xdd\x51\x94\xe6\x45\x91\x25\x45\x94\x9c\x04\xe1\xb1\x07\xb6\x8a\xd9\xbf\x10\x59\xdf\x8b\x80\xe7\x81\xc9\x09\x6b\xe7\xf2\xff\x9f\xb7\x1b\x50\x9d\xec\xd4\x5c\x9c\xd1\x5e\x7a\x5b\x78\x9d\x2a\x23\xd5\xcb\xca\xbf\x6b\xbd\xfe\x25\xfe\x5d\xe4\x9f\xc2\xeb\x5d\x37\x56\x3d\x2c\x2a\xed\x97\xa3\xcb\x9e\x6e\x9e\xfb\xbf\xfe\x7b\xec\xdf\xa7\xbe\x2d\xce\x54\x87\xf9\x5c\xa7\x5e\x0f\x79\xe7\xe7\x49\xfd\x93\xa1\xf3\x91\xea\x7c\xea\xfb\x64\x5e\xef\x23\x3f\xae\xf1\x4f\xee\xdb\x3a\x74\xdf\xff\x2d\x7c\xbf\x0c\xfa\x9e\xaf\xd2\x7f\xae\x23\xe5\xa7\xf5\x6d\x8e\xf9\x3c\x7f\xb5\x9f\xbb\x2e\xf4\x6f\xe3\xc7\x75\x91\xfe\xc5\x66\x72\x3f\x2e\xf5\x7d\x12\x1e\xcf\x43\xd7\xdb\x96\x1f\xdf\x94\x3a\x4f\x95\xab\xcd\xb5\xfe\x7b\xe9\x54\x46\x6c\x0d\xfb\x82\x5f\xe6\xc0\xc6\x52\x3f\x6f\x55\xeb\xfb\xd4\xd3\x6a\x42\x5d\xcf\xc8\xf7\xa9\x90\xd3\xd3\xc9\x91\xb1\xd5\x35\x86\x4f\xec\xae\xf2\xfd\xc7\x3c\xa9\xf6\x89\x4a\x9d\x9f\xf5\x0c\x7d\x5b\x15\x29\x6f\x49\xa9\xe3\x58\x3f\xda\x93\x4c\xf7\x25\xf2\x34\x4a\xf6\x20\xd7\x75\x82\xce\x18\xf9\x6b\x9d\x0f\x3c\xa9\x2b\xe5\x7f\xdc\x29\x2f\xb5\xef\x1b\x8e\x75\xed\x18\x5f\x20\x7b\xae\x74\xd9\x23\xd6\x38\xf4\xe3\x93\x4e\x79\x72\xc8\x90\xe8\x1e\x95\x7e\x8e\xd2\xb0\x27\x67\xbf\x63\xdb\x8f\x58\x9f\xd6\xf8\xa1\xad\x28\x55\x47\x32\xff\x3d\xaa\x74\x3d\xf2\x4a\x75\x24\x6c\xb5\x6f\x0b\x8d\x4c\xf7\x93\xbd\x2e\x73\xd3\x95\x4e\x75\x24\x63\x0d\x6c\xff\xc3\x5c\x65\xab\x43\x95\x0d\xbe\xe3\x4e\x69\x20\x13\x7b\x12\x3a\x1d\x0b\xef\x19\x7b\x81\xce\xf4\xfc\x27\xba\x9f\x05\x3a\x18\xd9\xde\xe4\x8a\x93\xe8\x28\xfa\xda\x1a\x6f\xb4\xa1\x97\xac\x4f\xe7\x74\xaf\xab\x56\xf1\x15\x9d\xc6\x5e\xd8\x37\xf4\x95\x77\xb9\x6f\x6f\x0b\xdd\xa7\x71\xac\x36\x80\xbe\x16\x89\xce\x05\x1f\xbc\x63\x7f\x53\xff\x24\x8d\xea\x15\xeb\x5b\x74\xaa\x8f\xbc\x47\x3f\x19\x8b\x4d\xb1\xbf\xe8\x0b\xf2\xb4\xec\x6b\xa4\x7a\x91\xc1\x73\xa9\x7b\x4e\x7f\xe8\xe7\x66\x37\x79\xa3\xeb\xcb\x9a\x22\x0f\x36\xc2\xbe\xe3\x13\x5c\xa6\xeb\x87\xcd\x45\xb6\x47\x49\xa5\xb2\xb2\x77\x65\xaa\xb6\x81\x4f\xc0\x26\x58\x3f\xf6\x0c\x5b\x42\x9f\x62\xa7\x76\x0f\x26\x38\xd3\xe7\xcc\xd6\x85\x3d\x72\xad\xda\x21\xbc\xe0\x5b\xb0\x21\xf6\x07\x59\xb1\xbf\x7c\x6c\x3a\x8f\x1e\x86\xaa\x27\x95\xe9\xb2\xbc\x63\xbd\x73\x95\x87\xb1\xe8\x8f\xeb\x94\x2e\x3c\x15\x4e\xf5\x34\xab\xd4\x6e\xf1\x87\xe8\x6c\xed\xc7\x96\x66\xf3\xa2\x6f\xd8\x6b\xa5\x7b\x59\x97\xaa\xa7\xb4\x57\x63\xc3\xa7\x5a\xed\xa0\x33\x7f\xc9\xfa\xb0\xf6\x45\xa4\x7b\xe1\x22\xb5\x61\xf4\xb0\xc6\x4e\x0b\xd5\x01\x79\xcf\x7e\x76\xca\x33\xbc\x83\x87\xac\xb1\xe8\x34\xf6\x1e\xab\xbc\x60\x25\xeb\x0f\x6e\xb2\x77\xac\x3d\xb2\x74\xa9\xfa\xf9\x2e\x51\x3c\x41\x87\x90\x89\x75\x62\x8e\x30\xdb\xf4\xd5\x71\xac\x63\x64\xcd\xd1\xf5\xcc\xec\x6d\xb7\xaf\x06\xe3\x9f\xee\xa9\xa1\xb2\xe1\xa7\x57\xaf\x76\x3b\x69\x7a\xec\xe3\xa2\xd7\x58\x7f\x09\x07\xbd\xce\xbe\x79\xe7\xbc\x4c\x3e\x21\xf7\xfc\x4a\xf3\xd7\xff\xbf\xba\xdc\xcb\x49\xe3\x04\x50\xca\x06\x07\xe0\x0d\xa1\x89\x57\x4e\x3a\x35\x27\xdd\xb5\xea\xa4\x01\x01\x9c\x15\x0a\x06\x6d\x40\xa5\xe8\x0d\xab\x52\xc0\x17\x47\xdf\x28\xc0\x46\xb5\x06\x8f\xb4\x03\x90\x38\x3e\x78\x00\x48\x01\x31\xda\x01\xf2\xbc\xd6\x39\x30\x36\xc0\x26\x37\x27\x0c\x0f\xd0\x02\x48\x6a\x33\x9c\xb1\x19\x2f\xca\x2f\x4e\x30\xb3\x40\xa3\x54\x87\x04\x1f\x80\x1e\xa0\x82\xd1\x60\xfc\x9d\x01\x08\x60\x8d\x83\x62\x1e\x69\x4b\x2d\x58\xc8\xd5\xa0\x00\x65\x0c\x46\x00\x8d\xbe\x95\x82\x3d\xc1\x85\x00\x7f\xa7\x8e\x01\xa3\x47\x1e\x09\xaa\xc7\x0a\x1e\xc8\x0b\x18\x25\x06\x0a\x80\x23\x8e\x33\x6c\x14\xac\x2a\x0b\x62\x00\x11\xe4\x2a\xcd\x39\x31\x46\xd6\x28\xd2\x35\xad\x0d\x0c\xe8\x07\x0f\x99\x39\x1f\x82\x9c\xd6\xc0\x08\x10\x62\x1f\xeb\x58\x65\xed\x9d\x3a\x00\xcd\xda\x24\x16\x6c\x01\x6e\xf4\x8d\x58\x7b\xff\x2e\xac\x94\x0e\x8e\x53\x64\x6f\x14\xcc\x9c\xd3\xfd\x65\x2d\x09\x6a\xca\x42\x81\x14\xc0\x41\x06\x71\xc4\xa5\x3a\x0a\xe4\xc3\xa9\x01\x68\x80\x3c\x0e\x02\xbd\x00\x8c\x49\x0c\xf2\x54\x81\x34\x36\xc7\x10\x46\x03\x20\x95\x29\x1f\xe8\x19\xeb\x0e\xc0\x3d\x22\xa1\x58\x69\xfa\xd3\xa1\x6a\x45\x6b\x03\xb0\x36\xeb\x42\xbb\x81\x6b\x45\x6a\x1f\xf8\xda\x10\xea\x25\x40\x6c\x48\xa4\x3e\xd5\x48\x3f\x36\x98\xfd\x40\xc9\xf3\x59\x92\x64\xec\x90\x40\x29\xae\x14\x33\x24\x01\xb6\x20\x0a\xa7\xba\xde\x67\x28\x99\x86\x56\x12\x6b\x70\x8c\x4e\x36\x95\x06\xec\xe8\xf4\xb8\x52\x27\xcf\xdc\x25\x38\xe4\xd4\xa6\x04\xdb\x9c\xda\x54\xe6\x34\xf0\x22\xd8\x01\x77\xe8\xcf\xdc\xe0\x2a\x78\x04\x5f\x12\x10\x8c\x75\x5e\x6c\x1d\x1c\x21\x28\x14\x7b\x89\x2c\xe0\xb4\x80\x9a\x00\x5e\x82\xd3\x3e\xa8\xa9\xf5\x1d\xe3\x62\x0b\x66\x24\x69\x37\xac\xbc\x6f\x67\x95\x25\x06\x65\xa6\x38\x01\x4f\x5b\xec\x6c\x63\x13\xf6\x33\xb1\x0d\x32\x2b\xeb\x1a\x28\x91\x6f\xda\xd5\xc6\xf8\xc7\x9a\xd4\x36\xfe\x9f\xd5\x9a\x06\x45\x30\x3b\x1a\x17\x1f\x6a\x46\xe9\x38\x4e\xa3\xf1\x4b\x98\xd1\xde\x19\x3b\x19\x01\x99\x1e\xce\x17\x65\xc1\x71\xf5\xc1\x80\x6b\xd4\x49\xe3\x24\x50\xde\xd6\x2a\x42\x18\x06\x51\x36\x0a\x59\x15\x5a\x91\x82\x06\xdf\x71\x38\x38\x64\x8c\x49\x1c\x4d\xad\xce\xc3\xc5\xea\x6c\x31\x9a\xc8\x14\x5d\xb2\xc3\xb1\xf2\xd0\x9a\xa1\xe1\x24\x88\xc4\x71\x36\x18\x23\xd1\xb2\x33\x67\x2f\xd9\x4f\xa2\xce\x7c\x6c\xd1\xb0\x18\x79\xab\xc6\x8f\x3c\x89\x55\x0b\xc8\x28\xcb\x5a\xb3\xc0\x71\x61\x59\xb3\xa7\x13\xe7\x1a\x08\x34\x16\x28\x88\x53\xee\x54\x5e\x0c\x93\x2a\x01\xce\x90\xa0\x07\x5e\xc6\xb9\xf2\x4d\x74\x4f\x24\x1e\x45\x1a\xf0\x34\x96\x99\xe3\x04\x09\xa4\xa8\x22\x94\xe6\xf4\x09\x28\x9c\x65\x9f\x12\x8c\x94\x0a\x12\x64\x0d\x00\x49\x9f\x6d\x13\x1c\x01\x4e\x9d\x65\x87\x92\x45\x5a\x26\x4f\xe6\xe4\x2c\xbb\xa0\x0d\x80\x61\xbd\x90\x59\x32\xad\x5a\xe7\x45\x2e\x32\x5c\xfe\xb2\x2e\x75\xa3\x81\x08\x00\x56\x58\x86\x4a\xa6\xc9\xde\x10\x1c\x21\x37\x99\x46\xd9\xe9\x3a\x10\xcc\x31\x8f\x64\xed\x99\x65\x7d\x99\x82\x62\x61\x59\x4e\x6e\xeb\xc0\xfc\x80\x2b\xfb\x4f\x1f\x67\xf3\xd0\x07\x3d\x20\x03\x47\x8f\xe8\x4b\x15\x44\xf4\xa7\x52\xd0\x45\xe7\x58\x3f\xe6\x22\xd0\x00\x40\x65\xbf\xd0\x15\x0b\xfe\xd8\xf3\x71\xa3\x7b\x9e\x59\xf6\x5d\x58\x75\x23\x21\x20\xcd\x95\x0e\xfb\x94\x58\x86\x8a\x6e\x12\xac\xa0\x07\x52\x69\xb1\xca\x06\x99\x3e\x3a\xca\xba\x67\x56\x95\x41\x2f\x6a\xfb\x0c\x90\xc6\xa6\xdb\x99\x7d\x96\xfd\xab\x2d\xe3\xac\x34\xa0\x02\xc0\x25\xc0\xad\x34\xe8\xcc\x4d\x9f\x59\x73\x02\x30\xd6\x9a\xb9\xe3\x44\xab\x3b\xe8\x18\xc1\x97\x64\xa1\x63\xab\x2a\xb5\xfa\x1e\x67\x84\x9e\xe1\x78\xd8\xf3\xd2\xf4\x03\x1d\x80\x2e\x8e\x02\xf9\xd1\x5b\xd6\x24\x6c\x37\x01\x1e\xdd\x80\x1f\xf6\xb3\x0f\x74\x57\x01\xd7\x36\x80\xdf\x3f\xd9\xbb\x47\xe4\x3e\xb8\xef\x4a\xf5\xee\x0d\xdd\x03\xd7\x5f\x2a\xd1\xdb\xe4\xdd\x20\x3d\x2d\xf3\x4f\x07\xd3\x9f\x98\xe6\xf5\xa1\x47\xda\x6a\xda\xe0\x2c\xcc\x01\xa9\xa5\x2e\x65\x21\x13\x1a\x4a\xc8\x02\xf2\xf1\x9e\xfa\x28\xf5\x36\x10\x00\xb4\xa5\x66\x41\xba\x91\xd9\x77\xd2\x06\x52\x18\x49\x03\xab\x15\xe2\xf3\xb7\xe9\x6b\x26\x56\x57\x91\xd4\x27\x53\xc4\x08\xb3\xd5\xf9\x43\x6c\x6d\xa0\x31\x0f\xe9\x58\xdf\x27\xb5\x7e\xb1\xfd\xed\x69\x82\x02\xd4\xf1\x68\xe7\x33\x08\x2c\xa8\x6b\x75\x40\x1e\xac\x54\x3c\x8c\x85\x40\x20\x08\xb5\x90\xa8\x47\x87\x54\x53\xb5\xc2\x6a\x64\x91\x21\x6d\x69\x9f\xfb\x87\x14\x07\x19\xa4\xfe\x6c\xe8\x2a\x56\x67\xe9\x5f\x3c\x10\x7a\xe1\x31\xa0\x4d\x3d\x06\x84\x05\xb9\x1e\x0e\xbd\x9e\x9a\xe1\x0c\x92\xba\x6f\xa5\x8f\xc9\x6f\x06\x09\xed\x61\xb3\x2f\x9b\xdd\x6c\x97\xc7\x2c\x38\x4a\xe2\x0f\xb5\xe0\x2c\x0d\xa3\x34\x09\x9f\xcd\x82\xaf\xeb\x9b\x7f\xa9\xdc\x66\xab\x42\x97\x5a\x97\x21\xdf\x19\xdb\x61\xc0\x36\x85\xbe\x27\xf3\x9e\xba\x7c\x8f\xca\x9a\x1a\x6f\x5c\x7c\x19\x50\xe0\x7b\xa3\x1f\xad\xbb\xc3\xbc\x3f\xaf\xda\x0e\xf0\x6f\x0a\x8b\xe2\x7d\x5c\x8f\x73\x2b\xff\xde\x49\x84\x1c\x25\x77\xa6\xa5\xce\x82\xe7\xfe\xd8\x2f\x55\x38\x24\xa8\x03\xb2\x63\x3b\x7a\x43\x4b\x09\x80\xa5\xf2\x54\xa8\x56\x13\x04\x95\x95\x06\xec\x9d\x1d\x65\xe0\x56\x24\xa8\x6b\xcd\xd5\x58\x50\x5f\xda\xf1\x13\xb4\x32\xab\x66\x11\xb8\xe1\xc6\x38\x62\xc9\x63\x3d\x36\x20\xb8\xcf\x0d\xf2\x49\x2c\x38\x8a\x19\xdb\x11\x15\xfc\x52\x0d\x95\xca\xe0\xd8\x02\x3c\x3b\x1e\x4f\xad\x54\x2f\xc1\x66\xa4\xee\x85\xc0\x6f\x6c\xee\x84\x60\x98\x24\x06\x37\x48\x02\xd2\x27\x17\xb1\xb9\x19\x8e\x02\x08\x88\xe5\x18\x73\xac\x6e\x06\xfe\x39\xe2\x21\xe3\xa7\x12\x48\x40\x8a\x55\xf2\x50\x41\xc3\x0d\x4a\x75\x31\xd6\xe0\x99\xa0\x17\xeb\xa5\x5a\x27\x47\x66\x91\x5a\x6f\x52\x68\x25\xa2\x32\xfe\xa9\xba\xb6\x76\x8c\x48\x65\x57\x8e\x4c\x43\xa3\x19\xaa\xbc\x32\xaf\x05\xa1\xac\x61\x1f\x1c\x27\x96\xcc\xc8\xf1\x61\xad\x01\x7b\xbc\x96\x38\x10\x28\x87\x9d\xee\x09\xf4\xa5\x12\x99\xaf\x2a\x9f\xf0\x57\x98\x8b\x24\xe1\x71\x76\xdc\xc6\x78\xd6\xc4\x59\xa5\x97\x36\x67\x15\x94\xca\x92\x49\xb9\x86\x50\x2b\x1a\xc9\xf1\x8b\x53\xb4\x63\xef\x68\x63\xae\xce\x8e\xb8\x04\x95\x08\xa8\x13\xdd\x57\x3e\xcb\x11\x58\xa9\xe1\x4a\x6b\x49\x21\xc7\xb6\x72\xcc\x68\x57\x25\x38\x22\x95\xea\x49\xa2\x49\x47\x98\x6c\x22\x1d\x3a\x2e\x47\x40\xbd\x9b\xaf\xb6\x07\xd5\x77\xac\xe5\xa9\x38\x77\x2f\xa4\xbe\x7b\x73\x6f\x17\xc4\x7d\x50\x40\x3d\xc4\xf2\xf3\xc3\xdb\x40\x38\x1d\x97\x1f\xbd\x44\x72\x2b\xfb\x73\x1c\x9a\x34\x9a\x73\x63\xc6\x85\xdd\x6c\xa0\xd8\x0f\xb4\x38\x2b\x7e\x4b\xf4\x1a\xda\x29\x68\xa9\xf0\x86\xb9\x13\x39\x92\xd3\x31\x06\xd3\x0b\xcd\x21\x73\x32\x8a\x0a\x03\x4b\x52\xcc\x6f\x55\x95\x31\x25\xcc\x0a\xd8\xc3\x04\x81\x18\x4c\x93\x82\xbc\xa8\x6d\xac\xa7\xa9\x40\x01\xe6\x49\xae\x88\xa9\x93\xc7\x53\x6c\x94\x39\xec\x44\x5c\x4e\xef\x1b\xad\x0d\xc0\x27\x79\xad\x40\xa2\x9d\x94\x03\x79\x38\x7a\xe0\x80\xda\x44\x64\x27\xad\xe4\xd0\x64\x10\x72\xf2\xeb\x34\x9a\xa6\x1e\x11\xda\x41\x05\x7d\xf9\x2c\xb5\x94\xd6\xf2\xe8\x62\x55\x4b\x90\xc3\x1e\xa7\x32\xca\xc9\xb7\x53\x5e\x31\x79\xa0\x9e\x4c\x83\x7a\x0d\xa6\x49\xdd\x24\x32\x9e\x71\x07\xd4\x84\x90\x4d\x0a\xac\x8d\x41\x59\xa1\xb4\x2a\xab\x61\xf0\x50\x0b\x91\x43\x8e\x5a\x0f\x2e\xe4\xc4\x3e\xd2\x35\xed\x8c\x27\xfa\x13\x08\x51\x94\x15\xf8\xb4\x9b\x13\x9d\x9d\xde\x03\x37\xa1\xdd\x0a\xe0\x04\x16\xf8\xe0\xb6\x47\x68\x27\xef\xf0\x4b\xed\x89\x1a\x55\xdd\x0c\x43\x48\x65\x07\x1f\x92\x93\x67\xb6\x4e\x0f\x05\x4b\x4f\x0e\xfe\x07\x28\xdd\x83\x93\x47\x85\xfe\x03\x64\x3e\x1c\x5c\x5e\x38\xf0\xdf\x26\x4c\x0f\x35\xe1\xc7\x8e\xa3\x7e\xd4\xeb\xcd\xff\x69\xa1\xff\x80\xd8\xfb\x29\xf3\x00\xa1\x95\x2e\x0f\x5e\x44\xdf\xd4\xe4\x01\x1a\x8f\x55\xe4\xed\x72\x3c\xab\x1e\x6f\x11\xe4\x53\x49\x06\xee\xac\xc2\xd3\xf3\x81\xc8\xde\xa5\x6b\xf9\x40\x7e\x2f\x1f\x48\xf5\xa4\xbf\xcf\x07\x00\x67\x9c\x21\x8e\x87\xf8\x96\x78\x16\xb5\x07\x8c\x6b\xfb\x2c\x05\xe9\x50\xaf\x00\xe1\x50\x53\x03\xe4\xa6\x77\x92\xb9\xc5\x74\x56\x4c\xad\x2c\x0e\x95\x32\x97\x15\xe4\xe1\x03\x5e\x9d\x5d\x1b\xc4\xe9\x10\x27\x52\xf2\xa1\xb8\x2c\xb1\x75\xa3\x65\x24\xb9\xde\xd7\x9f\xe6\x99\xd3\xc3\x21\x64\x76\xda\xd7\xda\x55\xda\xc6\xae\x0d\xca\x61\x88\xd3\x75\xc2\x69\xc8\x75\x2f\xbb\xce\x58\x58\xa1\x5c\xae\x91\x15\xab\x22\xae\xdc\x02\x08\x95\x2e\xe3\xb8\xce\x44\xae\x81\x33\x93\x1c\x67\xac\xf1\x70\x6c\x79\x4b\x6c\xc5\x7f\xf8\x93\xab\x4d\x9d\x96\xf5\x0a\xbb\x1d\xd0\xda\x0d\x80\xd6\xae\x99\x8d\xc7\x9a\xc3\xe0\xa8\xe5\xf4\xd0\x82\x8c\xc4\xcc\x9b\xf5\x62\x2e\x29\x94\x97\xda\x0f\x07\x4c\xcc\x4e\x9f\xa6\xbf\x52\x67\xb7\x16\x3a\x8b\xd7\x9d\xe5\x07\x72\x4d\x32\xd2\xbc\x85\xf1\xe2\xdc\x9d\x1d\x5e\xd8\xf5\xb1\xd0\xae\xb9\xb1\xa7\x89\x5d\xa7\x94\xc3\x04\xa7\x6d\xf0\x44\x7f\xf2\x38\xc9\x03\x33\x95\x41\x62\xfa\x5c\xf7\x85\x03\x18\x72\x00\x67\xf9\x80\xdc\x24\xe9\x56\xd7\xe9\x68\x83\x67\xf6\x88\x72\x25\x4e\x59\x72\x8f\x56\xd7\x98\x77\x72\x2d\x33\x59\x1d\x56\xa0\xab\x94\x12\x87\xae\x57\x11\xcc\xb0\x2e\xbd\xee\xc8\x15\xcd\xe1\xdc\x60\xc3\x78\x9e\x01\x08\xef\x66\x08\x9b\xbf\xb3\x79\x00\x03\x3f\x24\x4f\xd8\xc6\xfe\x8b\xe0\xdf\x40\xb6\x90\x84\xd1\xa7\x84\x7e\xff\x2d\xbf\xff\xbb\x96\xdf\xb7\x6c\xf3\x33\x58\xeb\x50\x18\xbe\xfd\x67\x6f\x0f\xd8\xee\x87\x07\xe3\xbb\x05\x7b\x11\x3b\x7e\xde\x52\xfc\x33\xdb\xf3\xcf\xfa\xbb\xbf\xe7\xfb\x39\xce\x8e\x9f\xdb\xa0\x7b\xa1\xdd\x8c\x1c\xf2\x21\xc4\x3e\xb1\xdd\x44\x14\xbb\x1d\xd6\xcd\x01\x96\xf7\xd3\xcb\x01\x42\x2b\x9d\x1c\xfc\x75\xe5\xa6\x3a\x0e\xd0\x78\xac\x2a\x6e\x97\xe3\x59\xd5\x70\x8b\x20\xbd\x06\x7e\xec\x70\xfa\xce\x2a\xec\x1d\x4e\x13\x06\x12\xb2\xf5\xf7\x65\xb8\xcf\x20\xbf\x86\x69\x57\x6e\x04\xb5\xa4\xe6\x51\xdb\xdd\x0d\xc2\x68\xf9\xf5\x8d\xd5\xa9\x50\x4f\x5c\x10\xb4\xa4\x1e\x64\x77\x32\x04\xb6\x43\xbd\xe4\xca\xdf\xd4\xd4\x39\xb6\x7b\x3d\xdb\x54\x9a\x30\x95\x5f\x4d\xe4\x76\x67\x24\xea\x1e\xa7\xd2\xfb\x87\x45\x1b\x64\x36\xd5\x79\x57\x58\xb4\x31\x7c\x2f\x4d\x7e\xa9\xb0\x68\x48\x82\x3e\x2c\xfa\xd8\x51\xd1\x9d\x05\x78\x62\x54\x44\x21\x22\xb5\xa8\x87\x87\x1f\x50\xfc\x33\x00\x00\xff\xff\x43\xbb\x54\x60\x00\x40\x00\x00")

func templatesGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesGo,
		"templates.go",
	)
}

func templatesGo() (*asset, error) {
	bytes, err := templatesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates.go", size: 32768, mode: os.FileMode(420), modTime: time.Unix(1468853854, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"init/django/.dockerignore": initDjangoDockerignore,
	"init/django/Dockerfile": initDjangoDockerfile,
	"init/django/docker-compose.yml": initDjangoDockerComposeYml,
	"init/rails/.dockerignore": initRailsDockerignore,
	"init/rails/Dockerfile": initRailsDockerfile,
	"init/rails/docker-compose.yml": initRailsDockerComposeYml,
	"init/ruby/.dockerignore": initRubyDockerignore,
	"init/ruby/Dockerfile": initRubyDockerfile,
	"init/ruby/docker-compose.yml": initRubyDockerComposeYml,
	"init/sinatra/.dockerignore": initSinatraDockerignore,
	"init/sinatra/Dockerfile": initSinatraDockerfile,
	"init/sinatra/docker-compose.yml": initSinatraDockerComposeYml,
	"init/unknown/.dockerignore": initUnknownDockerignore,
	"init/unknown/Dockerfile": initUnknownDockerfile,
	"init/unknown/docker-compose.yml": initUnknownDockerComposeYml,
	"templates.go": templatesGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"init": &bintree{nil, map[string]*bintree{
		"django": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initDjangoDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initDjangoDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initDjangoDockerComposeYml, map[string]*bintree{}},
		}},
		"rails": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initRailsDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initRailsDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initRailsDockerComposeYml, map[string]*bintree{}},
		}},
		"ruby": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initRubyDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initRubyDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initRubyDockerComposeYml, map[string]*bintree{}},
		}},
		"sinatra": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initSinatraDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initSinatraDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initSinatraDockerComposeYml, map[string]*bintree{}},
		}},
		"unknown": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initUnknownDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initUnknownDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initUnknownDockerComposeYml, map[string]*bintree{}},
		}},
	}},
	"templates.go": &bintree{templatesGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

