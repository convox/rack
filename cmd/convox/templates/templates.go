// Code generated by go-bindata.
// sources:
// templates/init/rails/Dockerfile
// templates/init/rails/docker-compose.yml
// templates/init/ruby/Dockerfile
// templates/init/ruby/docker-compose.yml
// templates/init/sinatra/Dockerfile
// templates/init/sinatra/docker-compose.yml
// templates/templates.go
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _initRailsDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x50\xbb\x4e\xc4\x30\x10\xec\xfd\x15\x2b\xd1\x5f\x7a\x5a\x24\xa8\xe0\x50\x24\x0a\xba\xf3\x39\xeb\x60\xe2\xd8\x96\x1f\x27\xf2\xf7\x6c\xd6\x09\x21\xa7\xa4\xca\x3c\xec\x99\xf1\x73\x7b\x7e\x05\xe5\xdd\xcd\xff\x34\x51\x1a\x9b\x84\x78\x20\x1c\x26\xf0\xce\x4e\x90\xbf\x10\xb4\xb1\x98\xc0\x21\x76\xd8\x81\xf6\x11\xae\xc5\x75\x16\xc1\xb8\x94\xa5\xb5\xe4\x2f\x4e\xf9\x71\x44\x97\xd9\x7f\x43\xd7\xf9\xd8\x28\xa9\x08\x58\xe3\xc8\xa9\x61\xf2\x05\x2e\xcb\xc1\x20\xd5\x20\x7b\xbc\xcc\x64\x84\x1e\xc7\x24\x9e\xce\xef\x9f\xf0\x82\xe3\x9c\x05\xfc\x35\x32\x84\x66\x61\x76\xf2\xc9\x7a\x35\xec\x64\x66\xa8\x06\xbb\x76\xe9\xec\xfa\xcf\x88\xf6\xe3\xed\xbe\xff\x3a\xf8\xbb\xa4\x7c\x3c\x58\xa6\x84\x39\x3d\x86\x88\xb4\x33\xfc\x15\x6a\xe5\x80\x4b\x61\x0e\x5a\x71\x55\xe9\x51\xb5\xe9\xb7\x2d\x15\x57\x2d\x94\xab\x35\x6a\xd3\x2a\xae\xda\x8c\x6b\x60\xd5\x36\xcc\xe5\x23\x85\x1c\x14\x5a\x47\xcc\xfd\x23\xd2\x10\xaf\xf9\x9f\x4e\xd7\x6b\x4f\x7c\x9b\xf8\x0d\x00\x00\xff\xff\x08\xae\x24\x4e\xf0\x01\x00\x00")

func initRailsDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerfile,
		"init/rails/Dockerfile",
	)
}

func initRailsDockerfile() (*asset, error) {
	bytes, err := initRailsDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/Dockerfile", size: 496, mode: os.FileMode(420), modTime: time.Unix(1463247575, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initRailsDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\x03\x32\x73\x12\x93\x52\x73\x8a\x41\x82\x0a\x0a\xba\x0a\xc9\xf9\x79\x65\xf9\x15\x7a\x05\xf9\x45\x25\x7a\x26\x26\xc6\x7a\x05\x45\xf9\x25\xf9\xc9\xf9\x39\xb6\x25\x39\xc5\xb8\x95\x54\x54\xda\x96\x14\x95\xa6\x02\x15\x80\x44\xe1\x86\x59\x18\x58\x99\x18\x18\x18\x40\x79\x40\xb5\x20\xae\x21\x17\x20\x00\x00\xff\xff\xc0\xe1\x22\xef\x84\x00\x00\x00")

func initRailsDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerComposeYml,
		"init/rails/docker-compose.yml",
	)
}

func initRailsDockerComposeYml() (*asset, error) {
	bytes, err := initRailsDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/docker-compose.yml", size: 132, mode: os.FileMode(420), modTime: time.Unix(1463517114, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initRubyDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xcd\x4e\xc0\x20\x10\x84\xef\x3c\xc5\x26\xde\xcb\x43\x98\xe8\x49\x6b\x9a\x78\xf0\x56\x0a\x4b\x6d\x0a\xbb\x84\x9f\x46\xde\x5e\x8a\x35\xb1\x72\x62\x67\xbf\x61\x86\xa7\x69\x7c\x01\xcd\x74\xf0\x97\x8c\x65\xa9\x42\x3c\xb4\x31\x54\x60\x72\x15\xf2\x27\x82\xdd\x1c\x26\x20\x44\x83\x06\x2c\x47\x58\x0a\x19\x87\xb0\x51\xca\xca\xb9\xc6\x17\xd2\xec\x3d\x52\xee\xfc\x81\x64\x38\x4a\xad\x74\x1b\xdc\x46\x8d\xb4\x50\xb9\xc0\x7c\x19\x83\xd2\xbb\x5a\x71\x3e\xc5\x08\x2b\xfa\x24\x1e\xc7\xb7\x0f\x78\x46\x7f\x66\x41\x3f\x52\x85\x20\x2f\xe5\xb6\x1e\x1c\xeb\xfd\xb6\xee\x4a\xab\xd1\xa9\x5b\x7a\xa7\xfe\x2a\x62\x7a\x7f\xfd\xdf\xff\xf7\xc3\x67\xf7\x88\x29\x03\xdb\x7e\x6f\xde\x9f\xe0\xa1\xbf\x23\xbe\x03\x00\x00\xff\xff\x8b\xae\xa0\xae\x2a\x01\x00\x00")

func initRubyDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerfile,
		"init/ruby/Dockerfile",
	)
}

func initRubyDockerfile() (*asset, error) {
	bytes, err := initRubyDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/Dockerfile", size: 298, mode: os.FileMode(420), modTime: time.Unix(1463247575, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initRubyDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8c\xc1\x0a\x83\x30\x0c\x86\xef\x3e\x45\xf0\x6e\xe9\x98\x87\x21\xf8\x30\x5a\x03\xca\xa2\x29\x69\x3a\xed\xdb\x2f\x85\x6d\xb7\xdd\xfa\xf5\xff\xf2\x9d\x38\x0f\x0d\xc0\x9c\x37\x5a\x06\x70\xf6\x0c\xbc\xef\xd3\x61\x80\x61\x65\x68\x71\xd9\x14\x16\x0e\x4f\x94\xce\xa6\xc8\x09\x5d\xd9\x09\xce\x4d\x57\x28\x9c\x05\x92\x4e\xa2\x39\x7e\x0f\x5b\x6b\xd0\x34\x23\xa5\x1a\x06\xe8\x6c\x38\x5e\x7c\xb9\xc8\xa2\xae\xef\xef\x2e\x0a\x2b\x07\xa6\x51\x29\xfd\x57\xae\x32\xaa\x64\x34\xa1\xfe\xfe\x62\x0f\x3f\xf4\xde\xfb\x0f\x99\x5b\xf1\xd6\xbc\x03\x00\x00\xff\xff\xae\x01\x4e\xf5\xc8\x00\x00\x00")

func initRubyDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerComposeYml,
		"init/ruby/docker-compose.yml",
	)
}

func initRubyDockerComposeYml() (*asset, error) {
	bytes, err := initRubyDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/docker-compose.yml", size: 200, mode: os.FileMode(420), modTime: time.Unix(1463247575, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initSinatraDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xc1\x6e\x84\x20\x10\x86\xef\x3c\xc5\x24\xbd\xcb\x43\x34\x69\x4f\xad\x8d\x49\x0f\xbd\x49\x61\x70\x89\x30\x43\x00\xcd\xfa\xf6\x8b\xac\x9b\xac\xeb\x49\xbe\xf9\x86\xff\xe7\x63\xe8\xbf\x40\x33\xad\x7c\x95\xd9\x91\x2a\x49\x09\xf1\x56\x49\xdc\x80\xc9\x6f\x50\x2e\x08\xd6\x79\xcc\x40\x88\x06\x0d\x58\x4e\xf0\xbf\x90\xf1\x08\x8e\x72\x51\xde\x57\x7f\x21\xcd\x21\x20\x95\xe6\xaf\x48\x86\x93\xd4\x4a\xd7\x83\x77\x54\x4d\x0b\x1b\x2f\x30\x1e\x8b\x51\xe9\x59\x4d\x38\xee\x30\xc1\x84\x21\x8b\xf7\xfe\xe7\x0f\x3e\x31\xec\x59\xd0\x3e\xa9\x62\x94\x07\x39\x8d\x3b\xcf\x7a\x3e\x8d\x1b\xa9\x35\x9a\x75\x4a\x6f\xd6\x33\x11\xc3\xef\xf7\x6b\xff\xc7\x83\xf7\xee\x09\x73\x01\xb6\xed\xbf\xee\xde\x83\xbb\x76\x8f\xb8\x05\x00\x00\xff\xff\x9c\x51\x49\xbe\x2d\x01\x00\x00")

func initSinatraDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerfile,
		"init/sinatra/Dockerfile",
	)
}

func initSinatraDockerfile() (*asset, error) {
	bytes, err := initSinatraDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/Dockerfile", size: 301, mode: os.FileMode(420), modTime: time.Unix(1463247575, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initSinatraDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\x03\x32\x73\x12\x93\x52\x73\x8a\x41\x82\x0a\x0a\xba\x0a\xc9\xf9\x79\x65\xf9\x15\x7a\x05\xf9\x45\x25\x7a\x26\x26\xc6\x7a\x05\x45\xf9\x25\xf9\xc9\xf9\x39\xb6\x25\x39\xc5\xb8\x95\x54\x54\xda\x96\x14\x95\xa6\x02\x15\x80\x44\xe1\x86\x59\x18\x58\x99\x18\x18\x18\x40\x79\x40\xb5\x20\xae\x21\x17\x20\x00\x00\xff\xff\xc0\xe1\x22\xef\x84\x00\x00\x00")

func initSinatraDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerComposeYml,
		"init/sinatra/docker-compose.yml",
	)
}

func initSinatraDockerComposeYml() (*asset, error) {
	bytes, err := initSinatraDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/docker-compose.yml", size: 132, mode: os.FileMode(420), modTime: time.Unix(1463247575, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templatesGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x99\x5b\x6f\x23\xc7\xd1\x86\xaf\xc5\x5f\x31\x16\x60\x83\xfc\x20\x53\x73\x3e\x08\xd8\x1b\xef\xee\x07\xec\x45\xd6\x80\xbd\xb9\x08\xa2\xc0\x98\x43\xb7\x32\x30\x45\x2a\x24\xe5\x48\xbb\xd8\xff\x9e\x7a\xba\x7a\x48\x4a\x22\xa5\xb5\x56\x81\x83\x20\x17\x23\xce\xf4\xa1\xba\xaa\xbb\xea\xad\xb7\x5a\xa7\xa7\xc1\xeb\x45\x67\x82\x0b\x33\x37\xcb\x7a\x6d\xba\xa0\xb9\x0d\x2e\x16\xdf\x37\xfd\xbc\xab\xd7\xf5\x74\x24\x03\x56\x8b\xeb\x65\x6b\x56\x67\xbc\xaf\xcd\xe5\xd5\x4c\xc6\xad\x4e\xfb\x79\xbf\x3e\x5d\xd6\xfd\x6c\x75\xfa\x66\xd1\xfe\x6a\x96\xb6\x9f\x99\x83\x43\x3a\x37\xe4\xfb\x76\x71\x79\xb5\x58\x99\xe9\xed\xe5\x6c\xdf\xd0\xeb\xe6\xf6\x09\x61\x8c\xf8\x22\x59\xab\x7e\x5e\xaf\x97\xf5\xe3\xe2\x86\x41\x4f\x49\xdc\xbc\x4d\x2f\x16\xf4\xbc\xf9\x31\x78\xff\xe3\x87\xe0\xed\x9b\x77\x1f\xbe\x19\x8d\xae\xea\xf6\xd7\xfa\xc2\x6c\xc7\x8f\x46\xbd\x08\x5a\xae\x83\xf1\xe8\xe8\xb8\xb9\x95\x96\x63\x79\x41\xfa\xd2\xac\x56\xa7\x17\x1f\xfb\x2b\x1a\xec\xe5\x9a\x9f\x7e\xc1\xdf\xd5\x7a\xd9\xcf\x2f\xdc\xc0\x85\xfb\xbb\xee\x2f\x8d\x76\x9f\xf6\x8b\xeb\x75\x3f\xe3\xe3\xaa\x5e\xff\xfd\x14\x63\x78\x39\x1e\x4d\x46\x23\x7b\x3d\x6f\x03\x7f\x5a\x3f\x99\xba\x1b\xf3\x12\xfc\xf5\x6f\x2c\x7b\x12\xcc\xeb\x4b\x13\xa8\xe8\x49\x30\x1e\x5a\xcd\x72\xb9\x58\x4e\x82\x4f\xa3\xa3\x8b\x8f\xee\x2b\x38\x7b\x15\xa0\xd5\xf4\xbd\xf9\x27\x42\xcc\x72\xec\xd4\xe6\xfb\x87\x6b\x6b\xe5\x1b\xb1\x93\xc9\xe8\xa8\xb7\x6e\xc2\x37\xaf\x82\x79\x3f\x43\xc4\xd1\xd2\xac\xaf\x97\x73\x3e\x4f\x02\x31\x69\xfa\x16\xe9\x76\x7c\x8c\xa0\xe0\xdb\x7f\x9c\x05\xdf\xfe\x76\xac\x9a\xb8\xb5\x44\xc6\xe7\xd1\xe8\xe8\xb7\x7a\x19\x34\xd7\x36\xd0\x75\x74\x91\xd1\xd1\x2f\xaa\xce\xab\xa0\x5f\x4c\x5f\x2f\xae\x6e\xc7\xdf\xc9\x98\x13\xd1\x4d\x66\xb5\xb3\xb7\x83\xa6\xd3\xd7\x33\x39\xa7\xb1\x98\xff\x42\xfa\x20\x46\xe5\x1f\x10\x24\x03\x55\x6f\xdf\x28\x6a\x4d\x7f\x40\xf5\xf1\xe4\x84\x11\x23\xe9\x5b\xdf\x5e\x99\xa0\x5e\xad\xcc\x9a\x2d\xbf\x6e\xd7\x48\x71\xf6\xf9\xf3\x90\x65\xe6\x76\x11\x04\x8b\xd5\xf4\xff\xe5\x0c\xdf\xc9\xc7\x66\x9e\x3f\xc2\xa1\x7d\x47\xc2\xce\x19\x8e\x8e\x56\xfd\x47\x13\xf4\xf3\x75\x9e\x8e\x8e\x2e\x09\x5c\x2f\xeb\x4f\xf2\xee\x5a\x3e\x88\xdb\x04\xf8\xce\x94\x37\xc4\x3b\x0f\x19\xdb\xfe\xfe\x12\x93\xe0\xbd\x48\x1e\x4f\xbc\x6c\x96\xf2\xc6\xd9\x7e\xca\xa2\x32\xf9\xf0\xdc\x9f\x45\x11\x99\xeb\x54\xb9\x3b\x15\x15\x1f\x9d\x8a\xae\x32\x75\x47\xf3\xbb\x02\xb0\xeb\x29\x01\x18\x27\x32\x36\x86\x3e\x90\xe0\xad\x3f\x2c\xe4\xdd\xea\x4d\xbf\x14\x11\xcd\x62\x31\xdb\x9d\x5d\xcf\x56\x4f\x58\x7e\xbb\x52\xc3\x05\x56\xea\xd6\x7c\xfa\xbc\x33\xdb\x7b\x02\xce\xfd\x0b\x08\xf3\x13\xe0\xb7\x85\x20\x71\x6c\xf5\x84\xf1\xf1\xf9\x4d\x64\xcf\x6f\xca\xe6\xfc\x26\x2c\xe5\x09\xfd\x53\x9d\xdf\xe4\x46\xda\x7d\x9b\x95\x31\x79\x7b\x7e\x93\xc9\x7b\x23\x63\x53\xe9\x6b\xd3\xf3\x9b\x44\xbe\x23\x79\x8c\xf4\xd9\x4e\xde\xb3\xf3\x9b\x58\xfa\xbb\x48\xc6\xca\x9c\xa2\x96\x5f\x79\x62\x19\x5b\x8b\x2c\x13\xaa\x0c\xbe\x43\x69\x6f\xe4\xb1\x89\xc8\x91\xf5\x8c\xcc\xcb\x91\x15\xcb\x7c\x19\x5b\xe5\xaa\x5b\x5c\xc8\x18\x69\xb3\x85\xea\xd0\xe5\xaa\x5f\x2c\x6b\xd4\xd2\x56\x8b\xac\x56\xe4\x24\xad\xea\x51\x49\x9f\x95\xbe\x42\xe4\x16\x22\xb3\x10\x5d\x43\xd1\xcb\xc8\xd3\x89\x8e\x6d\xa7\xf6\x24\x32\x2f\x93\x71\x91\xcc\xad\x64\x5c\x29\xdf\x85\xac\x1b\x63\x93\xc8\x89\x65\x1d\x2b\xef\xad\x51\x7b\x2b\x6c\xb7\x6a\x6f\x23\x63\x1b\x99\x5b\xc9\xf8\x36\x54\x5d\x8a\x5c\xf5\x2e\xe5\xdd\xa2\x3b\xfa\xb1\x4f\xb2\x6e\x21\x4f\x24\x6d\xad\xb4\x35\xd8\xc6\x7e\x48\x5b\x83\x5e\xf2\x1e\x5b\x5d\xc3\x8a\xee\x85\x8c\x49\xa5\xad\x12\xdb\x3a\xbe\xe9\x13\x5b\xba\x42\xfb\x59\x23\x96\xa7\xae\xf4\xcc\x32\xf6\x55\xfa\x5b\xdf\x96\x47\xba\x5f\xd8\x1c\xb3\x7e\xa3\xeb\x62\x57\x97\xe9\x2f\xfb\xd2\x88\x8d\xad\x3c\x79\xaa\xb6\x47\x8c\x2d\xf4\x6c\x2a\xa3\x76\x1b\x59\xbb\xb2\xba\x0f\x65\xac\xeb\x54\xad\xca\xb6\xf2\x9b\xc8\x6f\x12\xeb\xfc\x3c\xd7\xb5\xd9\x07\xd6\x6f\x2b\x3d\x7f\xc6\x18\xbf\x0e\x63\xf0\x83\x30\x57\x3f\x62\xac\xa9\xbc\xff\xc8\xd8\xd6\xaa\xcf\xb1\x7f\xac\x65\xe4\xac\x1a\xe3\xcf\x0b\x5f\x29\x75\x1e\x67\x5e\xb4\x7a\xe6\xd8\x5f\xe7\xaa\x03\x7e\x94\xc8\x9c\x32\x57\x39\x9c\x53\x92\xa8\xae\xf8\x66\x5e\xab\x1f\x94\x62\x4f\xda\xa8\xbe\xa1\x51\x1f\x65\xdf\xb3\x4c\xf5\xc1\x2f\x1a\xff\xde\xb0\x27\xde\xb7\x33\xff\xee\xce\xaf\x51\xdb\x90\xd9\xc9\x1a\x71\xad\xe7\xdd\xc9\x6f\x89\xbd\xde\x9f\xd9\xf3\x24\xd7\xbd\x66\xed\x58\xc6\x96\x99\xfa\x58\x94\xea\xda\x69\xa1\xfd\xc4\x10\xfd\x5d\xac\x7e\x56\x5b\x3d\xf3\xca\xfb\x07\x3e\x80\xdc\xd4\xaa\xfd\xf8\x2d\x7b\x12\x76\xdb\xd8\x65\xaf\x78\xf0\x0d\xf4\xe1\x3c\x9d\x6f\xd1\x1f\x0d\xe3\x8e\x87\x9c\xbd\x07\x1e\x7c\x42\xd9\x97\xa8\x87\xb4\xb3\x93\xe8\x25\x43\xed\xc3\x98\x13\x69\x3f\xde\x4b\xce\x8e\xa5\x6b\xb2\xc9\x08\x7b\xa6\xb2\xf4\xff\xb9\x04\xb6\xbb\xb4\xcb\x60\x1b\x9a\x70\x58\xed\xa7\x72\xf1\x26\x85\xba\x24\x28\xa2\xee\x21\xeb\x27\x72\xce\x59\x70\x48\xf7\x80\xbc\x72\x16\xa4\x55\x7e\x12\x90\x21\xce\x76\x13\xc8\x38\x8d\xc3\x89\x6b\x07\xf7\xcf\x34\x2f\xfc\x79\xde\xdf\x8c\xa3\x34\x4f\xe2\xb4\xc8\x8a\xec\x24\x08\x27\x92\xe9\x6b\x96\xfe\xce\x59\xf9\xc9\x99\x76\x16\x78\x0b\xd1\xeb\x2c\x70\x3f\x9f\x37\x3b\x5e\x9f\x3c\x06\xea\xaf\x95\x31\xfe\xe5\x72\xf6\x2c\x68\xc7\x75\x71\xa9\x94\x70\x8b\x15\x82\xb3\x58\xa1\x3a\x2d\xb5\x1f\xd8\xc4\x45\xd3\x4a\xa1\x8f\xfe\x0e\x79\x89\x42\x00\x70\x1b\xc9\x6f\x95\x68\x1f\xdf\x25\x72\x23\x85\x0e\xe0\x7e\x80\x7c\x7e\x81\x07\x07\x77\xe8\x93\xe9\x3b\x21\x06\x64\x84\xfe\x3b\x25\x5c\x7c\x1b\x70\xcc\xd3\xe6\xdb\x31\xa9\x1f\x17\xfb\xdf\x41\x26\x30\xd0\xe4\xda\xce\x3b\x10\xec\x60\x97\x10\x4e\xf5\x21\x4c\x5d\x8a\x49\xb5\x1d\x08\x09\x63\xd5\xc1\xc1\x83\xb4\x9b\x48\xa1\x24\x43\x37\x0f\xb5\x95\x7f\x1f\x9e\x34\x54\x1b\xf8\x6d\x3c\xbc\xba\xb0\x23\xb5\x14\xfa\x7d\x3f\x34\x49\x19\xc8\x8e\x63\x85\x58\xa0\x6b\x73\x3e\x07\x43\x73\x7b\xc8\x5f\x1d\xa0\x5b\x51\xf7\xc3\xf4\x61\x09\xf2\x68\xb8\x6e\x05\x3d\x23\x68\x1f\x18\xf4\x6f\x08\xdd\x7d\xf6\xf8\x10\x8e\x92\xf8\x77\x87\x70\x16\x15\x51\x94\xbe\x5c\x08\x4b\x1d\xf9\x95\xb4\x2c\x93\x98\x2c\xad\xc6\xa7\xa3\x65\xa1\xa7\x30\xa1\xfa\x15\xfe\x45\x9a\x24\x06\x88\x9f\xce\x53\x02\x28\x05\xf4\xc5\x94\x1a\xd3\xa4\x95\xaa\x56\x0a\x44\xaa\xc8\x72\x8d\x53\x97\x26\x3b\x1f\xbb\x9e\x26\xb9\x74\xe4\x65\x65\x46\xe3\x9c\x54\x08\x2e\x14\xe2\xd3\x39\x4f\xa1\x74\x29\xf7\x31\x04\x55\xcb\x2b\x4d\x5b\xa4\x21\xf4\x2d\x52\x5d\x0b\xaa\xe3\x52\x66\xa6\x14\x26\x8d\x55\x67\x97\xbe\x23\x8d\x57\x52\x69\xe1\xe3\x13\x7a\x01\x2d\x04\x57\xa0\x74\x03\x5d\x8b\x7d\xdc\x96\x89\x52\x8c\xb8\xd5\xd4\x4a\xdc\xa2\x7f\x24\xb2\x4b\xf4\x0a\x35\xc5\x43\x1b\x79\x9a\x4a\x71\x85\x78\x25\xf5\x42\x47\xa0\x11\xe0\x98\x31\x4a\x1f\xa0\x75\x50\x98\x84\xfd\x22\xd5\x7b\xfd\x23\xe8\x6e\xab\xfb\x51\x76\xaa\xb3\xa3\xc9\x95\x9e\x05\xf6\xba\x75\x7d\x5a\x67\x0f\x07\xba\x91\x78\x7a\xc8\x19\x43\x9b\xad\xa7\xca\x03\x15\x83\x7a\x84\x56\xcf\x04\xf9\x50\x41\x28\x14\x98\x9a\x58\xd5\xaf\xf4\x98\x03\x85\x84\x5e\x80\x7b\xcc\x67\x4f\xa0\xd4\x50\x0a\xda\xb0\xc3\xe9\xed\xe9\x39\xfb\x9c\x35\x8a\xa5\x9c\x8d\x35\x8a\xf3\x9c\x1d\x6d\xac\xc5\xdc\xce\x63\x16\xf4\xbb\x4d\xf4\x5c\x79\xc7\x07\xe3\x4a\xf1\xbf\xf3\x34\x3b\xb7\xea\x13\xf8\x07\x54\xbf\x8e\xd4\x07\xa0\x34\xd0\x38\xc6\xde\xc7\x42\x7c\x1c\xbc\xac\x07\xdc\xac\x0f\xd3\x94\x3b\xd1\xf2\x4c\x10\xbc\x23\x63\x07\xfd\xee\xde\xf9\xec\x01\xbd\x3b\x13\xbf\x18\xed\xf6\xa9\xfc\xb2\x30\x77\x5f\x71\x8f\x6e\x71\x55\xfe\xe1\x04\x65\x63\xfc\x57\xf2\x13\xe2\x0c\x7c\xa0\x8c\x21\x8e\x89\x25\x4a\xcf\xb0\x55\x6c\x71\x18\x67\x3c\x1f\x08\x75\x3e\xd4\x1d\x7c\x23\xde\xc9\xc5\xd0\x64\xe6\x10\x7b\xf8\x21\x71\x5f\xc7\xea\xc3\xe0\x12\xe5\x05\xe5\x06\xbe\x4c\x2c\x11\x57\xe0\x1e\x31\x08\xc6\x10\x9b\x36\xf3\x7e\x0b\xcf\xe9\x14\x0b\x88\x4f\xe8\x37\xb1\x4e\x69\x94\x14\x7e\x0d\xe2\x35\xd4\x52\x06\x3d\x29\xb7\xd0\x93\x52\xc1\x61\x62\xa8\xbf\x60\x5e\x5e\x2a\x1e\x50\xee\xc1\x47\x28\x15\x29\x4b\xe0\x64\x94\x1a\x94\x62\xf0\x13\x4a\x3c\xf6\x27\xeb\x74\x2c\xef\xae\x3c\xed\x7c\x69\x52\x6e\xcb\xb3\x2a\xd6\x7c\x80\x8d\x70\x20\x57\x06\x5b\x8d\x79\xb0\x1e\xee\x46\x09\x4c\x6c\x52\x8a\x46\x5e\x67\xf2\x01\x65\x36\xb6\x81\xed\xe0\x97\xc3\xb2\x52\x65\xd5\xbe\x2c\xe4\xa1\xbc\xe4\x3c\xc0\xae\xb0\x50\x1d\xc1\x55\xf6\xd4\x7a\x9d\x18\x0f\x3f\xac\x6b\x8f\x9f\xa9\xe2\x02\x78\xc3\x03\xde\xa0\x17\x78\x66\x53\xc5\x0f\xdb\x68\x5b\xe5\x31\x8a\x72\x9e\xb2\x9f\x3d\xdc\x87\x21\xac\x01\x66\xb8\x32\x27\xf3\xfb\x74\x80\x4f\xed\xf1\xc9\xaf\x45\x92\xbd\x6c\x6a\xff\x0d\xf1\x63\xb8\xf2\x0c\x2e\x75\xd8\x98\x97\xc7\x98\x47\x98\x54\x1c\x86\x7f\x34\xd6\xfc\xac\x57\xe8\x2f\x45\xa6\x22\xdf\x97\xee\x90\xa9\xfc\x1e\x99\xe2\x0e\xa8\xdb\x92\x29\x1c\x1b\x20\x21\x68\x21\x07\x90\x01\x88\x15\x8e\xdc\xf8\x77\x77\x3f\x82\xac\x4a\xc1\x28\xf5\xce\xdc\x0e\x00\x93\xfb\x84\xe8\x6b\xfb\xda\x27\x71\x57\x74\xf9\xfb\x21\xf4\x40\x57\x03\xa1\x4a\x34\x60\x49\xb2\x14\x20\xdc\x75\x38\x62\xd2\x6a\x51\x03\x48\x54\x91\x2f\xf0\x3c\x60\x10\x4c\x90\x3b\xbe\x21\x2e\x00\x11\x85\x13\xc9\xdb\xdd\xcd\x19\xdd\x27\x02\x8e\xc2\xc6\x15\x7d\xa1\xdf\xa7\x5c\xc1\x0e\x42\x35\xdc\x29\xb0\x36\x77\x63\xc8\x65\x5e\x69\x94\xa8\x01\x04\x8e\x20\x16\x4a\x26\x62\x4f\xfa\x62\x7f\x17\x85\x7e\x26\xd7\x3b\x0e\x8a\x4c\xec\xa2\x78\xec\x52\x25\x2a\xdc\x75\x00\xf4\x45\xa1\x04\x10\x90\x0b\x1b\x25\x5c\x00\xb4\xbb\x7b\x34\xba\x5f\xac\xe5\xee\x6d\x2a\x1d\x07\x78\x41\x78\x18\xc3\x59\xba\x73\x8c\x74\xac\xf5\x64\xc7\x78\x72\x45\xe2\x80\x64\x42\xfa\x98\xef\x80\xd1\xf8\xbb\xb4\x58\x01\x18\x70\x03\x44\x39\xd3\xa4\xd1\x7b\x2a\x77\xb7\x65\xb4\x0d\x9d\x18\x0f\x09\x76\x24\x3a\x53\x1b\x1c\x21\xca\xf5\x5c\xb8\x0f\x84\x40\x19\x4f\xa6\x00\x61\x57\x0c\x7a\x3b\x69\x43\x67\xce\x88\xe2\x19\x40\x73\xc4\xad\xd3\x3d\xa6\x8f\xfd\x64\xec\x70\x77\x86\xaf\x52\xd8\x02\xf8\xf7\x41\x91\x44\xc0\xbe\x0c\xbe\xc3\xbd\xd5\x01\x62\xf5\x20\x78\x9e\x87\x88\x0f\xc4\x6c\xe1\xf0\xe1\xbf\xc1\x1e\x22\xe1\x83\xe9\x5f\x0a\x83\x87\xd4\x7f\x51\x0c\xdc\x67\x81\x87\xbf\x24\x8c\xfe\xa3\xe0\xef\x7f\xb7\x41\xff\xad\xb7\x41\x07\x8e\xf9\x05\xc2\x75\x1f\x87\x39\xfc\x6f\xe9\x27\x82\xf7\xf7\x33\x99\x7f\x05\x00\x00\xff\xff\xd8\x38\x5e\xf8\x00\x20\x00\x00")

func templatesGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesGo,
		"templates.go",
	)
}

func templatesGo() (*asset, error) {
	bytes, err := templatesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates.go", size: 16384, mode: os.FileMode(420), modTime: time.Unix(1463518747, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"init/rails/Dockerfile": initRailsDockerfile,
	"init/rails/docker-compose.yml": initRailsDockerComposeYml,
	"init/ruby/Dockerfile": initRubyDockerfile,
	"init/ruby/docker-compose.yml": initRubyDockerComposeYml,
	"init/sinatra/Dockerfile": initSinatraDockerfile,
	"init/sinatra/docker-compose.yml": initSinatraDockerComposeYml,
	"templates.go": templatesGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"init": &bintree{nil, map[string]*bintree{
		"rails": &bintree{nil, map[string]*bintree{
			"Dockerfile": &bintree{initRailsDockerfile, map[string]*bintree{
			}},
			"docker-compose.yml": &bintree{initRailsDockerComposeYml, map[string]*bintree{
			}},
		}},
		"ruby": &bintree{nil, map[string]*bintree{
			"Dockerfile": &bintree{initRubyDockerfile, map[string]*bintree{
			}},
			"docker-compose.yml": &bintree{initRubyDockerComposeYml, map[string]*bintree{
			}},
		}},
		"sinatra": &bintree{nil, map[string]*bintree{
			"Dockerfile": &bintree{initSinatraDockerfile, map[string]*bintree{
			}},
			"docker-compose.yml": &bintree{initSinatraDockerComposeYml, map[string]*bintree{
			}},
		}},
	}},
	"templates.go": &bintree{templatesGo, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

