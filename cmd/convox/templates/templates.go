package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _init_rails_dockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x50\xbb\x4e\xc4\x30\x10\xec\xfd\x15\x2b\xd1\x5f\x7a\x5a\x24\xa8\xe0\x50\x24\x0a\xba\xf3\x39\xeb\x60\xe2\xd8\x96\x1f\x27\xf2\xf7\x6c\xd6\x09\x21\xa7\xa4\xca\x3c\xec\x99\xf1\x73\x7b\x7e\x05\xe5\xdd\xcd\xff\x34\x51\x1a\x9b\x84\x78\x20\x1c\x26\xf0\xce\x4e\x90\xbf\x10\xb4\xb1\x98\xc0\x21\x76\xd8\x81\xf6\x11\xae\xc5\x75\x16\xc1\xb8\x94\xa5\xb5\xe4\x2f\x4e\xf9\x71\x44\x97\xd9\x7f\x43\xd7\xf9\xd8\x28\xa9\x08\x58\xe3\xc8\xa9\x61\xf2\x05\x2e\xcb\xc1\x20\xd5\x20\x7b\xbc\xcc\x64\x84\x1e\xc7\x24\x9e\xce\xef\x9f\xf0\x82\xe3\x9c\x05\xfc\x35\x32\x84\x66\x61\x76\xf2\xc9\x7a\x35\xec\x64\x66\xa8\x06\xbb\x76\xe9\xec\xfa\xcf\x88\xf6\xe3\xed\xbe\xff\x3a\xf8\xbb\xa4\x7c\x3c\x58\xa6\x84\x39\x3d\x86\x88\xb4\x33\xfc\x15\x6a\xe5\x80\x4b\x61\x0e\x5a\x71\x55\xe9\x51\xb5\xe9\xb7\x2d\x15\x57\x2d\x94\xab\x35\x6a\xd3\x2a\xae\xda\x8c\x6b\x60\xd5\x36\xcc\xe5\x23\x85\x1c\x14\x5a\x47\xcc\xfd\x23\xd2\x10\xaf\xf9\x9f\x4e\xd7\x6b\x4f\x7c\x9b\xf8\x0d\x00\x00\xff\xff\x08\xae\x24\x4e\xf0\x01\x00\x00")

func init_rails_dockerfile_bytes() ([]byte, error) {
	return bindata_read(
		_init_rails_dockerfile,
		"init/rails/Dockerfile",
	)
}

func init_rails_dockerfile() (*asset, error) {
	bytes, err := init_rails_dockerfile_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "init/rails/Dockerfile", size: 496, mode: os.FileMode(420), modTime: time.Unix(1462170588, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _init_rails_docker_compose_yml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\x03\x32\x73\x12\x93\x52\x73\x8a\x41\x82\x0a\x0a\xba\x0a\xc9\xf9\x79\x65\xf9\x15\x7a\x05\xf9\x45\x25\x7a\x26\x26\xc6\x7a\x05\x45\xf9\x25\xf9\xc9\xf9\x39\xb6\x25\x39\xc5\xb8\x95\x54\x54\xda\x96\x14\x95\xa6\x02\x15\x80\x44\xe1\x86\x59\x18\x58\x99\x18\x18\x18\x40\x79\x40\xb5\x20\xae\x21\x17\x20\x00\x00\xff\xff\xc0\xe1\x22\xef\x84\x00\x00\x00")

func init_rails_docker_compose_yml_bytes() ([]byte, error) {
	return bindata_read(
		_init_rails_docker_compose_yml,
		"init/rails/docker-compose.yml",
	)
}

func init_rails_docker_compose_yml() (*asset, error) {
	bytes, err := init_rails_docker_compose_yml_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "init/rails/docker-compose.yml", size: 132, mode: os.FileMode(420), modTime: time.Unix(1462170591, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _init_ruby_dockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xcd\x4e\xc0\x20\x10\x84\xef\x3c\xc5\x26\xde\xcb\x43\x98\xe8\x49\x6b\x9a\x78\xf0\x56\x0a\x4b\x6d\x0a\xbb\x84\x9f\x46\xde\x5e\x8a\x35\xb1\x72\x62\x67\xbf\x61\x86\xa7\x69\x7c\x01\xcd\x74\xf0\x97\x8c\x65\xa9\x42\x3c\xb4\x31\x54\x60\x72\x15\xf2\x27\x82\xdd\x1c\x26\x20\x44\x83\x06\x2c\x47\x58\x0a\x19\x87\xb0\x51\xca\xca\xb9\xc6\x17\xd2\xec\x3d\x52\xee\xfc\x81\x64\x38\x4a\xad\x74\x1b\xdc\x46\x8d\xb4\x50\xb9\xc0\x7c\x19\x83\xd2\xbb\x5a\x71\x3e\xc5\x08\x2b\xfa\x24\x1e\xc7\xb7\x0f\x78\x46\x7f\x66\x41\x3f\x52\x85\x20\x2f\xe5\xb6\x1e\x1c\xeb\xfd\xb6\xee\x4a\xab\xd1\xa9\x5b\x7a\xa7\xfe\x2a\x62\x7a\x7f\xfd\xdf\xff\xf7\xc3\x67\xf7\x88\x29\x03\xdb\x7e\x6f\xde\x9f\xe0\xa1\xbf\x23\xbe\x03\x00\x00\xff\xff\x8b\xae\xa0\xae\x2a\x01\x00\x00")

func init_ruby_dockerfile_bytes() ([]byte, error) {
	return bindata_read(
		_init_ruby_dockerfile,
		"init/ruby/Dockerfile",
	)
}

func init_ruby_dockerfile() (*asset, error) {
	bytes, err := init_ruby_dockerfile_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "init/ruby/Dockerfile", size: 298, mode: os.FileMode(420), modTime: time.Unix(1462173381, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _init_ruby_docker_compose_yml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\x03\x32\x73\x12\x93\x52\x73\x8a\x41\x82\x0a\x0a\xba\x0a\xc9\xf9\x79\x65\xf9\x15\x7a\x05\xf9\x45\x25\x7a\x26\x26\xc6\x7a\x05\x45\xf9\x25\xf9\xc9\xf9\x39\xb6\x25\x39\xc5\xb8\x95\x54\x54\xda\x96\x14\x95\xa6\x02\x15\x80\x44\xe1\x86\x59\x18\x58\x99\x18\x18\x18\x40\x79\x40\xb5\x20\xae\x21\x17\x20\x00\x00\xff\xff\xc0\xe1\x22\xef\x84\x00\x00\x00")

func init_ruby_docker_compose_yml_bytes() ([]byte, error) {
	return bindata_read(
		_init_ruby_docker_compose_yml,
		"init/ruby/docker-compose.yml",
	)
}

func init_ruby_docker_compose_yml() (*asset, error) {
	bytes, err := init_ruby_docker_compose_yml_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "init/ruby/docker-compose.yml", size: 132, mode: os.FileMode(420), modTime: time.Unix(1462173333, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_go = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\x5b\x6f\xdb\x46\x13\x7d\x16\x7f\xc5\x7e\x02\x12\x48\x1f\x54\x99\x5c\xde\x05\xe4\x25\x49\x0b\xe4\xa1\x79\xe8\xe5\xa9\x2e\x04\x5e\x76\x5d\x22\x92\xa8\x52\x74\x2a\xc7\xf0\x7f\xef\x39\x3b\x2b\x47\x49\x5c\x1b\x48\xd3\x87\x25\xf7\x32\x3b\x73\x66\x76\x6e\xfb\xaa\x79\x57\x5d\x19\x35\x9a\xed\x7e\x53\x8d\xe6\x10\x04\xdd\x76\xdf\x0f\xa3\x9a\x05\x93\x69\x7d\x83\x9d\x29\x26\x4d\xbf\xdd\x0f\xe6\x70\xb8\xb8\xfa\xd0\xed\xb9\x61\xb7\x23\x7f\x5d\xcf\xef\x61\x1c\xba\xdd\x95\x23\xec\xdd\x77\xec\xb6\x46\x8e\x2f\xba\xfe\x7a\xec\x36\x5c\xec\xab\xf1\x8f\xd3\xff\xc2\x76\x1b\x23\x1b\xf3\x20\xb0\xd7\xbb\x46\xd5\xdd\xae\xad\xc6\x6a\x3d\x98\xaa\x9d\x71\xa6\x7e\xfb\x9d\xf2\x17\x6a\x57\x6d\x8d\x12\x19\x73\x35\x3b\xed\x9a\x61\xe8\x87\xb9\xba\x0d\x26\x57\x1f\xdc\x4a\xad\x5e\x28\xc2\x5b\xbe\x35\x7f\xfd\x04\x26\x66\x98\x39\xfc\x5c\xbf\xbc\xb6\x16\x6b\xb2\x9d\xcf\x83\x49\x67\xdd\x85\xff\xbd\x50\xbb\x6e\x43\x16\x93\xc1\x8c\xd7\xc3\x8e\xcb\x85\x82\x6e\xcb\xef\xc9\xdd\xce\xa6\x64\xa4\x9e\xfd\xb9\x52\xcf\xde\x4f\x05\x89\x93\x05\x1e\x77\x41\x30\x79\x5f\x0d\xaa\xbe\xb6\x4a\xe4\x88\x90\x60\xb2\x16\x38\x2f\x54\xd7\x2f\x5f\xf5\xfb\x9b\xd9\x73\xd0\x2c\x80\x6d\x4e\xac\xcb\x57\x9b\xfe\x60\x66\x50\xfb\x9b\xc1\xf0\xb7\x20\x65\xf9\x92\x48\x66\xf3\x05\x59\x04\x38\x1b\x6f\xf6\x46\x55\x87\x83\x19\x69\xc1\xeb\x66\xa4\x18\x07\xd7\x9b\x17\x28\x76\xb6\x57\xaa\x3f\x2c\x7f\xc0\x9b\xbc\xc1\xe2\xfe\xde\xe9\x49\xf8\x58\x6b\x47\xf6\x91\xc7\xd9\xa3\x04\x93\x43\xf7\xc1\xa8\x6e\x37\x66\x49\x30\xd9\xf6\xad\x39\x71\xfb\x11\x73\xb7\xf3\x0b\x1c\x42\xd1\x2b\x96\x9c\x51\x80\x7b\xf3\x99\xed\xbe\x14\x32\x57\x6f\xc1\x7b\x36\xf7\xdc\x29\xcc\x2b\x68\xbb\x25\xc5\xe2\xfa\x63\xb7\x7f\x06\x18\xdc\x76\x70\x3e\xbd\x4c\x98\x4f\x5c\x26\x62\x5c\x3e\xc3\xff\x29\x0b\x6a\xf7\x34\x0b\x2a\x09\x2e\xf7\x0a\x7f\xc1\xc3\x5b\xe1\x31\x36\x6f\x0e\xaf\xbb\x01\x4c\xea\xbe\xdf\x9c\xdf\xaf\x36\x87\x27\x2d\x70\x73\x10\x03\x98\xc1\x56\x8d\xb9\xbd\x3b\xbb\xef\xfd\x82\x9e\x0b\xea\x6e\x5c\x0f\x55\xb7\x39\xac\xdb\xbe\x79\x07\x6a\xf0\x80\xdf\x8a\x67\xcc\xa6\x97\xc7\xc8\x5e\x1e\x8b\xfa\xf2\x18\x16\x18\xa1\x1f\xe5\xe5\x31\x33\xd8\xf7\x7b\x16\x34\x59\x73\x79\x4c\x31\xaf\x41\x9b\xe0\xac\x49\x2e\x8f\x31\xd6\x11\x86\xc1\x99\x6d\x31\x4f\x2f\x8f\x1a\xe7\x6d\x04\x5a\xdc\xc9\x2b\xfc\x31\x34\x68\x2b\xf0\x32\xa1\xf0\xe0\x3a\xc4\x7e\x8d\x61\x63\xf0\x81\x3c\x83\x7b\x19\x79\x69\xdc\x07\x6d\x99\x09\x36\x9d\x83\x06\x7b\x36\x17\x0c\x6d\x26\xf8\x34\x64\x54\xd8\xab\xc0\xab\x01\x9f\xb8\x11\x1c\x25\xce\x2c\xce\x72\xf0\xcd\xc1\x33\x07\xd6\x10\xb8\x0c\x46\x0b\x8c\x4d\x2b\xfa\xc4\xb8\x97\x82\x2e\xc2\xdd\x12\x74\x05\xd6\x39\xe4\x6a\xea\x04\x3e\x1a\x72\x2c\xe6\x8d\x11\x7d\x4b\xea\x6e\x45\xdf\x1a\xb4\x35\xee\x96\xa0\x6f\x42\xc1\x92\x67\x82\xbb\xc0\xdc\x12\x3b\xf1\xd1\x4e\x90\x9b\x63\x44\xd8\x6b\xb0\x57\x53\x37\xda\x03\x7b\x35\x71\x61\xae\xad\xc8\xb0\xc0\x9e\x83\x26\xc1\x5e\x09\xdd\x5a\xae\x79\x06\x5d\xda\x5c\xce\x29\x43\x63\x54\xa5\xbc\x59\x4a\xbb\xe2\xbc\xf1\x7b\x59\x24\xf6\xa2\xce\x9a\xf2\x6b\x91\x4b\xbd\xda\x54\xfe\xb4\x4b\x0d\x1d\x1b\x8c\x2c\x11\xdd\x23\xd2\xe6\xf2\x36\xa5\x11\xbd\x0d\x64\x97\x56\xec\x50\x68\x91\x53\x36\xc2\xdb\xe2\x1f\xe3\x1f\x6b\xb9\x9f\x65\x22\x9b\x76\xa0\xfc\xa6\x94\xf7\x27\x8d\xf1\x72\x48\x43\x3f\x08\x33\xf1\x23\xd2\x9a\xd2\xfb\x0f\x68\x1b\x2b\x3e\x47\xfb\x51\x96\xc1\x5b\xd5\xc6\xbf\x17\x7d\xa5\x90\x7b\x7c\xf3\xbc\x91\x37\xa7\xfe\x55\x26\x18\xe8\x47\x31\xee\x14\x99\xf0\xe1\x3b\xc5\xb1\x60\xa5\x6f\x66\x95\xf8\x41\x01\x7d\x92\x5a\xf0\x86\x46\x7c\x94\x76\x4f\x53\xc1\x43\xbf\xa8\xfd\xbc\xa6\x4d\xbc\x6f\xa7\x7e\xee\xde\xaf\x16\xdd\xc8\xb3\x85\x0c\x5d\xc9\x7b\xb7\xf8\x17\xd4\xd7\xfb\x33\x6d\x1e\x67\x62\x6b\xca\xd6\xa0\x2d\x52\xf1\xb1\x28\x11\xd9\x49\x2e\xe7\x8c\x21\x9e\xb7\x5a\xfc\xac\xb2\xf2\xe6\xa5\xf7\x0f\xfa\x00\xf9\x26\x56\xf4\xa7\xdf\xd2\x26\x61\xfb\x31\x76\x69\x2b\x0e\xfa\x06\xf1\xf0\x3d\x9d\x6f\xf1\x3c\x3a\xd1\x4d\x4f\x35\xf9\xc1\x04\xb1\xae\xa5\xc6\x3c\x54\x8a\x4f\x95\xe8\xbc\x96\xa3\xac\x3d\x9c\x69\x16\x38\x99\xf2\xe4\xc2\x9d\x5c\xbc\xbe\x3f\x99\xe2\x68\x7e\x5f\x25\x1e\xbc\x4c\xf9\xff\x77\x85\xed\x5c\xbe\x83\x76\xdf\x0d\x3c\x0a\xff\xa9\xf2\x8b\x23\xa9\xae\xae\xf0\x81\xdb\x17\x89\xf6\x96\xc5\x68\xa5\xfe\x49\x05\xc5\x72\xb3\x52\x49\x99\x2d\x14\xcb\xc6\xea\xbc\xaa\xcc\x12\x1d\xce\xdd\x3e\x4b\xc1\x4a\x4a\xc5\xaf\xbb\xee\x38\x8b\x92\x4c\x47\x79\x98\x16\xc5\x42\x85\xf3\xbb\x60\x52\x51\xf8\x73\xa7\xea\xad\xc3\xbe\x52\x5e\x4d\x82\x58\x29\xf7\xbb\xbb\xb7\x7d\xb5\x78\x3c\xc7\xaf\xd9\xcb\xa1\x03\x59\xdf\x6c\x37\x5f\x95\xeb\xe9\xcb\xf4\xb1\x84\xf1\xa7\x25\x27\xa7\x5a\x72\x77\x52\xc8\x39\xf3\x28\x7d\x36\x29\x25\x17\xf2\xbc\x25\xbf\x58\x72\x02\xf3\x6f\x84\x7f\x19\xcb\x19\xd7\x05\xf9\x46\x92\x4b\x98\xff\x4f\x35\x80\x7f\xe6\x0b\x97\xff\x88\x27\x95\x39\x63\x8e\x39\x24\xf4\xeb\x84\xf1\xe3\xf7\x98\x9f\x39\x9a\xec\x23\x4d\xe2\xe9\xb4\xff\x9f\x78\x32\x2f\xd4\x99\xec\x73\xce\x9c\xec\xf2\x30\x63\x3a\x91\xc1\xb8\x75\x35\x27\x91\x7d\xe6\x94\x50\x0b\x06\x97\x2f\xb0\x6f\x22\xc9\x2d\x29\xb1\xf9\xdc\x5b\xfa\xf9\x69\x24\xa1\xe8\xc0\x7f\xed\xf3\xad\x8b\x43\xd6\x9a\x5c\xd6\x9f\xc7\x2a\x6b\x08\x79\x6b\x2d\x39\x97\xb9\xec\xfe\x7d\x1e\x89\xd5\xf3\x87\xfe\x26\x31\x7b\xce\xf0\xf3\xd8\x15\x8a\xef\x3c\xc5\x12\x14\x4f\xc4\xf0\x39\xb3\xaf\x8a\xe5\x87\xd4\xfb\x4f\x62\xfa\x21\xd5\x7c\x6c\x47\xb1\xfe\xaa\xd8\x2e\xa3\x6f\x18\xdb\xd7\xf5\xcd\xbf\x6d\xdf\x52\x84\x6a\x61\x25\x6c\x5d\xfb\x16\xfa\x56\x27\x14\x77\xa3\xdb\xb1\x9c\x32\x34\x18\x56\xad\x6f\x1d\xd8\x7a\xb0\xcd\x31\x85\x84\x3a\xcb\x4f\x59\x49\xab\xc4\x92\x92\x66\x12\xbe\xae\x9c\xb6\x3e\xa4\x7d\x3b\xe5\xca\x96\xe7\x95\x1a\x09\x7f\x96\x4c\xa6\x8b\x1c\xae\x9e\x71\xe4\xd2\x56\x65\x3e\xb4\xd8\xd2\x65\xa5\x94\x37\x96\x2b\xe2\xcd\x13\x91\xc5\x96\xc8\x95\xd6\x54\x5a\x9d\x44\x0b\x66\x57\xe6\x23\x09\x63\x96\xdc\xdc\x87\x2d\xdb\x10\xb6\x8f\x4c\x37\x6c\xfd\x4e\x6d\x9d\xf6\xe1\x5c\xc4\xd2\x8a\xe8\x46\x4a\x30\xc3\x99\xf8\x23\xf0\x2e\x88\x2b\x94\x56\x80\xed\x25\x47\x5d\x4a\xba\x61\x18\xb3\x44\xb3\x6d\x61\xbb\xc1\xf4\x66\x8c\xb4\x19\x6c\xff\xd8\xea\xc4\xb4\x17\x5b\x02\x8f\x3f\x62\x5b\xdc\x88\x3d\x8a\x56\x30\xbb\x76\xba\x94\xb7\xa0\xbe\x4e\xae\x2f\xff\xb4\xe1\xa9\x2d\x89\x7d\x1b\xc9\x37\x66\x7b\x6d\x7d\x4b\x7d\x6a\xd9\xd8\xa2\x84\x56\xde\x84\xfc\xd9\x32\xb2\xd5\x62\xaa\x8d\xed\xdf\x01\x00\x00\xff\xff\xb0\x78\xf8\x15\x00\x10\x00\x00")

func templates_go_bytes() ([]byte, error) {
	return bindata_read(
		_templates_go,
		"templates.go",
	)
}

func templates_go() (*asset, error) {
	bytes, err := templates_go_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates.go", size: 8192, mode: os.FileMode(420), modTime: time.Unix(1462174245, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"init/rails/Dockerfile": init_rails_dockerfile,
	"init/rails/docker-compose.yml": init_rails_docker_compose_yml,
	"init/ruby/Dockerfile": init_ruby_dockerfile,
	"init/ruby/docker-compose.yml": init_ruby_docker_compose_yml,
	"templates.go": templates_go,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"init": &_bintree_t{nil, map[string]*_bintree_t{
		"rails": &_bintree_t{nil, map[string]*_bintree_t{
			"Dockerfile": &_bintree_t{init_rails_dockerfile, map[string]*_bintree_t{
			}},
			"docker-compose.yml": &_bintree_t{init_rails_docker_compose_yml, map[string]*_bintree_t{
			}},
		}},
		"ruby": &_bintree_t{nil, map[string]*_bintree_t{
			"Dockerfile": &_bintree_t{init_ruby_dockerfile, map[string]*_bintree_t{
			}},
			"docker-compose.yml": &_bintree_t{init_ruby_docker_compose_yml, map[string]*_bintree_t{
			}},
		}},
	}},
	"templates.go": &_bintree_t{templates_go, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

