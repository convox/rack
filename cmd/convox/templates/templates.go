// Code generated by go-bindata.
// sources:
// templates/init/rails/.dockerignore
// templates/init/rails/Dockerfile
// templates/init/rails/docker-compose.yml
// templates/init/ruby/.dockerignore
// templates/init/ruby/Dockerfile
// templates/init/ruby/docker-compose.yml
// templates/init/sinatra/.dockerignore
// templates/init/sinatra/Dockerfile
// templates/init/sinatra/docker-compose.yml
// templates/templates.go
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _initRailsDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\xd7\x4b\xce\xcf\x2b\xcb\xaf\x00\x32\x52\xf3\xca\x80\x64\x7a\x66\x09\x97\x7e\x4a\x92\xbe\x96\x5e\x71\x61\x4e\x66\x49\xaa\x31\x2a\x4f\x37\x2b\xbf\xb4\x28\x2f\x31\x87\x4b\x3f\x27\x3f\x5d\x5f\x8b\x4b\xbf\x24\xb7\x80\x0b\x10\x00\x00\xff\xff\xa0\x04\x95\x56\x4e\x00\x00\x00")

func initRailsDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerignore,
		"init/rails/.dockerignore",
	)
}

func initRailsDockerignore() (*asset, error) {
	bytes, err := initRailsDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/.dockerignore", size: 78, mode: os.FileMode(420), modTime: time.Unix(1463596712, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initRailsDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x50\xbb\x4e\xc4\x30\x10\xec\xfd\x15\x2b\xd1\x5f\x7a\x5a\x24\xa8\xe0\x50\x24\x0a\xba\xf3\x39\xeb\x60\xe2\xd8\x96\x1f\x27\xf2\xf7\x6c\xd6\x09\x21\xa7\xa4\xca\x3c\xec\x99\xf1\x73\x7b\x7e\x05\xe5\xdd\xcd\xff\x34\x51\x1a\x9b\x84\x78\x20\x1c\x26\xf0\xce\x4e\x90\xbf\x10\xb4\xb1\x98\xc0\x21\x76\xd8\x81\xf6\x11\xae\xc5\x75\x16\xc1\xb8\x94\xa5\xb5\xe4\x2f\x4e\xf9\x71\x44\x97\xd9\x7f\x43\xd7\xf9\xd8\x28\xa9\x08\x58\xe3\xc8\xa9\x61\xf2\x05\x2e\xcb\xc1\x20\xd5\x20\x7b\xbc\xcc\x64\x84\x1e\xc7\x24\x9e\xce\xef\x9f\xf0\x82\xe3\x9c\x05\xfc\x35\x32\x84\x66\x61\x76\xf2\xc9\x7a\x35\xec\x64\x66\xa8\x06\xbb\x76\xe9\xec\xfa\xcf\x88\xf6\xe3\xed\xbe\xff\x3a\xf8\xbb\xa4\x7c\x3c\x58\xa6\x84\x39\x3d\x86\x88\xb4\x33\xfc\x15\x6a\xe5\x80\x4b\x61\x0e\x5a\x71\x55\xe9\x51\xb5\xe9\xb7\x2d\x15\x57\x2d\x94\xab\x35\x6a\xd3\x2a\xae\xda\x8c\x6b\x60\xd5\x36\xcc\xe5\x23\x85\x1c\x14\x5a\x47\xcc\xfd\x23\xd2\x10\xaf\xf9\x9f\x4e\xd7\x6b\x4f\x7c\x9b\xf8\x0d\x00\x00\xff\xff\x08\xae\x24\x4e\xf0\x01\x00\x00")

func initRailsDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerfile,
		"init/rails/Dockerfile",
	)
}

func initRailsDockerfile() (*asset, error) {
	bytes, err := initRailsDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/Dockerfile", size: 496, mode: os.FileMode(420), modTime: time.Unix(1463247575, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initRailsDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\x03\x32\x73\x12\x93\x52\x73\x8a\x41\x82\x0a\x0a\xba\x0a\xc9\xf9\x79\x65\xf9\x15\x7a\x05\xf9\x45\x25\x7a\x26\x26\xc6\x7a\x05\x45\xf9\x25\xf9\xc9\xf9\x39\xb6\x25\x39\xc5\xb8\x95\x54\x54\xda\x96\x14\x95\xa6\x02\x15\x80\x44\xe1\x86\x59\x18\x58\x99\x18\x18\x18\x40\x79\x40\xb5\x20\xae\x21\x17\x20\x00\x00\xff\xff\xc0\xe1\x22\xef\x84\x00\x00\x00")

func initRailsDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerComposeYml,
		"init/rails/docker-compose.yml",
	)
}

func initRailsDockerComposeYml() (*asset, error) {
	bytes, err := initRailsDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/docker-compose.yml", size: 132, mode: os.FileMode(420), modTime: time.Unix(1463517114, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initRubyDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\xd7\x4b\xce\xcf\x2b\xcb\xaf\x00\x32\x52\xf3\xca\x80\x64\x7a\x66\x09\x17\x20\x00\x00\xff\xff\xc9\x68\x92\x70\x1e\x00\x00\x00")

func initRubyDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerignore,
		"init/ruby/.dockerignore",
	)
}

func initRubyDockerignore() (*asset, error) {
	bytes, err := initRubyDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/.dockerignore", size: 30, mode: os.FileMode(420), modTime: time.Unix(1463597035, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initRubyDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xcd\x4e\xc0\x20\x10\x84\xef\x3c\xc5\x26\xde\xcb\x43\x98\xe8\x49\x6b\x9a\x78\xf0\x56\x0a\x4b\x6d\x0a\xbb\x84\x9f\x46\xde\x5e\x8a\x35\xb1\x72\x62\x67\xbf\x61\x86\xa7\x69\x7c\x01\xcd\x74\xf0\x97\x8c\x65\xa9\x42\x3c\xb4\x31\x54\x60\x72\x15\xf2\x27\x82\xdd\x1c\x26\x20\x44\x83\x06\x2c\x47\x58\x0a\x19\x87\xb0\x51\xca\xca\xb9\xc6\x17\xd2\xec\x3d\x52\xee\xfc\x81\x64\x38\x4a\xad\x74\x1b\xdc\x46\x8d\xb4\x50\xb9\xc0\x7c\x19\x83\xd2\xbb\x5a\x71\x3e\xc5\x08\x2b\xfa\x24\x1e\xc7\xb7\x0f\x78\x46\x7f\x66\x41\x3f\x52\x85\x20\x2f\xe5\xb6\x1e\x1c\xeb\xfd\xb6\xee\x4a\xab\xd1\xa9\x5b\x7a\xa7\xfe\x2a\x62\x7a\x7f\xfd\xdf\xff\xf7\xc3\x67\xf7\x88\x29\x03\xdb\x7e\x6f\xde\x9f\xe0\xa1\xbf\x23\xbe\x03\x00\x00\xff\xff\x8b\xae\xa0\xae\x2a\x01\x00\x00")

func initRubyDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerfile,
		"init/ruby/Dockerfile",
	)
}

func initRubyDockerfile() (*asset, error) {
	bytes, err := initRubyDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/Dockerfile", size: 298, mode: os.FileMode(420), modTime: time.Unix(1463247575, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initRubyDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8c\xc1\x0a\x83\x30\x0c\x86\xef\x3e\x45\xf0\x6e\xe9\x98\x87\x21\xf8\x30\x5a\x03\xca\xa2\x29\x69\x3a\xed\xdb\x2f\x85\x6d\xb7\xdd\xfa\xf5\xff\xf2\x9d\x38\x0f\x0d\xc0\x9c\x37\x5a\x06\x70\xf6\x0c\xbc\xef\xd3\x61\x80\x61\x65\x68\x71\xd9\x14\x16\x0e\x4f\x94\xce\xa6\xc8\x09\x5d\xd9\x09\xce\x4d\x57\x28\x9c\x05\x92\x4e\xa2\x39\x7e\x0f\x5b\x6b\xd0\x34\x23\xa5\x1a\x06\xe8\x6c\x38\x5e\x7c\xb9\xc8\xa2\xae\xef\xef\x2e\x0a\x2b\x07\xa6\x51\x29\xfd\x57\xae\x32\xaa\x64\x34\xa1\xfe\xfe\x62\x0f\x3f\xf4\xde\xfb\x0f\x99\x5b\xf1\xd6\xbc\x03\x00\x00\xff\xff\xae\x01\x4e\xf5\xc8\x00\x00\x00")

func initRubyDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerComposeYml,
		"init/ruby/docker-compose.yml",
	)
}

func initRubyDockerComposeYml() (*asset, error) {
	bytes, err := initRubyDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/docker-compose.yml", size: 200, mode: os.FileMode(420), modTime: time.Unix(1463247575, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initSinatraDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\xd7\x4b\xce\xcf\x2b\xcb\xaf\x00\x32\x52\xf3\xca\x80\x64\x7a\x66\x09\x17\x20\x00\x00\xff\xff\xc9\x68\x92\x70\x1e\x00\x00\x00")

func initSinatraDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerignore,
		"init/sinatra/.dockerignore",
	)
}

func initSinatraDockerignore() (*asset, error) {
	bytes, err := initSinatraDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/.dockerignore", size: 30, mode: os.FileMode(420), modTime: time.Unix(1463597112, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initSinatraDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xc1\x6e\x84\x20\x10\x86\xef\x3c\xc5\x24\xbd\xcb\x43\x34\x69\x4f\xad\x8d\x49\x0f\xbd\x49\x61\x70\x89\x30\x43\x00\xcd\xfa\xf6\x8b\xac\x9b\xac\xeb\x49\xbe\xf9\x86\xff\xe7\x63\xe8\xbf\x40\x33\xad\x7c\x95\xd9\x91\x2a\x49\x09\xf1\x56\x49\xdc\x80\xc9\x6f\x50\x2e\x08\xd6\x79\xcc\x40\x88\x06\x0d\x58\x4e\xf0\xbf\x90\xf1\x08\x8e\x72\x51\xde\x57\x7f\x21\xcd\x21\x20\x95\xe6\xaf\x48\x86\x93\xd4\x4a\xd7\x83\x77\x54\x4d\x0b\x1b\x2f\x30\x1e\x8b\x51\xe9\x59\x4d\x38\xee\x30\xc1\x84\x21\x8b\xf7\xfe\xe7\x0f\x3e\x31\xec\x59\xd0\x3e\xa9\x62\x94\x07\x39\x8d\x3b\xcf\x7a\x3e\x8d\x1b\xa9\x35\x9a\x75\x4a\x6f\xd6\x33\x11\xc3\xef\xf7\x6b\xff\xc7\x83\xf7\xee\x09\x73\x01\xb6\xed\xbf\xee\xde\x83\xbb\x76\x8f\xb8\x05\x00\x00\xff\xff\x9c\x51\x49\xbe\x2d\x01\x00\x00")

func initSinatraDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerfile,
		"init/sinatra/Dockerfile",
	)
}

func initSinatraDockerfile() (*asset, error) {
	bytes, err := initSinatraDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/Dockerfile", size: 301, mode: os.FileMode(420), modTime: time.Unix(1463247575, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initSinatraDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\x03\x32\x73\x12\x93\x52\x73\x8a\x41\x82\x0a\x0a\xba\x0a\xc9\xf9\x79\x65\xf9\x15\x7a\x05\xf9\x45\x25\x7a\x26\x26\xc6\x7a\x05\x45\xf9\x25\xf9\xc9\xf9\x39\xb6\x25\x39\xc5\xb8\x95\x54\x54\xda\x96\x14\x95\xa6\x02\x15\x80\x44\xe1\x86\x59\x18\x58\x99\x18\x18\x18\x40\x79\x40\xb5\x20\xae\x21\x17\x20\x00\x00\xff\xff\xc0\xe1\x22\xef\x84\x00\x00\x00")

func initSinatraDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerComposeYml,
		"init/sinatra/docker-compose.yml",
	)
}

func initSinatraDockerComposeYml() (*asset, error) {
	bytes, err := initSinatraDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/docker-compose.yml", size: 132, mode: os.FileMode(420), modTime: time.Unix(1463247575, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templatesGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x99\x4b\x6f\x23\xb9\x11\xc7\xcf\xd6\xa7\xe8\x35\xb0\x0b\x29\xf0\xca\xfd\x7e\x18\x98\xcb\x8e\x27\xc0\x1c\x32\x0b\xec\x4e\x0e\x41\x1c\x2c\xd8\xdd\x6c\xa7\xb1\xb2\xe4\x48\xf2\xc6\x9e\xc1\x7c\xf7\xd4\x8f\x45\xc9\xb2\x2c\xd9\xe3\xc7\x1c\x82\x3d\xd0\x62\x93\xc5\x7a\x90\x55\x7f\x56\xd1\xc7\xc7\xc1\xdb\x59\x6b\x83\x73\x3b\xb5\x73\xb3\xb4\x6d\x50\xdf\x04\xe7\xb3\x1f\xeb\x7e\xda\x9a\xa5\x19\x0f\x84\x60\x31\xbb\x9a\x37\x76\x71\x42\x7f\x69\x2f\x2e\x27\x42\xb7\x38\xee\xa7\xfd\xf2\x78\x6e\xfa\xc9\xe2\x78\xdc\xce\x9a\xdf\xed\xbc\x3f\x9f\xce\xe6\x76\x2f\xd5\xa9\x23\xea\xfa\xc9\x7e\x12\xe5\xf3\x63\x33\xbb\xb8\x9c\x2d\xec\xf8\xe6\x62\xb2\x8b\xf4\xaa\xbe\x79\x5c\x24\x44\x0f\x4b\x84\xe2\xab\x04\x2e\xfa\xa9\x59\xce\xcd\xa3\x32\x57\x74\x0f\x8a\x5d\x11\x3d\x26\x79\xdd\x1b\x9f\xcf\x98\x39\xfd\x39\xf8\xf0\xf3\xc7\xe0\xdd\xe9\xfb\x8f\xdf\x0d\x06\x97\xa6\xf9\xdd\x9c\xdb\x5b\xfa\xc1\xa0\x17\x46\xf3\x65\x30\x1c\x1c\x1c\xd6\x37\x32\x72\x28\x1d\xb8\xcf\xed\x62\x71\x7c\xfe\xa9\xbf\x64\xa0\xbb\x58\xf2\xd3\xcf\xf8\xbb\x58\xce\xfb\xe9\xb9\x23\x9c\xb9\xbf\xcb\xfe\xc2\xea\xf4\x71\x3f\xbb\x5a\xf6\x13\x3e\x2e\xcd\xf2\xdf\xc7\x18\x43\xe7\x70\x30\x1a\x0c\xba\xab\x69\x13\x78\x07\xf9\xc5\x9a\x76\x48\x27\xf8\xe7\xbf\x10\x7b\x14\x4c\xcd\x85\x0d\x94\xf5\x28\x18\xae\x46\xed\x7c\x3e\x9b\x8f\x82\xcf\x83\x83\xf3\x4f\xee\x2b\x38\x79\x13\xa0\xd5\xf8\x83\xfd\x2f\x4c\xec\x7c\xe8\xd4\xe6\xfb\xa7\xab\xae\x93\x6f\xd8\x8e\x46\x83\x83\xbe\x73\x0b\xbe\x7b\x13\x4c\xfb\x09\x2c\x0e\xe6\x76\x79\x35\x9f\xf2\x79\x14\x88\x49\xe3\x77\x70\xef\x86\x87\x30\x0a\xbe\xff\xcf\x49\xf0\xfd\x1f\x87\xaa\x89\x93\x25\x3c\xbe\x0c\x06\x07\x7f\x98\x79\x50\x5f\x75\x81\xca\x51\x21\x83\x83\xdf\x54\x9d\x37\x41\x3f\x1b\xbf\x9d\x5d\xde\x0c\x7f\x10\x9a\x23\xd1\x4d\x56\x35\x93\x77\x2b\x4d\xc7\x6f\x27\x72\x4e\x43\x31\xff\x95\xf4\x81\x8d\xf2\xdf\xc3\x48\x08\x55\x6f\x3f\x28\x6a\x8d\x7f\x42\xf5\xe1\xe8\x08\x8a\x81\xcc\x2d\x6f\x2e\x6d\x60\x16\x0b\xbb\x64\xcb\xaf\x9a\x25\x5c\x9c\x7d\xfe\x3c\x44\xcc\xb4\x9b\x05\xc1\x6c\x31\xfe\xab\x9c\xe1\x7b\xf9\x58\xaf\xf3\x47\xb8\x1a\xdf\xe0\xb0\x71\x86\x83\x83\x45\xff\xc9\x06\xfd\x74\x99\xa7\x83\x83\x0b\xb0\xc2\xf3\xfa\x9b\xf4\xdd\xc8\x47\x71\x9b\x00\xdf\x19\xd3\x83\xbd\xf3\x90\x61\xd7\x6f\x8b\x18\x05\x1f\x84\xf3\x70\xe4\x79\x23\xca\x1b\xd7\xf5\x63\x84\xca\xe2\xfd\x6b\x7f\x15\x45\x64\xad\x53\xe5\xee\x52\x54\x7c\x70\x29\xba\xca\xd2\x0d\xcd\xef\x32\xc0\xae\xc7\x18\x60\x9c\xf0\x58\x1b\x7a\x8f\x83\xb7\x7e\x3f\x93\xf7\x8b\xd3\x7e\x2e\x2c\xea\xd9\x6c\xb2\xb9\xda\x4c\x16\x8f\x58\x7e\xb3\x50\xc3\x05\x56\x4c\x63\x3f\x7f\xd9\x58\xed\x3d\x01\xe7\xfe\x0d\x84\xf9\x05\x24\x3d\xdd\x40\x2a\x71\x6d\xf5\x85\xe1\xe1\xd9\x75\xd4\x9d\x5d\x97\xf5\xd9\x75\x58\x4a\x0b\x7d\xab\xce\xae\x73\x2b\xe3\x7e\xac\x13\x9a\x36\x96\x56\x9c\x5d\xa7\x42\x1b\x9b\xb3\xeb\xa6\xd5\x7e\x23\xb4\xa9\x34\x9b\xdd\xa5\x69\x64\x7d\x23\xeb\x62\xfa\xd2\x4c\xa7\xbc\x12\xa1\xc9\xa4\x75\x89\x8c\x0b\x9f\x52\xc6\xf2\xf4\xec\xba\x90\x7e\x9e\xab\xec\x4a\x78\x14\xb2\x3e\x95\xb1\x4a\x68\x6b\xe9\x57\x32\x97\xc9\x6f\x11\x09\x9d\xb4\xd4\x2a\x3d\xb2\x8d\xd0\x25\x91\xea\x95\x8a\x9c\xa4\x50\xb9\xb5\xf4\x6b\xe1\x1d\x8b\x1d\x71\xa7\x34\xa5\xd7\x2f\x41\xb7\x42\x7f\x33\xb1\x25\xf3\xfb\x90\xfa\x75\xb1\xac\xab\x0b\xd5\x2f\x94\xb1\x28\xbc\xdd\x1f\xf6\x83\x66\xf8\x16\xba\x4a\x6c\xcf\x72\xd5\x69\xbd\x87\xe1\xe1\x0a\x19\x77\x1e\x82\x0f\xdc\x5d\x80\xb8\x0a\xef\x0d\x40\x15\x24\xd8\x7d\x96\x47\x32\x73\xb8\xef\xe6\x3d\x94\xd9\xd1\x3a\xfc\x76\xae\x47\x83\xbf\x38\xbc\xd8\xd4\xc0\x01\xc6\x1a\x95\x1f\xd2\xff\x31\xf0\x5b\x63\x96\x43\x1d\x61\xb6\xe5\xca\x9f\x09\xf2\x93\xe0\x01\x13\x02\x62\xf9\x24\x28\xca\xa3\x80\xa0\x3c\xd9\x8c\xd9\x61\x1a\x87\x23\x37\x4e\xa8\x9d\x68\x28\xfe\x7d\xda\x5f\x0f\xa3\x34\x4f\xb2\x2a\x2f\xa2\xf8\x28\x08\x47\x02\xae\x06\xe1\x3f\x38\x4b\x3f\x3b\xf3\x4e\x02\x6f\x25\x9a\x9d\x04\xee\xe7\xcb\x7a\xf3\xcd\xd1\x43\x71\xc4\xed\xf7\xac\x28\xca\x1b\xf1\x14\xe9\xd7\xb5\x7a\x4b\x23\xde\x93\x84\xea\x5d\x56\xe6\x3a\xf1\xc4\x28\x53\xef\x6d\x23\xf5\x4a\x22\x23\x33\xea\x91\x46\x78\xd9\x50\x79\xf0\x1d\xca\x78\x6d\x34\x9a\x12\xa2\x50\xd6\xe5\xf0\x22\x12\x4b\x8d\x9a\xc8\x7b\x7a\x47\xd4\x15\xaa\x43\xeb\x23\x2d\x16\x19\x46\xc6\x4c\xaa\xd1\x98\x34\xaa\x47\x25\x73\x9d\xcc\x15\xc2\xb7\xa8\x35\x1a\xc3\xcc\x47\x79\xab\xd1\x8f\x3d\x89\xac\xcb\x84\x2e\x22\x52\x85\xae\x24\x92\x89\x36\x6c\x12\x3e\xb1\xc8\xe9\x42\x45\x03\xec\xad\x42\x8d\x2e\xec\x25\x32\x6b\x59\x5b\x09\x7d\x13\xaa\x2e\x45\xae\x7a\x97\xd2\xef\xd0\x1d\xfd\xd8\x27\x91\x5b\x48\x8b\x64\xac\x91\xb1\x1a\xdb\xd8\x0f\x19\xab\xd1\x2b\xd5\x08\x47\x46\x57\x29\x4a\xa4\xa9\x22\x49\xcb\x37\x73\x89\xa2\x13\xf3\xc8\x00\x15\x4c\xa5\x67\x96\xb1\xaf\x20\x92\x1f\x03\x61\xd8\x2f\x6c\x8e\xad\x22\x18\x72\xb1\xab\xcd\xf4\x97\x7d\xa9\xc5\xc6\xa6\x51\x04\xc3\xf6\x08\xda\x42\xcf\xa6\xb2\x6a\xb7\x15\xd9\x55\xa7\xfb\x50\xc6\x2a\xa7\x6a\x94\x77\x27\xbf\x49\xa6\xa8\xc8\x7a\x10\x2d\xf7\xfb\x80\x7c\xd0\x95\xf3\x87\xc6\x7a\x39\xd0\xe0\x07\x61\xae\x7e\x04\xad\xad\xbc\xff\x18\x45\x5d\x7c\x8e\xfd\x43\x96\x6d\x15\x41\xdd\x79\xe1\x2b\xa5\xae\xe3\xcc\x8b\x46\xcf\x1c\xfb\x4d\xae\x3a\xe0\x47\x89\xac\x29\x73\xe5\xc3\x39\x25\x89\xea\x8a\x6f\xe6\x46\xfd\x00\x64\x04\x2d\xd1\x37\xb4\xea\xa3\xec\x7b\x96\xa9\x3e\xf8\x45\xed\xfb\x20\x69\xec\x7d\x3b\xf3\x7d\x77\x7e\xb5\xda\x06\xcf\x36\x51\x04\xe7\xbc\x5b\x6e\x06\xec\xf5\xfe\xcc\x9e\x27\xb9\xee\x35\xb2\x63\xa1\x2d\x33\xf5\xb1\x28\x55\xd9\x69\xa1\xf3\xc4\x10\xf3\xdc\x46\xf8\x19\x37\x0f\x67\x5e\x79\xff\xc0\x07\xe0\xcb\x4d\x81\xfd\xf8\x2d\x7b\x12\xb6\xf7\x11\x1e\xdf\x40\x1f\xce\xd3\xf9\x16\xf3\xd1\x63\x08\x0f\x3c\xbc\x18\xdf\x61\xb2\x8d\xee\xb7\x33\x0f\x42\x3b\x04\xcf\x00\xf6\x0d\xb5\xbf\x01\xac\x6f\xea\xee\x31\x3d\xad\xf2\x27\x83\x7a\x9c\x16\x59\x91\x7d\x0b\x50\x7f\xab\x95\xd7\x3f\x2e\x26\xcf\x82\xf6\x55\xf2\x91\x12\x6e\xb1\x42\x30\x89\x0e\x50\x9d\x96\xb7\x49\x13\x2e\x4a\xd2\x02\xf4\x31\xdf\xc2\x2f\x51\x08\x00\x6e\x23\xf9\xad\x12\x9d\xe3\xbb\x84\x6f\xa4\xd0\x01\xdc\xaf\x20\x9f\x5f\xe0\xc1\xc1\x1d\xfa\x64\xda\x27\xc4\x80\x8c\xd0\x7f\xa7\x84\x8b\x1f\x03\x8e\x69\x4d\x7e\x4b\x93\x7a\xba\xd8\xff\xae\x78\x02\x03\x75\xae\xe3\xf4\x81\x60\x07\xbb\x84\x70\xaa\x8d\x30\x75\x57\x8c\x4f\x82\x80\x90\x30\x56\x1d\x1c\x3c\xc8\xb8\x8d\x14\x4a\x32\x74\xf3\x50\x5b\xf9\xfe\xaa\xa5\xa1\xda\xc0\x6f\xed\xe1\xd5\x85\x1d\x57\x4b\xa1\xdf\xdb\xa1\xc9\x95\x01\xef\x38\x56\x88\x05\xba\x1e\x4f\xbe\x6e\x0f\xf9\xc5\x01\x7a\xcb\x6a\x3b\x4c\xef\x97\xf2\x0f\x86\xeb\x2d\xa3\x67\x04\xed\x3d\x83\xbe\x41\xe8\xee\xb2\xc7\x87\x70\x94\xc4\x4f\xcf\xcb\xa2\x22\x8a\xd2\xd7\x0b\xe1\xab\xfa\xe6\xff\xaa\xbc\xd9\xeb\xd1\xe8\x55\x6a\xc9\x53\x84\x9a\x4c\xec\xf3\xe8\x2d\x9b\x9f\xe9\xcc\x5b\x5c\x36\xfc\xf8\xde\x93\xda\x0e\x0f\xde\x5a\xfd\xd5\xce\xbb\x5b\xf7\xd7\xf5\xdb\x1d\xfa\x7b\x8f\x4d\xc2\x67\x14\x12\x45\x98\xbc\xe2\x9d\xb3\xde\x80\x67\xd7\x11\x99\x5c\x22\x65\xe7\xdd\xd4\xfa\xfc\xd9\xd7\x11\x00\x21\x80\x48\x5e\x07\x68\x03\xf8\xad\xcf\x61\xc9\x81\xc9\xb7\x6d\xa9\x6e\x4d\x1e\x54\x19\xcd\xd9\xc9\x6d\xa8\x62\xb9\x58\x5c\x5e\xd7\xfa\xcb\xc6\xe7\xf5\x2e\x7f\xf2\xbc\xa8\xc4\x4b\x9f\x97\x72\x91\x15\xe2\xb2\x39\xad\xd0\xfc\x3e\xf7\xa0\x4f\x6d\x91\x57\x9a\x67\x91\x37\xa1\x6f\x91\xaa\x2c\x72\x73\x97\xe3\x65\x9a\x73\xa7\xb1\xea\xec\xf2\xcd\x48\x2f\x18\x72\xbf\xc2\x5f\x28\xe4\xc3\xd4\x31\x5c\x84\xd4\x20\xab\xfa\x22\xf6\x17\x4d\x99\x68\x4e\x1c\x37\x9a\x0b\x72\xd1\xa0\x7f\x54\x69\xd5\x5f\x87\x9a\x93\x12\x96\xb4\xba\xd2\x8b\x90\x70\x24\xb4\xc9\x9f\xc9\x7b\x09\x5f\x6b\x35\xdf\xa5\x0e\x21\x7c\x93\x52\x5f\x23\x8c\xd7\x3f\xa2\x3e\x6b\x74\x3f\xca\x56\x75\x76\x75\x5d\xa5\x67\x81\xbd\x4e\xae\xcf\x43\xd9\xc3\x55\x7e\x9c\xf8\x7a\x86\x33\x06\x3e\x3a\x5f\xdb\xad\x6a\x07\x72\xe5\xb0\xd3\x33\x81\x3f\xb5\x8b\x7b\xe9\x88\xfc\x6b\x45\xac\xb9\x2f\x76\x53\xf3\x00\x4d\x5c\xd4\xac\x67\x4f\xa8\x01\xc9\x81\x19\xb3\xfe\x15\xc5\xf8\x7a\x92\x7d\xce\x6a\x85\x23\xce\xa6\xb3\x0a\x77\x9c\x1d\x63\xc8\x62\x6d\xeb\x21\x89\x7a\xb1\x49\xf4\x5c\xe9\xe3\x83\x71\xa5\x09\x4b\xeb\xeb\xc2\xbc\x53\x9f\xc0\x3f\xa8\x4d\x4d\xe4\x5f\x50\x12\xad\x3b\xa0\xdd\x86\x3a\x7c\x9c\x0b\xde\xac\x2e\x7a\xb3\x3f\xaf\xbe\x13\x2d\x2f\x05\xba\xad\xac\xfa\xee\x3f\x05\x1e\xc2\xb8\x27\xe5\xd4\xbb\x54\x7e\x7d\x7c\xdb\x91\x51\xc7\xd5\xd3\x9f\x49\x5e\x3b\xa3\x5e\x1b\xff\xc2\x84\x9a\x38\x03\x1f\xa8\xbb\x89\x63\x62\x89\xb7\x92\xb0\x51\x6c\x71\x18\x67\x7d\x02\x1b\xea\x7a\x6a\x4d\xf0\x8d\x78\x27\x79\xa4\xae\x63\x0d\xb1\x17\xfa\x2b\xd9\xc4\xea\xc3\xe0\x12\xf5\x30\xf5\x31\xbe\x4c\x2c\x11\x57\xe0\x1e\x31\x08\xc6\x10\x9b\x5d\xe6\xfd\x96\xc4\xbc\x55\x2c\x20\x3e\xa9\x17\x89\x75\x6a\x79\x5e\x1c\x9d\x8c\x5c\xaf\x6e\x6a\x6f\xf4\xe4\x7d\x00\x3d\xa9\x6d\x1d\x26\x86\xfa\x0b\xe6\x71\xd5\x83\x07\xbc\x4f\x90\x40\xf3\xb6\x41\x1d\x4d\x11\x41\x6d\x4c\x8a\x41\x42\xcd\x9b\x04\xfb\xc3\x2b\x25\xb4\xf4\xdd\x7b\x4a\xeb\x6b\xe9\xf2\xf6\x3d\x81\xd4\x81\xfb\x00\x1b\x49\xda\xdd\xbb\x4d\xa7\x31\x0f\xd6\x53\x6c\xf0\x66\x43\x6c\xf2\x76\x12\x79\x9d\xb9\x0f\x78\x17\xc2\x36\xf7\xca\xda\x78\x2c\x2b\x95\x97\xf1\xef\x18\x34\xde\x43\x38\x0f\xb0\x2b\x2c\x54\x47\x70\x95\x3d\xed\xbc\x4e\xd0\x93\x0a\xf1\x32\xeb\xf0\x33\x55\x5c\x00\x6f\x68\xe0\x0d\x7a\x81\x67\x5d\xaa\xf8\xd1\xd5\x3a\x56\x79\x8c\xe2\xfd\x89\x77\x2a\xf6\x70\x17\x86\x20\x23\xf4\x2f\xc1\x9c\x51\x53\x7e\x45\xba\xf4\xe2\xfc\x7f\x07\xa7\x2d\x3c\xf9\xaa\xec\x7f\x07\x9b\xa7\xa3\xcb\x37\xce\xfd\xf7\x19\xb3\xc2\x9a\xf0\xe9\x99\xd4\x2b\x63\xcd\xaf\xfa\xbf\xd3\x3f\x5b\xf6\xbf\xc3\xec\xe7\x79\xf3\x0e\x46\xff\x0b\x00\x00\xff\xff\x4e\x6b\x96\xba\x00\x20\x00\x00")

func templatesGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesGo,
		"templates.go",
	)
}

func templatesGo() (*asset, error) {
	bytes, err := templatesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates.go", size: 16384, mode: os.FileMode(420), modTime: time.Unix(1463597130, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"init/rails/.dockerignore": initRailsDockerignore,
	"init/rails/Dockerfile": initRailsDockerfile,
	"init/rails/docker-compose.yml": initRailsDockerComposeYml,
	"init/ruby/.dockerignore": initRubyDockerignore,
	"init/ruby/Dockerfile": initRubyDockerfile,
	"init/ruby/docker-compose.yml": initRubyDockerComposeYml,
	"init/sinatra/.dockerignore": initSinatraDockerignore,
	"init/sinatra/Dockerfile": initSinatraDockerfile,
	"init/sinatra/docker-compose.yml": initSinatraDockerComposeYml,
	"templates.go": templatesGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"init": &bintree{nil, map[string]*bintree{
		"rails": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initRailsDockerignore, map[string]*bintree{
			}},
			"Dockerfile": &bintree{initRailsDockerfile, map[string]*bintree{
			}},
			"docker-compose.yml": &bintree{initRailsDockerComposeYml, map[string]*bintree{
			}},
		}},
		"ruby": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initRubyDockerignore, map[string]*bintree{
			}},
			"Dockerfile": &bintree{initRubyDockerfile, map[string]*bintree{
			}},
			"docker-compose.yml": &bintree{initRubyDockerComposeYml, map[string]*bintree{
			}},
		}},
		"sinatra": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initSinatraDockerignore, map[string]*bintree{
			}},
			"Dockerfile": &bintree{initSinatraDockerfile, map[string]*bintree{
			}},
			"docker-compose.yml": &bintree{initSinatraDockerComposeYml, map[string]*bintree{
			}},
		}},
	}},
	"templates.go": &bintree{templatesGo, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

