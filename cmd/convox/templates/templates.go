// Code generated by go-bindata.
// sources:
// templates/init/rails/Dockerfile
// templates/init/rails/bin/web
// templates/init/rails/docker-compose.yml
// templates/init/ruby/Dockerfile
// templates/init/ruby/docker-compose.yml
// templates/init/sinatra/Dockerfile
// templates/init/sinatra/docker-compose.yml
// templates/templates.go
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _initRailsDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x50\xbb\x4e\xc4\x30\x10\xec\xfd\x15\x2b\xd1\x5f\x7a\x5a\x24\xa8\xe0\x50\x24\x0a\xba\xf3\x39\xeb\x60\xe2\xd8\x96\x1f\x27\xf2\xf7\x6c\xd6\x09\x21\xa7\xa4\xca\x3c\xec\x99\xf1\x73\x7b\x7e\x05\xe5\xdd\xcd\xff\x34\x51\x1a\x9b\x84\x78\x20\x1c\x26\xf0\xce\x4e\x90\xbf\x10\xb4\xb1\x98\xc0\x21\x76\xd8\x81\xf6\x11\xae\xc5\x75\x16\xc1\xb8\x94\xa5\xb5\xe4\x2f\x4e\xf9\x71\x44\x97\xd9\x7f\x43\xd7\xf9\xd8\x28\xa9\x08\x58\xe3\xc8\xa9\x61\xf2\x05\x2e\xcb\xc1\x20\xd5\x20\x7b\xbc\xcc\x64\x84\x1e\xc7\x24\x9e\xce\xef\x9f\xf0\x82\xe3\x9c\x05\xfc\x35\x32\x84\x66\x61\x76\xf2\xc9\x7a\x35\xec\x64\x66\xa8\x06\xbb\x76\xe9\xec\xfa\xcf\x88\xf6\xe3\xed\xbe\xff\x3a\xf8\xbb\xa4\x7c\x3c\x58\xa6\x84\x39\x3d\x86\x88\xb4\x33\xfc\x15\x6a\xe5\x80\x4b\x61\x0e\x5a\x71\x55\xe9\x51\xb5\xe9\xb7\x2d\x15\x57\x2d\x94\xab\x35\x6a\xd3\x2a\xae\xda\x8c\x6b\x60\xd5\x36\xcc\xe5\x23\x85\x1c\x14\x5a\x47\xcc\xfd\x23\xd2\x10\xaf\xf9\x9f\x4e\xd7\x6b\x4f\x7c\x9b\xf8\x0d\x00\x00\xff\xff\x08\xae\x24\x4e\xf0\x01\x00\x00")

func initRailsDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerfile,
		"init/rails/Dockerfile",
	)
}

func initRailsDockerfile() (*asset, error) {
	bytes, err := initRailsDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/Dockerfile", size: 496, mode: os.FileMode(420), modTime: time.Unix(1463247575, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initRailsBinWeb = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8d\x41\xae\xc2\x30\x0c\x05\xf7\x39\xc5\xfb\xea\x17\xbb\x36\xac\xb9\x04\x08\x71\x81\x94\x98\xd6\x22\x75\xa2\xd8\x45\x1c\x9f\x8a\x08\x81\xbc\x9b\x19\xeb\x75\x7f\x7e\x64\xf1\x3a\x3b\xd7\x21\x52\x22\x23\xe4\x14\xa1\x54\x1f\x54\x87\xc2\xd1\xd5\x05\xfd\x0d\x3e\x94\xe2\x6d\x29\x7e\x43\xea\x7f\xf4\xf6\xa7\x16\xaa\x61\x2d\x90\x89\xe5\x09\x16\xd8\x4c\x18\xc3\xf5\x3e\xd5\xbc\x4a\x74\x8d\xef\xbe\x6d\x0d\x9c\x14\x89\xd5\x48\x58\x26\x64\xc1\x7e\x78\xdf\xe1\xff\x74\x3c\x5f\x5c\x0b\xda\x0c\xfa\xf1\x63\xd1\x17\xb4\xe0\x15\x00\x00\xff\xff\xb8\xc0\x7d\x5f\xb9\x00\x00\x00")

func initRailsBinWebBytes() ([]byte, error) {
	return bindataRead(
		_initRailsBinWeb,
		"init/rails/bin/web",
	)
}

func initRailsBinWeb() (*asset, error) {
	bytes, err := initRailsBinWebBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/bin/web", size: 185, mode: os.FileMode(493), modTime: time.Unix(1463265546, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initRailsDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\xcc\xc1\x0a\xc2\x30\x0c\xc6\xf1\xfb\x9e\x22\x2f\x60\xac\xd8\x83\x04\xf6\x30\xeb\xcc\x41\x88\x26\x74\xe9\x9c\x6f\x6f\x0a\xd2\x9b\xb7\xfc\x3f\x7e\xe4\xcd\x85\x26\x80\xd2\x1e\x72\x27\xc0\x38\x65\x29\x2c\x5b\x1f\x01\x4e\xb0\xea\x6b\xd7\x03\x4d\xab\x63\xce\x57\xb4\xaa\xae\xab\xca\xec\xb2\xfd\x27\xc7\x67\xf6\xda\x38\x40\x5f\xc7\xb3\x5b\xa2\x9c\x52\xfa\x55\xd8\x9e\x97\xc8\x5d\xa5\x3d\x79\x38\x40\x3a\x2f\x66\xd3\x37\x00\x00\xff\xff\x0e\x1c\x39\x14\x9d\x00\x00\x00")

func initRailsDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerComposeYml,
		"init/rails/docker-compose.yml",
	)
}

func initRailsDockerComposeYml() (*asset, error) {
	bytes, err := initRailsDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/docker-compose.yml", size: 157, mode: os.FileMode(420), modTime: time.Unix(1463265125, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initRubyDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xcd\x4e\xc0\x20\x10\x84\xef\x3c\xc5\x26\xde\xcb\x43\x98\xe8\x49\x6b\x9a\x78\xf0\x56\x0a\x4b\x6d\x0a\xbb\x84\x9f\x46\xde\x5e\x8a\x35\xb1\x72\x62\x67\xbf\x61\x86\xa7\x69\x7c\x01\xcd\x74\xf0\x97\x8c\x65\xa9\x42\x3c\xb4\x31\x54\x60\x72\x15\xf2\x27\x82\xdd\x1c\x26\x20\x44\x83\x06\x2c\x47\x58\x0a\x19\x87\xb0\x51\xca\xca\xb9\xc6\x17\xd2\xec\x3d\x52\xee\xfc\x81\x64\x38\x4a\xad\x74\x1b\xdc\x46\x8d\xb4\x50\xb9\xc0\x7c\x19\x83\xd2\xbb\x5a\x71\x3e\xc5\x08\x2b\xfa\x24\x1e\xc7\xb7\x0f\x78\x46\x7f\x66\x41\x3f\x52\x85\x20\x2f\xe5\xb6\x1e\x1c\xeb\xfd\xb6\xee\x4a\xab\xd1\xa9\x5b\x7a\xa7\xfe\x2a\x62\x7a\x7f\xfd\xdf\xff\xf7\xc3\x67\xf7\x88\x29\x03\xdb\x7e\x6f\xde\x9f\xe0\xa1\xbf\x23\xbe\x03\x00\x00\xff\xff\x8b\xae\xa0\xae\x2a\x01\x00\x00")

func initRubyDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerfile,
		"init/ruby/Dockerfile",
	)
}

func initRubyDockerfile() (*asset, error) {
	bytes, err := initRubyDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/Dockerfile", size: 298, mode: os.FileMode(420), modTime: time.Unix(1463247575, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initRubyDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8c\xc1\x0a\x83\x30\x0c\x86\xef\x3e\x45\xf0\x6e\xe9\x98\x87\x21\xf8\x30\x5a\x03\xca\xa2\x29\x69\x3a\xed\xdb\x2f\x85\x6d\xb7\xdd\xfa\xf5\xff\xf2\x9d\x38\x0f\x0d\xc0\x9c\x37\x5a\x06\x70\xf6\x0c\xbc\xef\xd3\x61\x80\x61\x65\x68\x71\xd9\x14\x16\x0e\x4f\x94\xce\xa6\xc8\x09\x5d\xd9\x09\xce\x4d\x57\x28\x9c\x05\x92\x4e\xa2\x39\x7e\x0f\x5b\x6b\xd0\x34\x23\xa5\x1a\x06\xe8\x6c\x38\x5e\x7c\xb9\xc8\xa2\xae\xef\xef\x2e\x0a\x2b\x07\xa6\x51\x29\xfd\x57\xae\x32\xaa\x64\x34\xa1\xfe\xfe\x62\x0f\x3f\xf4\xde\xfb\x0f\x99\x5b\xf1\xd6\xbc\x03\x00\x00\xff\xff\xae\x01\x4e\xf5\xc8\x00\x00\x00")

func initRubyDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerComposeYml,
		"init/ruby/docker-compose.yml",
	)
}

func initRubyDockerComposeYml() (*asset, error) {
	bytes, err := initRubyDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/docker-compose.yml", size: 200, mode: os.FileMode(420), modTime: time.Unix(1463247575, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initSinatraDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xc1\x6e\x84\x20\x10\x86\xef\x3c\xc5\x24\xbd\xcb\x43\x34\x69\x4f\xad\x8d\x49\x0f\xbd\x49\x61\x70\x89\x30\x43\x00\xcd\xfa\xf6\x8b\xac\x9b\xac\xeb\x49\xbe\xf9\x86\xff\xe7\x63\xe8\xbf\x40\x33\xad\x7c\x95\xd9\x91\x2a\x49\x09\xf1\x56\x49\xdc\x80\xc9\x6f\x50\x2e\x08\xd6\x79\xcc\x40\x88\x06\x0d\x58\x4e\xf0\xbf\x90\xf1\x08\x8e\x72\x51\xde\x57\x7f\x21\xcd\x21\x20\x95\xe6\xaf\x48\x86\x93\xd4\x4a\xd7\x83\x77\x54\x4d\x0b\x1b\x2f\x30\x1e\x8b\x51\xe9\x59\x4d\x38\xee\x30\xc1\x84\x21\x8b\xf7\xfe\xe7\x0f\x3e\x31\xec\x59\xd0\x3e\xa9\x62\x94\x07\x39\x8d\x3b\xcf\x7a\x3e\x8d\x1b\xa9\x35\x9a\x75\x4a\x6f\xd6\x33\x11\xc3\xef\xf7\x6b\xff\xc7\x83\xf7\xee\x09\x73\x01\xb6\xed\xbf\xee\xde\x83\xbb\x76\x8f\xb8\x05\x00\x00\xff\xff\x9c\x51\x49\xbe\x2d\x01\x00\x00")

func initSinatraDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerfile,
		"init/sinatra/Dockerfile",
	)
}

func initSinatraDockerfile() (*asset, error) {
	bytes, err := initSinatraDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/Dockerfile", size: 301, mode: os.FileMode(420), modTime: time.Unix(1463247575, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initSinatraDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\x03\x32\x73\x12\x93\x52\x73\x8a\x41\x82\x0a\x0a\xba\x0a\xc9\xf9\x79\x65\xf9\x15\x7a\x05\xf9\x45\x25\x7a\x26\x26\xc6\x7a\x05\x45\xf9\x25\xf9\xc9\xf9\x39\xb6\x25\x39\xc5\xb8\x95\x54\x54\xda\x96\x14\x95\xa6\x02\x15\x80\x44\xe1\x86\x59\x18\x58\x99\x18\x18\x18\x40\x79\x40\xb5\x20\xae\x21\x17\x20\x00\x00\xff\xff\xc0\xe1\x22\xef\x84\x00\x00\x00")

func initSinatraDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerComposeYml,
		"init/sinatra/docker-compose.yml",
	)
}

func initSinatraDockerComposeYml() (*asset, error) {
	bytes, err := initSinatraDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/docker-compose.yml", size: 132, mode: os.FileMode(420), modTime: time.Unix(1463247575, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templatesGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x99\x59\x6f\x1b\x47\x12\xc7\x9f\xc5\x4f\x31\x11\x90\x80\x5c\x28\xd4\xdc\x87\x00\xbf\xf8\x58\xc0\x0f\xeb\x00\x89\x17\x8b\xc5\x6a\x11\xcc\xd1\xa3\x1d\x84\x22\xb5\x24\x95\x48\x36\xfc\xdd\x53\xbf\xae\xa2\x44\xc9\xa4\x94\xc8\x0a\xfc\x30\xe2\x1c\xdd\x75\x74\x57\xfd\xeb\x5f\xad\xe3\xe3\xe0\xd5\xa2\x73\xc1\x99\x9b\xbb\x65\xbd\x76\x5d\xd0\x5c\x07\x67\x8b\xef\x9b\x61\xde\xd5\xeb\x7a\x3a\x92\x01\xab\xc5\xe5\xb2\x75\xab\x13\xee\xd7\xee\xfc\x62\x26\xe3\x56\xc7\xc3\x7c\x58\x1f\x2f\xeb\x61\xb6\x3a\x7e\xbd\x68\x7f\x71\xcb\x7e\x98\xb9\xbd\x43\x44\xde\xf1\x6f\xae\xd9\xfb\xbd\xf3\x22\xbe\x6f\x17\xe7\x17\x8b\x95\x9b\x5e\x9f\xcf\x76\x0d\xbd\x6c\xae\x1f\x51\xc6\x88\x3f\x24\x6b\x35\xcc\xeb\xf5\xb2\x7e\x58\xdc\x66\xd0\x63\x12\x6f\xee\xa6\x67\x0b\xbe\xbc\xfe\x21\x78\xf7\xc3\xfb\xe0\xcd\xeb\xb7\xef\xbf\x19\x8d\x2e\xea\xf6\x97\xfa\xcc\xdd\x8e\x1f\x8d\x06\x11\xb4\x5c\x07\xe3\xd1\xc1\x61\x73\x2d\x6f\x0e\xe5\x06\xe9\x4b\xb7\x5a\x1d\x9f\x7d\x18\x2e\x78\xd1\x9f\xaf\xf9\x19\x16\xfc\x5d\xad\x97\xc3\xfc\xcc\x0f\x5c\xf8\xbf\xeb\xe1\xdc\xe9\xe7\xe3\x61\x71\xb9\x1e\x66\x3c\x5c\xd4\xeb\xff\x1d\xe3\x0c\x37\x87\xa3\xc9\x68\xd4\x5f\xce\xdb\xc0\x76\xf3\x47\x57\x77\x63\x6e\x82\xff\xfc\x17\xb5\x47\xc1\xbc\x3e\x77\x81\x8a\x9e\x04\xe3\xcd\x5b\xb7\x5c\x2e\x96\x93\xe0\xe3\xe8\xe0\xec\x83\x7f\x0a\x4e\x5e\x04\x58\x35\x7d\xe7\x7e\x43\x88\x5b\x8e\xbd\xd9\x3c\xbf\xbc\xec\x7b\x79\x46\xec\x64\x32\x3a\x18\x7a\x3f\xe1\x9b\x17\xc1\x7c\x98\x21\xe2\x60\xe9\xd6\x97\xcb\x39\x8f\x47\x81\xb8\x34\x7d\x83\xf4\x7e\x7c\x88\xa0\xe0\xdb\xff\x9f\x04\xdf\xfe\x7a\xa8\x96\x78\x5d\x22\xe3\xd3\x68\x74\xf0\x6b\xbd\x0c\x9a\xcb\x3e\x50\x3d\xaa\x64\x74\xf0\xb3\x9a\xf3\x22\x18\x16\xd3\x57\x8b\x8b\xeb\xf1\x77\x32\xe6\x48\x6c\x93\x59\xed\xec\xcd\xc6\xd2\xe9\xab\x99\xec\xd3\x58\xdc\x7f\x26\x7b\x10\xa3\xf2\xf7\x08\x92\x81\x6a\xb7\xbd\x14\xb3\xa6\x2f\x31\x7d\x3c\x39\x62\xc4\x48\xbe\xad\xaf\x2f\x5c\x50\xaf\x56\x6e\xcd\x92\x5f\xb6\x6b\xa4\x78\xff\x6c\x3f\x44\xcd\xbc\x5f\x04\xc1\x62\x35\xfd\xbb\xec\xe1\x5b\x79\xb8\x99\x67\x5b\xb8\x79\xbf\x25\x61\x6b\x0f\x47\x07\xab\xe1\x83\x0b\x86\xf9\x3a\x4f\x47\x07\xe7\x24\xb6\xc9\xfa\x87\xdc\xfb\x37\xef\x25\x6c\x02\x62\x67\xca\x1d\xe2\x7d\x84\x8c\xfb\xe1\xbe\x8a\x49\xf0\x4e\x24\x8f\x27\x26\x1b\x55\xe6\x5c\x3f\x4c\x51\x2a\x93\xf7\xcf\xfd\x49\x0c\x91\xb9\xde\x94\xbb\x53\x31\xf1\xc1\xa9\xd8\x2a\x53\xb7\x2c\xbf\x2b\x00\xbf\x1e\x13\x80\x73\x22\xe3\xc6\xd1\xcf\x24\x98\xf7\xfb\x85\xbc\x5d\xbd\x1e\x96\x22\xa2\x59\x2c\x66\xdb\xb3\xeb\xd9\xea\x11\xcf\xaf\x57\xea\xb8\xc0\x4a\xdd\xba\x8f\x9f\xb6\x66\x5b\x24\x10\xdc\x3f\x83\x30\x3f\x02\x7e\xb7\x10\x24\x81\xad\x91\x30\x3e\x3c\xbd\x8a\xfa\xd3\xab\xb2\x39\xbd\x0a\x4b\xb9\x42\xbb\xaa\xd3\xab\xdc\xc9\x7b\x7b\xd7\xcb\x98\xbc\x3d\xbd\xca\xe4\xbe\x91\xb1\xa9\x7c\x6b\xd3\xd3\xab\x44\x9e\x23\xb9\x9c\x7c\xeb\x3b\xb9\xcf\x4e\xaf\x62\xf9\xde\x45\x32\x56\xe6\x14\xb5\xfc\xca\x15\xcb\xd8\x5a\x64\xb9\x50\x65\xf0\x1c\xca\xfb\x46\xae\x3e\x11\x39\xa2\xcf\xc9\xbc\x1c\x59\xb1\xcc\x97\xb1\x55\xae\xb6\xc5\x85\x8c\x91\x77\x7d\xa1\x36\x74\xb9\xda\x17\x8b\x8e\x5a\xde\xd5\x22\xab\x15\x39\x49\xab\x76\x54\xf2\xad\x97\x6f\x85\xc8\x2d\x44\x66\x21\xb6\x86\x62\x97\x93\xab\x13\x1b\xdb\x4e\xfd\x49\x64\x5e\x26\xe3\x22\x99\x5b\xc9\xb8\x52\x9e\x0b\xd1\x1b\xe3\x93\xc8\x89\x45\x4f\x2f\xf7\xad\x53\x7f\x2b\x7c\xef\xd5\xdf\x46\xc6\x36\x32\xb7\x92\xf1\x6d\xa8\xb6\x14\xb9\xda\x5d\xca\x7d\x8f\xed\xd8\xc7\x3a\x89\xde\x42\xae\x48\xde\xb5\xf2\xae\xc1\x37\xd6\x43\xde\x35\xd8\x25\xf7\x71\xaf\x3a\x7a\xb1\xbd\x90\x31\xa9\xbc\xab\xc4\xb7\x8e\x67\xbe\x89\x2f\x5d\xa1\xdf\xd1\x11\xcb\x55\x57\xba\x67\x19\xeb\x2a\xdf\x5b\x7b\x97\x47\xba\x5e\xf8\x1c\xa3\xbf\x51\xbd\xf8\xd5\x65\xfa\xcb\xba\x34\xe2\x63\x2b\x57\x9e\xaa\xef\x11\x63\x0b\xdd\x9b\xca\xa9\xdf\x4e\x74\x57\xbd\xae\x43\x19\xab\x9e\xaa\x55\xd9\xbd\xfc\x26\xf2\x9b\xc4\x3a\x3f\xcf\x55\x37\xeb\x80\xfe\xb6\xd2\xfd\x67\x8c\x33\x3d\x8c\x21\x0e\xc2\x5c\xe3\x88\xb1\xae\xb2\xf8\x91\xb1\x6d\xaf\x31\xc7\xfa\xa1\xcb\xc9\x5e\x35\xce\xf6\x8b\x58\x29\x75\x1e\x7b\x5e\xb4\xba\xe7\xf8\x5f\xe7\x6a\x03\x71\x94\xc8\x9c\x32\x57\x39\xec\x53\x92\xa8\xad\xc4\x66\x5e\x6b\x1c\x94\xe2\x4f\xda\xa8\xbd\xa1\xd3\x18\x65\xdd\xb3\x4c\xed\x21\x2e\x1a\xbb\x6f\x58\x13\x8b\xed\xcc\xee\xfd\xfe\x35\xea\x1b\x32\x3b\xd1\x11\xd7\xba\xdf\x9d\xfc\x96\xf8\x6b\xf1\xcc\x9a\x27\xb9\xae\x35\xba\x63\x19\x5b\x66\x1a\x63\x51\xaa\xba\xd3\x42\xbf\x93\x43\x7c\xef\x62\x8d\xb3\xba\xd7\x3d\xaf\x2c\x3e\x88\x01\xe4\xa6\xbd\xfa\x4f\xdc\xb2\x26\x61\x77\x9b\xbb\xac\x15\x17\xb1\x81\x3d\xec\xa7\x8f\x2d\xbe\x47\x9b\x71\x87\x9b\x9a\xbd\x03\x1e\xac\xa0\xec\x2a\xd4\x9b\xb2\xb3\x55\xe8\xa5\x42\xed\xc2\x98\x23\x79\x7f\xb8\x93\xbc\x1d\xca\xa7\xc9\x4d\x45\xd8\x31\x15\xd5\x7f\xf3\x05\x6c\x5b\xb5\xaf\x60\x37\x34\x61\xbf\xd9\x8f\xd5\xe2\x9b\x12\xea\x8b\xa0\x88\xba\x87\xac\x1f\xa9\x39\x27\xc1\x3e\xdb\x03\xea\xca\x49\x90\x56\xf9\x51\x40\x85\x38\xd9\x2e\x20\xe3\x34\x0e\x27\xfe\x3d\xb8\x7f\xa2\x75\xe1\x9f\xf3\xe1\x6a\x1c\xa5\x79\x12\xa7\x45\x56\x64\x47\x41\x38\x91\x4a\x5f\xa3\xfa\x3b\xef\xe5\x47\xef\xda\x49\x60\x1e\x62\xd7\x49\xe0\x7f\x3e\xdd\xac\x78\x7d\xb4\x1b\xd4\x5f\x0e\xf3\x7f\xb9\xe6\x49\x80\x9e\x4a\x00\x95\x12\x38\xe9\x06\xa8\x62\x05\xf4\x70\x93\xe0\x85\x26\x14\x00\xd6\x8b\x3c\x27\x81\x1a\x15\x9a\x80\x04\x74\x2d\xe3\x1a\x40\x28\x55\x5d\x24\x10\xe0\x47\x72\x00\x8c\x00\x75\x1c\x2b\xf8\xd5\x06\xea\xa9\x05\x3e\x01\x5d\xd6\x3a\x8f\x39\x8d\x05\x73\x64\x85\x80\x39\x00\x1f\xe0\x0d\x70\x00\xe8\x00\x40\xd2\x68\x12\x00\xb8\x59\xac\xf2\x49\x18\x40\x94\x64\xaa\x79\x9f\xea\x1a\xf0\x5b\x16\xea\x17\x05\x89\x44\xf4\x7e\x75\x9a\x30\x89\x53\x5b\x29\x38\x39\x89\x57\xa9\x3e\xc0\x16\x5f\xd1\xdf\xa7\x0a\x46\x14\x1a\x00\xbc\xae\x15\x34\x3c\x08\x00\x8a\x95\x26\x35\xeb\x1b\x59\x01\x60\x5d\x23\x0a\x03\xc0\x93\xa9\x1e\x74\xe3\x63\x8a\xdc\x54\xd7\x1d\x70\x05\xdc\x72\xb3\xa7\x32\x40\x40\x26\xe3\x53\x03\x77\x0a\x11\x6b\x00\x88\x63\x1f\x45\xaa\x93\xb9\x2e\xd2\x7d\x44\x9e\x07\x42\x7c\x66\xef\x1a\x05\xa1\xd0\x40\x95\xb5\xcb\x13\x5d\x03\xbf\x7f\xa9\x16\x62\x00\xed\x3e\x68\x34\x56\xd0\x8a\x4e\xe5\xf9\xfd\x0d\xf7\x83\x86\x86\xdf\x17\x00\x86\x0a\xb8\x0f\x16\xd6\xc6\xed\x41\x0a\x9d\xf3\xa7\x50\xe2\x8e\x9d\x7f\x01\x42\xdc\x18\x6c\xf0\x10\x95\xd9\x4e\x78\xa8\x92\x07\xe0\x21\xcf\xb2\x34\x7f\x5e\x78\x50\xe4\x7a\xa5\x0d\xe5\xbf\xcf\x67\x4f\x02\x0a\x02\x8c\xea\x44\x00\xc2\xda\xb6\x81\xa2\xcd\x35\xc0\x00\x08\x58\x83\x4f\xc8\x5e\x2b\x1f\x00\xe1\x19\x51\xa2\x20\x41\x22\x31\x8f\x04\x47\x1e\xc0\x53\x5a\x80\xa3\x83\x6a\x4b\x12\xe4\xbd\x5e\xe8\xa2\x12\x02\x0c\x54\x61\xcf\x38\x0c\x14\x48\x78\x98\x1c\x95\x94\xf9\x54\x74\x5f\x35\x49\x90\x58\x59\x23\x81\x9c\x88\xfc\x3c\xd3\xe4\x8e\x49\x92\x46\xfd\xa6\x12\x52\x15\x9b\x50\x93\x3d\x37\x60\x09\xc5\xd6\xb4\xd3\xea\x4e\xd2\xc0\x82\x32\x4b\x9a\xda\x2a\x3c\xdf\x60\x9c\xb0\x96\x26\xb6\xaa\x5d\x28\x7b\xca\x0b\xf5\x93\x04\x44\x77\x1a\x6a\x22\xf1\xad\x49\x54\x3f\x60\x88\x9f\x00\x18\x09\x0a\xeb\xf0\x8c\xd7\x29\xeb\x83\xc9\x65\x9d\x32\x44\xd8\x4c\x51\xdd\xca\x02\x04\xfd\xfa\xe6\xca\x3a\x92\x62\x47\xe5\x77\x0a\xb2\x80\x37\x80\x52\x75\x0f\x27\xf1\xfd\x20\xf9\xe2\xfa\x7f\x2b\xea\x7e\x62\x7f\x7e\xc2\xf1\x20\x1b\xb8\x15\xf4\x04\x4e\xf0\x99\x43\x7f\x41\xde\xef\xf2\x67\x03\x01\x59\xf1\xe7\x19\x42\x9e\x45\xf1\x33\x32\x84\xcb\xe6\xfa\x0b\xbb\x3e\x0a\x4a\xd9\x6b\xae\xf9\xae\x2f\xb4\x0e\x29\x54\xc6\x4d\x11\xa3\xf8\xb4\x96\x87\x9d\x75\x1c\x14\x51\x48\x80\x23\x6e\x2b\xcd\xaf\xaa\xd6\xe2\x05\x13\xcd\x72\xcd\x6f\xcf\xc2\x3b\xeb\x06\xad\x0b\xf3\x6c\xd7\x64\x65\x4e\x89\x02\x4c\x9b\x8e\x8b\xdc\xce\x63\xcd\x33\xba\x31\x8a\x71\x69\x05\x3a\xaf\x94\x15\x93\xdb\xd8\x0b\xa6\xa0\x8b\x9c\xf2\x8c\x3c\xd3\x0e\x29\x8d\xd5\x66\xdf\x1d\x18\x61\x00\xaf\x90\x4d\x51\xec\x0d\x3f\xe8\x78\xe8\x18\x37\xdd\x20\x7e\xd3\x99\x79\x3c\xcb\x15\x4f\x60\xee\x14\x69\xec\x87\xbc\x40\x38\xc0\x14\x3a\x08\x30\x82\x8b\x22\x0a\x4e\x52\x7c\xc1\x28\x70\x83\xbc\x26\xff\x9d\x53\x5c\x83\x04\x51\xe4\x7d\x9e\x83\x33\x66\x7f\x04\x2e\xb5\xba\x1e\x90\x06\x6c\xf6\x5d\x78\x65\x85\xba\x35\xbd\xd6\x35\xb0\x86\x9b\x6e\x26\xb1\xee\x93\x3d\xa6\x2b\xef\xad\x13\xdf\x74\x7a\x60\x6a\xd8\xeb\x9e\x20\xbf\x30\x5c\x01\x97\xc1\x59\xec\x2b\xad\x63\x04\x73\x20\x3a\x4d\xae\xf3\x59\x13\x70\x1c\xec\xe3\x1d\x7e\x78\xbb\xad\xfb\x67\x9d\xc1\x3a\x3a\x40\xf6\xa6\x77\xda\x21\xb1\x77\xc5\x86\x5c\x75\x4a\x64\x3c\x6e\x15\x4a\x98\x3c\x7e\x16\x56\x17\x2a\xc5\xe3\xce\xba\x78\x6a\x02\x31\x41\x7c\x40\x60\x20\x7b\xc4\x00\x04\x10\x22\xc5\xd8\xfb\x58\x48\x8c\x7b\xcc\x0e\xad\x1b\xaa\xf7\x77\x41\x77\xb2\xe5\x89\x20\x78\x47\xc6\x16\xfa\xdd\x3d\x52\xde\x01\x7a\x77\x26\xfe\x61\xb4\xdb\x65\xf2\xf3\xc2\xdc\x7d\xc3\x0d\xdd\xe2\xaa\xfc\xea\xfd\xcf\x8d\xf3\xcf\xc0\x6f\xca\x2d\x7e\x43\x2e\x6d\xf8\x0d\xd8\xe2\x31\xce\x69\xf3\x02\x9e\x30\xdf\x73\x95\x52\xf3\x9d\x66\x84\x2e\x9c\x39\xe4\x1e\x71\x48\xde\x53\xe7\x89\x61\x70\x89\xba\xcd\x69\x06\xb1\x4c\x2e\x91\x57\xe0\x1e\x39\x08\xc6\x78\xa2\x9e\x59\xdc\xc6\x5a\xb3\xc1\x02\xf2\x93\xe6\x80\x5c\x87\x33\x50\xef\xbd\x0e\xf2\x35\x54\xae\x81\x9d\x34\x17\xd8\x09\x27\xf0\x98\x18\xea\x2f\x98\x97\x5b\x73\xd6\x19\x1f\xa0\x51\x81\x23\x70\x8a\x40\x03\x04\xc7\xe1\x04\x05\xde\xc1\xfa\xc0\x3d\x18\xcb\xbd\x3f\xfd\xea\xec\xe4\xa3\xbc\x3d\xfd\xa9\x62\xad\x07\xf8\x98\x58\xe3\x84\xad\xe4\xbc\xe7\x52\xa1\x9e\xb0\x91\x9b\xf0\x98\xc8\x6c\xa6\x1e\x70\x8a\x87\x6f\x60\x7b\x61\x4d\xa4\x3f\xbd\x8a\x35\x47\xf1\x83\x8b\xd3\x2b\xf6\x03\xec\x0a\x0b\xb5\x11\x5c\x65\x4d\x7b\xb3\x89\xf1\x9c\x40\xf9\xc6\x2c\x55\x9d\xe0\x02\x78\xc3\x05\xde\x60\x57\x62\xcd\x1c\xf8\x01\x57\xe5\x5d\x65\x18\x05\x7f\xa5\x59\x65\x0d\x77\x61\x08\x3a\x36\x7c\x91\x3d\x6a\xcb\xfd\x7c\x6a\x47\x4c\x7e\x29\x92\xec\x64\x53\xbb\xff\x01\xf5\x10\xae\x3c\x81\x4b\xed\x77\xe6\xf9\x31\xe6\x01\x26\x15\x87\xe1\xd7\xc6\x9a\x9f\xf4\x3f\x74\xcf\x45\xa6\x22\xfb\x96\x6e\x91\xa9\xfc\x1e\x99\xe2\x88\xb9\xbb\x25\x53\x04\x36\x40\x42\xd2\x42\x0e\xfc\xc9\x4d\xa5\x81\xdc\xd8\xbd\x3f\x7e\xb5\x53\x09\xc0\x28\xb5\x60\x6e\x37\x00\x93\x5b\x41\xb4\xd3\x96\xda\x8a\x38\x73\x1b\x3b\x7e\xc6\x0e\x6c\x75\x85\x36\x40\x24\x2c\x45\xd6\x37\x1f\x89\x11\x13\xe6\x67\x0a\x12\x55\xa4\x45\x35\x35\xc0\x20\x99\x20\x77\x3c\x43\x5c\x00\x22\x8e\x82\x29\xde\xfe\xe8\xdf\xe9\x3a\x91\x70\x34\x36\xbe\x11\x0c\x6d\x9d\x72\x05\x3b\x08\xd5\xe6\xc8\x12\xdd\x9c\xb4\x20\xd7\x9f\x16\x59\x83\x07\x10\x74\xd6\x9c\x41\x26\x62\x23\x7d\xb1\x1d\x75\x63\x9f\xcb\xf5\x08\x95\x93\x14\xfc\xaa\x20\x13\xa9\x12\x15\x9a\x3d\x80\xbe\x28\x94\x00\x02\x72\x9c\x9c\x44\x06\xd0\xfe\x5f\x1b\x4e\xd7\x0b\x5d\xfe\x58\xb8\xd2\x71\x80\x17\x84\x87\x31\xec\xa5\xdf\xc7\x48\xc7\xf6\x46\x76\x9c\x91\x2b\x0a\x07\x24\x13\xd2\xc7\x7c\x0f\x8c\xce\x8e\xea\x63\x05\xe0\xd0\x4e\xda\xd8\x53\x4e\xb8\x5a\xfb\xd7\x09\xe3\x78\x87\x4d\x8c\x87\x04\x7b\x12\x9d\xa9\x0f\x9e\x10\xe5\xba\x2f\xfc\xbb\x01\x02\xe5\x8c\x4c\x01\xc2\xbd\x35\x9e\xf8\xc9\x3b\x6c\x66\x8f\xf8\xd7\x08\x80\xe6\x89\x5b\xa7\x6b\xcc\x37\xd6\x93\xb1\x9b\xa3\xf9\xd2\x4e\x84\xc2\x1d\x27\x45\xbe\x81\x8d\x6e\x63\x87\x13\xb1\x3d\xc4\x4a\x92\xe7\xf7\x00\x00\x00\xff\xff\x6f\x2d\x32\x9c\x00\x20\x00\x00")

func templatesGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesGo,
		"templates.go",
	)
}

func templatesGo() (*asset, error) {
	bytes, err := templatesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates.go", size: 20480, mode: os.FileMode(420), modTime: time.Unix(1463265897, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"init/rails/Dockerfile": initRailsDockerfile,
	"init/rails/bin/web": initRailsBinWeb,
	"init/rails/docker-compose.yml": initRailsDockerComposeYml,
	"init/ruby/Dockerfile": initRubyDockerfile,
	"init/ruby/docker-compose.yml": initRubyDockerComposeYml,
	"init/sinatra/Dockerfile": initSinatraDockerfile,
	"init/sinatra/docker-compose.yml": initSinatraDockerComposeYml,
	"templates.go": templatesGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"init": &bintree{nil, map[string]*bintree{
		"rails": &bintree{nil, map[string]*bintree{
			"Dockerfile": &bintree{initRailsDockerfile, map[string]*bintree{
			}},
			"bin": &bintree{nil, map[string]*bintree{
				"web": &bintree{initRailsBinWeb, map[string]*bintree{
				}},
			}},
			"docker-compose.yml": &bintree{initRailsDockerComposeYml, map[string]*bintree{
			}},
		}},
		"ruby": &bintree{nil, map[string]*bintree{
			"Dockerfile": &bintree{initRubyDockerfile, map[string]*bintree{
			}},
			"docker-compose.yml": &bintree{initRubyDockerComposeYml, map[string]*bintree{
			}},
		}},
		"sinatra": &bintree{nil, map[string]*bintree{
			"Dockerfile": &bintree{initSinatraDockerfile, map[string]*bintree{
			}},
			"docker-compose.yml": &bintree{initSinatraDockerComposeYml, map[string]*bintree{
			}},
		}},
	}},
	"templates.go": &bintree{templatesGo, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

