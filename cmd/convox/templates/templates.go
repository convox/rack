// Code generated by go-bindata.
// sources:
// templates/init/django/.dockerignore
// templates/init/django/Dockerfile
// templates/init/django/docker-compose.yml
// templates/init/rails/.dockerignore
// templates/init/rails/Dockerfile
// templates/init/rails/docker-compose.yml
// templates/init/ruby/.dockerignore
// templates/init/ruby/Dockerfile
// templates/init/ruby/docker-compose.yml
// templates/init/sinatra/.dockerignore
// templates/init/sinatra/Dockerfile
// templates/init/sinatra/docker-compose.yml
// templates/init/unknown/.dockerignore
// templates/init/unknown/Dockerfile
// templates/init/unknown/docker-compose.yml
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _initDjangoDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\x4b\xce\xcf\x2b\xcb\xaf\xe0\xd2\x4b\xcd\x2b\xe3\xd2\x4b\xcf\x2c\x01\x13\x99\xe9\x79\xf9\x45\xa9\x5c\x80\x00\x00\x00\xff\xff\x57\x31\x5f\xce\x1d\x00\x00\x00")

func initDjangoDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initDjangoDockerignore,
		"init/django/.dockerignore",
	)
}

func initDjangoDockerignore() (*asset, error) {
	bytes, err := initDjangoDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/django/.dockerignore", size: 29, mode: os.FileMode(420), modTime: time.Unix(1469055492, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initDjangoDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\x41\x6f\xd4\x30\x10\x85\xef\xf9\x15\x4f\x2a\xd7\xdd\x3d\xf4\x17\x54\x4b\x38\x80\xe8\x46\x4b\x41\xea\x09\x19\x67\x36\x75\x71\x66\xcc\xd8\x86\x8d\x50\xff\x3b\xb2\xd3\xd0\x0d\x70\xe0\x96\x79\x33\xf3\xe6\xcb\xf3\x9b\xe3\xe1\x3d\xac\xf0\x77\x39\xef\xfa\x47\xc3\x83\x34\xcd\x15\x94\x82\x37\x96\x40\x67\x33\x06\x4f\x26\x04\x18\xee\x97\x32\xa8\x3c\x92\x4d\x48\x82\x64\x9c\x17\x45\x7a\x20\xb8\xd1\x0c\x54\xb4\x49\xb2\xe2\x79\xa6\xb9\x42\x77\x3c\xbc\x6d\xf7\x77\x70\x11\xc6\x47\x41\x8e\xd4\xe3\xcb\x84\x21\xb3\xb3\xa2\x0c\xc7\x75\x7f\x05\x81\xd7\x62\xbf\x92\x9e\x9c\xa7\xa6\xbd\xfd\x84\x9b\xae\xbb\x80\xa9\xd2\xe2\xbb\x86\x2a\xf4\x86\x41\x63\x48\x13\x3e\xb4\xfb\x63\x7b\xf7\xf9\x5d\x7b\x8f\x3e\xab\xe3\x01\xa3\x61\x33\xd0\x36\x4c\xb0\x32\x8e\x86\xfb\x88\x1f\xce\x7b\x28\xc5\xec\x53\x41\x29\xcb\xaa\xa2\xf5\xc6\x85\xc1\x49\x6a\x32\x56\xc2\x04\x61\x3f\x55\xe6\xc2\x17\xc1\x44\x3d\xf5\x38\x89\x22\xb8\x00\xc7\x31\x19\xef\x9b\xfd\xa1\xbb\x87\xd2\xb7\xec\x94\x46\xe2\x14\xb7\xe9\x9c\xb0\x33\x21\xec\xfe\x54\x9b\xe3\xc7\xdb\xb2\x7b\xbd\x2c\x63\xb3\xc9\x61\x50\xd3\x53\x91\xff\xd1\xd6\xbf\x9c\xff\x83\xce\x8a\xf7\x64\x53\x4c\x26\x39\x3b\xf3\xbd\xfa\x79\xd3\x75\x4f\xbb\x59\x9a\xe1\x56\xd2\x32\xf5\x9c\xf6\xd3\x32\xb2\xd4\x73\xff\x25\xd6\xda\xfe\x5d\xce\xe0\x53\x7a\x10\xbe\x5e\x65\x7f\xc1\x81\xcd\x86\xc5\x71\xc8\x2f\x7f\x50\xe0\x95\x62\x82\x9c\xea\x77\x79\xf2\x7a\x67\x5b\xfd\x9b\x5f\x01\x00\x00\xff\xff\x22\xcb\xe6\x65\xb5\x02\x00\x00")

func initDjangoDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initDjangoDockerfile,
		"init/django/Dockerfile",
	)
}

func initDjangoDockerfile() (*asset, error) {
	bytes, err := initDjangoDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/django/Dockerfile", size: 693, mode: os.FileMode(420), modTime: time.Unix(1469055492, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initDjangoDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8d\xb1\x8a\xc3\x30\x10\x44\x7b\x7d\xc5\xfe\xc0\xe9\x74\x67\x1d\x1c\x02\x57\xc1\x55\xba\x24\x4d\xaa\x20\xd9\x8b\x11\x91\xb5\x46\x5a\x3b\xce\xdf\x07\x81\xed\x22\x90\x72\x66\x1e\x6f\x1e\xe8\x8c\x00\x70\x93\x0f\x9d\x01\x29\x00\x30\xce\x3e\x51\x1c\x30\x72\x59\x00\xbe\xe0\xdc\x1c\x4e\xcd\xe5\x76\x6c\xae\x02\x20\x58\x87\x21\x6f\x53\x4b\x71\xa6\x45\x8e\x94\x58\x6a\x5d\xc9\x31\x11\x53\x4b\xa1\xe6\x90\x3f\x23\xcb\xb3\xe6\x34\x61\xb1\xf9\x78\xdf\x65\x9d\x65\xeb\x6c\x2e\x7d\xa1\xf7\xfe\x5f\x19\xad\x94\x5a\x93\xd6\x55\x89\x3f\x62\xc3\x0b\xe6\x07\xdb\xa3\x59\xbf\xbe\x47\xca\xdc\x27\xcc\xef\xa2\x3f\x5d\xfd\x8a\x57\x00\x00\x00\xff\xff\x25\x21\x30\xfe\xf3\x00\x00\x00")

func initDjangoDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initDjangoDockerComposeYml,
		"init/django/docker-compose.yml",
	)
}

func initDjangoDockerComposeYml() (*asset, error) {
	bytes, err := initDjangoDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/django/docker-compose.yml", size: 243, mode: os.FileMode(420), modTime: time.Unix(1469055492, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRailsDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\xc7\x4d\x0e\x84\x20\x0c\x05\xe0\xfd\x3b\x0a\xc9\xf4\x2d\xe6\x44\x22\x84\x60\x6a\xeb\x4f\x21\x1e\xdf\xb5\xcb\x8f\x92\x87\x15\xad\xa0\xac\x6e\xd3\x1f\x50\xaa\x4d\x50\x5a\x0f\xb0\x64\x26\xb9\x4f\xed\x51\xff\x5f\xfd\x36\x1f\x97\x2d\x0a\xaa\x37\x26\x30\xf6\x03\x6f\x00\x00\x00\xff\xff\xa0\x04\x95\x56\x4e\x00\x00\x00")

func initRailsDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerignore,
		"init/rails/.dockerignore",
	)
}

func initRailsDockerignore() (*asset, error) {
	bytes, err := initRailsDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/.dockerignore", size: 78, mode: os.FileMode(420), modTime: time.Unix(1468367985, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRailsDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\xbd\x6e\x83\x40\x10\x84\xfb\x7b\x8a\x95\xe8\x4d\x9f\x36\x52\x52\x25\x8e\x90\x52\xa4\xf3\x79\x59\xf0\x85\x63\xf7\x74\x3f\x96\x79\xfb\x88\x3b\x08\xc6\x32\x15\x33\xdf\xc2\xcc\xbc\x35\xc7\x0f\x40\xe1\xab\xdc\x6a\xaf\x8d\x0d\x4a\x55\x80\xe2\x26\x10\xb6\x13\xc4\x0b\x41\x67\x2c\x05\x60\xa2\x96\x5a\xe8\xc4\xc3\x39\x71\x6b\x09\x0c\x87\xa8\xad\x55\x15\x24\x46\x19\x47\xe2\x98\xef\xaf\xc4\xad\xf8\x1a\x35\x5e\x08\xac\x61\x02\xd3\xc1\x24\x09\x4e\xcb\x87\x4e\xe3\xa0\x7b\x3a\xcd\xa6\x87\x9e\xc6\xa0\x5e\x8f\x5f\x3f\xf0\x4e\xe3\x9c\x05\xf9\xa9\xb5\x73\xf5\xe2\xec\xf0\xc1\x0a\x0e\x3b\x9c\x1d\x55\x41\xbe\xda\xa5\xe7\xab\x7b\x47\x35\xdf\x9f\x8f\xfd\xd7\xc1\xbf\x29\xc4\xe7\x83\x75\x08\x14\xc3\x8b\xf3\x84\x32\xba\xff\x42\x8d\x1e\x68\x29\x9c\x83\x56\x5d\x28\x0a\x77\xa6\xdf\xb6\x14\x5d\x98\x4b\x67\x6b\x70\x63\x45\x17\x36\xeb\x12\x58\xd8\xa6\xef\xcb\xd3\x8d\x10\xbc\x1e\xe8\x49\xb9\x75\xd0\xbc\xc5\x53\x88\x20\x5d\x7e\xd7\xce\x95\x88\x43\xfe\xb3\xfa\x0b\x00\x00\xff\xff\x3d\xf9\xb5\xe2\xfc\x01\x00\x00")

func initRailsDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerfile,
		"init/rails/Dockerfile",
	)
}

func initRailsDockerfile() (*asset, error) {
	bytes, err := initRailsDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/Dockerfile", size: 508, mode: os.FileMode(420), modTime: time.Unix(1471554188, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRailsDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\xe3\x52\x50\xc8\x49\x4c\x4a\xcd\x29\x06\x09\x2a\x28\xe8\x2a\x24\xe7\xe7\x95\xe5\x57\xe8\x15\xe4\x17\x95\xe8\x99\x98\x18\xeb\x15\x14\xe5\x97\xe4\x27\xe7\xe7\xd8\x96\xe4\x14\xe3\x56\x52\x51\x69\x5b\x52\x54\x9a\xca\xa5\xa0\x00\x12\x85\x1b\x66\x61\x60\x65\x62\x60\x60\x00\xe5\x99\x98\x18\x83\xb8\x86\x5c\x80\x00\x00\x00\xff\xff\xc0\xe1\x22\xef\x84\x00\x00\x00")

func initRailsDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerComposeYml,
		"init/rails/docker-compose.yml",
	)
}

func initRailsDockerComposeYml() (*asset, error) {
	bytes, err := initRailsDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/docker-compose.yml", size: 132, mode: os.FileMode(420), modTime: time.Unix(1468367985, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRubyDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\xd7\x4b\xce\xcf\x2b\xcb\xaf\xe0\xd2\xd7\x4b\xcd\x2b\xe3\xd2\xd7\x4b\xcf\x2c\xe1\x02\x04\x00\x00\xff\xff\xc9\x68\x92\x70\x1e\x00\x00\x00")

func initRubyDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerignore,
		"init/ruby/.dockerignore",
	)
}

func initRubyDockerignore() (*asset, error) {
	bytes, err := initRubyDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/.dockerignore", size: 30, mode: os.FileMode(420), modTime: time.Unix(1468367985, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRubyDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xbd\x6e\x03\x21\x10\x84\x7b\x9e\x62\xa4\xeb\xcd\x43\x44\x4a\xaa\xc4\x91\xa5\x14\xe9\x8c\x61\xb1\x91\x61\x17\xf1\x63\x85\xb7\x8f\x8e\x5c\xa4\x5c\xa8\xd0\x37\xb3\x3b\xb3\xcf\xa7\xe3\x2b\xac\xf0\x43\xbe\x74\xe9\x97\xa1\xd4\x02\x2b\x79\x40\x38\x0e\xb4\x1b\xc1\x87\x48\x15\x4c\xe4\xc8\xc1\x4b\xc1\xa5\xb3\x8b\x84\xc0\xb5\x99\x18\xd5\x82\xce\x56\x52\x22\x6e\xd3\xff\x20\x76\x52\xb4\x35\xf6\x46\x88\x81\x09\xc1\x63\x48\xc7\x79\x1b\xcc\xc6\xde\xcd\x95\xce\x2b\x2c\xb8\x52\xaa\xea\xe9\xf8\xfe\x89\x17\x4a\x6b\x16\xe6\xd3\x26\x67\xbd\x91\x9d\x7c\x88\x62\xef\x3b\x79\x12\xb5\x60\xba\x76\xe9\xd3\xf5\x97\xa8\xd3\xc7\xdb\xff\xfe\xbf\x07\xaf\xdd\x0b\xd5\x06\xf1\xf3\x6f\x72\xfe\x09\x3e\xcc\x3d\xea\x3b\x00\x00\xff\xff\x8b\xae\xa0\xae\x2a\x01\x00\x00")

func initRubyDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerfile,
		"init/ruby/Dockerfile",
	)
}

func initRubyDockerfile() (*asset, error) {
	bytes, err := initRubyDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/Dockerfile", size: 298, mode: os.FileMode(420), modTime: time.Unix(1468367985, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRubyDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8c\x41\xaa\xc3\x20\x14\x45\xe7\xae\xe2\x92\x79\xc4\x4f\x1c\x7c\x84\x2c\x26\xd1\x07\x09\xd5\x3c\xd1\x67\x93\xec\xbe\x08\x6d\x67\x1d\x9e\xcb\x3d\xe7\xa4\xd5\x29\x60\x6d\x7b\x0c\x0e\x5a\x01\x9e\x53\x5a\x8e\xe0\x40\x7e\x63\x0c\x14\x76\x41\x60\xff\xa0\x32\x7a\x4e\x99\x2b\xe9\x3b\x45\x9c\xbb\x6c\xb8\xb9\x15\x54\x59\x8a\xb4\xfc\x11\x07\x05\xc4\x65\xa5\x58\x7b\x18\x18\xe1\xf9\x78\xf2\xa5\x33\x17\xd1\xd6\x4e\x3a\x17\x16\xf6\x1c\x67\x89\xf5\xf7\xe5\xba\x67\x29\x8d\x14\xd0\xd7\x6f\xec\xdf\x38\x6b\x8c\x79\x93\xb5\x53\xc7\x3f\xf5\x0a\x00\x00\xff\xff\xae\x01\x4e\xf5\xc8\x00\x00\x00")

func initRubyDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerComposeYml,
		"init/ruby/docker-compose.yml",
	)
}

func initRubyDockerComposeYml() (*asset, error) {
	bytes, err := initRubyDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/docker-compose.yml", size: 200, mode: os.FileMode(420), modTime: time.Unix(1468367985, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initSinatraDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\xd7\x4b\xce\xcf\x2b\xcb\xaf\xe0\xd2\xd7\x4b\xcd\x2b\xe3\xd2\xd7\x4b\xcf\x2c\xe1\x02\x04\x00\x00\xff\xff\xc9\x68\x92\x70\x1e\x00\x00\x00")

func initSinatraDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerignore,
		"init/sinatra/.dockerignore",
	)
}

func initSinatraDockerignore() (*asset, error) {
	bytes, err := initSinatraDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/.dockerignore", size: 30, mode: os.FileMode(420), modTime: time.Unix(1468367985, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initSinatraDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xc1\x6e\x03\x21\x0c\x44\xef\x7c\xc5\x48\x7b\x0f\x1f\x51\xa9\x3d\xb5\xa9\x22\xf5\xd0\x5b\x5c\x30\x09\x0a\xd8\x08\xd8\xa8\xfb\xf7\xd5\xd2\xad\xd4\x0d\x27\xf4\x66\xec\x19\x3f\x9f\x8e\xaf\x70\x2a\x77\xfd\xb6\x2d\x0a\xf5\x4a\xc6\x4c\x70\x5a\x16\xa8\xa4\x05\xfd\xca\x08\x31\x71\x83\x30\x7b\xf6\x08\x5a\xf1\x35\x8b\x4f\x8c\x28\xad\x53\x4a\x66\xc2\x2c\x4e\x73\x66\xe9\xc3\x7f\x67\xf1\x5a\xad\x23\x77\x65\xa4\x28\x8c\x18\xb0\xe8\x8c\xf3\x36\x58\xc8\xdd\xe8\xc2\xe7\x15\x56\x5c\x38\x37\xf3\x74\x7c\xff\xc4\x0b\xe7\x35\x0b\xe3\x59\x2a\xc5\x6e\x64\x27\x1f\x92\xba\xdb\x4e\x1e\xc4\x4c\x18\xae\x5d\xfa\x70\xfd\x27\xe6\xf4\xf1\xf6\xd8\xff\xef\xe0\xb5\x7b\xe5\xd6\xa1\x61\xfc\xa9\x94\xdf\xe0\xc3\xd8\x63\x7e\x02\x00\x00\xff\xff\x9c\x51\x49\xbe\x2d\x01\x00\x00")

func initSinatraDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerfile,
		"init/sinatra/Dockerfile",
	)
}

func initSinatraDockerfile() (*asset, error) {
	bytes, err := initSinatraDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/Dockerfile", size: 301, mode: os.FileMode(420), modTime: time.Unix(1468367985, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initSinatraDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\xe3\x52\x50\xc8\x49\x4c\x4a\xcd\x29\x06\x09\x2a\x28\xe8\x2a\x24\xe7\xe7\x95\xe5\x57\xe8\x15\xe4\x17\x95\xe8\x99\x98\x18\xeb\x15\x14\xe5\x97\xe4\x27\xe7\xe7\xd8\x96\xe4\x14\xe3\x56\x52\x51\x69\x5b\x52\x54\x9a\xca\xa5\xa0\x00\x12\x85\x1b\x66\x61\x60\x65\x62\x60\x60\x00\xe5\x99\x98\x18\x83\xb8\x86\x5c\x80\x00\x00\x00\xff\xff\xc0\xe1\x22\xef\x84\x00\x00\x00")

func initSinatraDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerComposeYml,
		"init/sinatra/docker-compose.yml",
	)
}

func initSinatraDockerComposeYml() (*asset, error) {
	bytes, err := initSinatraDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/docker-compose.yml", size: 132, mode: os.FileMode(420), modTime: time.Unix(1468367985, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initUnknownDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\x4b\xcd\x2b\xe3\xd2\x4b\xcf\x2c\xe1\x02\x04\x00\x00\xff\xff\x9c\x10\x28\x7b\x0a\x00\x00\x00")

func initUnknownDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initUnknownDockerignore,
		"init/unknown/.dockerignore",
	)
}

func initUnknownDockerignore() (*asset, error) {
	bytes, err := initUnknownDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/unknown/.dockerignore", size: 10, mode: os.FileMode(420), modTime: time.Unix(1468367985, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initUnknownDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x0b\xf2\xf7\x55\x28\x4d\x2a\xcd\x2b\x29\xb5\x32\x34\xd3\x33\x30\xe1\xe2\x72\xf6\x0f\x88\x54\xd0\x53\xd0\x4f\x2c\x28\xe0\x02\x04\x00\x00\xff\xff\xf1\xa3\x65\xfc\x1f\x00\x00\x00")

func initUnknownDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initUnknownDockerfile,
		"init/unknown/Dockerfile",
	)
}

func initUnknownDockerfile() (*asset, error) {
	bytes, err := initUnknownDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/unknown/Dockerfile", size: 31, mode: os.FileMode(420), modTime: time.Unix(1468367985, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initUnknownDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x4d\xcc\xcc\xb3\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\xe3\x02\x04\x00\x00\xff\xff\xa6\xe1\xc1\x85\x11\x00\x00\x00")

func initUnknownDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initUnknownDockerComposeYml,
		"init/unknown/docker-compose.yml",
	)
}

func initUnknownDockerComposeYml() (*asset, error) {
	bytes, err := initUnknownDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/unknown/docker-compose.yml", size: 17, mode: os.FileMode(420), modTime: time.Unix(1468367985, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"init/django/.dockerignore": initDjangoDockerignore,
	"init/django/Dockerfile": initDjangoDockerfile,
	"init/django/docker-compose.yml": initDjangoDockerComposeYml,
	"init/rails/.dockerignore": initRailsDockerignore,
	"init/rails/Dockerfile": initRailsDockerfile,
	"init/rails/docker-compose.yml": initRailsDockerComposeYml,
	"init/ruby/.dockerignore": initRubyDockerignore,
	"init/ruby/Dockerfile": initRubyDockerfile,
	"init/ruby/docker-compose.yml": initRubyDockerComposeYml,
	"init/sinatra/.dockerignore": initSinatraDockerignore,
	"init/sinatra/Dockerfile": initSinatraDockerfile,
	"init/sinatra/docker-compose.yml": initSinatraDockerComposeYml,
	"init/unknown/.dockerignore": initUnknownDockerignore,
	"init/unknown/Dockerfile": initUnknownDockerfile,
	"init/unknown/docker-compose.yml": initUnknownDockerComposeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"init": &bintree{nil, map[string]*bintree{
		"django": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initDjangoDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initDjangoDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initDjangoDockerComposeYml, map[string]*bintree{}},
		}},
		"rails": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initRailsDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initRailsDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initRailsDockerComposeYml, map[string]*bintree{}},
		}},
		"ruby": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initRubyDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initRubyDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initRubyDockerComposeYml, map[string]*bintree{}},
		}},
		"sinatra": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initSinatraDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initSinatraDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initSinatraDockerComposeYml, map[string]*bintree{}},
		}},
		"unknown": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initUnknownDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initUnknownDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initUnknownDockerComposeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

