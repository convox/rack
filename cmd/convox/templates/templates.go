// Code generated by go-bindata.
// sources:
// templates/init/rails/.dockerignore
// templates/init/rails/Dockerfile
// templates/init/rails/bin/web
// templates/init/rails/config/initializers/convox.rb
// templates/init/rails/docker-compose.yml
// templates/init/ruby/Dockerfile
// templates/init/ruby/docker-compose.yml
// templates/init/sinatra/Dockerfile
// templates/init/sinatra/docker-compose.yml
// templates/templates.go
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _initRailsDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\xd7\x4b\xcf\x2c\xe1\xd2\x4f\x49\xd2\xd7\xd2\x2b\x2e\xcc\xc9\x2c\x49\x35\x46\xe5\xe9\x66\xe5\x97\x16\xe5\x25\xe6\x70\xe9\xe7\xe4\xa7\xeb\x6b\x71\xe9\x97\xe4\x16\x70\x01\x02\x00\x00\xff\xff\xc8\xd7\x97\x1a\x3f\x00\x00\x00")

func initRailsDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerignore,
		"init/rails/.dockerignore",
	)
}

func initRailsDockerignore() (*asset, error) {
	bytes, err := initRailsDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/.dockerignore", size: 63, mode: os.FileMode(420), modTime: time.Unix(1463268682, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initRailsDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x50\xbb\x4e\xc4\x30\x10\xec\xfd\x15\x2b\xd1\x5f\x7a\x5a\x24\xa8\xe0\x50\x24\x0a\xba\xf3\x39\xeb\x60\xe2\xd8\x96\x1f\x27\xf2\xf7\x6c\xd6\x09\x21\xa7\xa4\xca\x3c\xec\x99\xf1\x73\x7b\x7e\x05\xe5\xdd\xcd\xff\x34\x51\x1a\x9b\x84\x78\x20\x1c\x26\xf0\xce\x4e\x90\xbf\x10\xb4\xb1\x98\xc0\x21\x76\xd8\x81\xf6\x11\xae\xc5\x75\x16\xc1\xb8\x94\xa5\xb5\xe4\x2f\x4e\xf9\x71\x44\x97\xd9\x7f\x43\xd7\xf9\xd8\x28\xa9\x08\x58\xe3\xc8\xa9\x61\xf2\x05\x2e\xcb\xc1\x20\xd5\x20\x7b\xbc\xcc\x64\x84\x1e\xc7\x24\x9e\xce\xef\x9f\xf0\x82\xe3\x9c\x05\xfc\x35\x32\x84\x66\x61\x76\xf2\xc9\x7a\x35\xec\x64\x66\xa8\x06\xbb\x76\xe9\xec\xfa\xcf\x88\xf6\xe3\xed\xbe\xff\x3a\xf8\xbb\xa4\x7c\x3c\x58\xa6\x84\x39\x3d\x86\x88\xb4\x33\xfc\x15\x6a\xe5\x80\x4b\x61\x0e\x5a\x71\x55\xe9\x51\xb5\xe9\xb7\x2d\x15\x57\x2d\x94\xab\x35\x6a\xd3\x2a\xae\xda\x8c\x6b\x60\xd5\x36\xcc\xe5\x23\x85\x1c\x14\x5a\x47\xcc\xfd\x23\xd2\x10\xaf\xf9\x9f\x4e\xd7\x6b\x4f\x7c\x9b\xf8\x0d\x00\x00\xff\xff\x08\xae\x24\x4e\xf0\x01\x00\x00")

func initRailsDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerfile,
		"init/rails/Dockerfile",
	)
}

func initRailsDockerfile() (*asset, error) {
	bytes, err := initRailsDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/Dockerfile", size: 496, mode: os.FileMode(420), modTime: time.Unix(1463247575, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initRailsBinWeb = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8d\x41\xae\xc2\x30\x0c\x05\xf7\x39\xc5\xfb\xea\x17\xbb\x36\xac\xb9\x04\x08\x71\x81\x94\x98\xd6\x22\x75\xa2\xd8\x45\x1c\x9f\x8a\x08\x81\xbc\x9b\x19\xeb\x75\x7f\x7e\x64\xf1\x3a\x3b\xd7\x21\x52\x22\x23\xe4\x14\xa1\x54\x1f\x54\x87\xc2\xd1\xd5\x05\xfd\x0d\x3e\x94\xe2\x6d\x29\x7e\x43\xea\x7f\xf4\xf6\xa7\x16\xaa\x61\x2d\x90\x89\xe5\x09\x16\xd8\x4c\x18\xc3\xf5\x3e\xd5\xbc\x4a\x74\x8d\xef\xbe\x6d\x0d\x9c\x14\x89\xd5\x48\x58\x26\x64\xc1\x7e\x78\xdf\xe1\xff\x74\x3c\x5f\x5c\x0b\xda\x0c\xfa\xf1\x63\xd1\x17\xb4\xe0\x15\x00\x00\xff\xff\xb8\xc0\x7d\x5f\xb9\x00\x00\x00")

func initRailsBinWebBytes() ([]byte, error) {
	return bindataRead(
		_initRailsBinWeb,
		"init/rails/bin/web",
	)
}

func initRailsBinWeb() (*asset, error) {
	bytes, err := initRailsBinWebBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/bin/web", size: 185, mode: os.FileMode(493), modTime: time.Unix(1463265546, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initRailsConfigInitializersConvoxRb = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x0a\x0e\x71\xf1\x0f\x0d\xd1\x2b\xae\xcc\x4b\x56\xb0\x55\x28\x29\x2a\x4d\xe5\xe2\x0a\x4a\xcc\xcc\x29\xd6\x4b\x2c\x28\xc8\xc9\x4c\x4e\x2c\xc9\xcc\xcf\xd3\x4b\xce\xcf\x4b\xcb\x4c\xd7\x4b\x4a\x4d\xcb\x2f\x4a\x8d\xcf\xcc\xcb\x2c\xc9\x4c\xcc\xc9\xac\x4a\x55\x48\xc9\x57\xa8\x01\x2a\xac\xe1\x52\x50\x00\x52\x30\x75\x39\xf9\xe9\xe9\xa9\x45\x40\xf3\x7c\xc0\x0c\xbd\xbc\xd4\x72\x0d\x88\x45\x9a\x5c\xa9\x79\x29\x5c\x80\x00\x00\x00\xff\xff\x36\xc3\xef\x32\x75\x00\x00\x00")

func initRailsConfigInitializersConvoxRbBytes() ([]byte, error) {
	return bindataRead(
		_initRailsConfigInitializersConvoxRb,
		"init/rails/config/initializers/convox.rb",
	)
}

func initRailsConfigInitializersConvoxRb() (*asset, error) {
	bytes, err := initRailsConfigInitializersConvoxRbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/config/initializers/convox.rb", size: 117, mode: os.FileMode(420), modTime: time.Unix(1463268516, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initRailsDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\xcc\xc1\x0a\xc2\x30\x0c\xc6\xf1\xfb\x9e\x22\x2f\x60\xac\xd8\x83\x04\xf6\x30\xeb\xcc\x41\x88\x26\x74\xe9\x9c\x6f\x6f\x0a\xd2\x9b\xb7\xfc\x3f\x7e\xe4\xcd\x85\x26\x80\xd2\x1e\x72\x27\xc0\x38\x65\x29\x2c\x5b\x1f\x01\x4e\xb0\xea\x6b\xd7\x03\x4d\xab\x63\xce\x57\xb4\xaa\xae\xab\xca\xec\xb2\xfd\x27\xc7\x67\xf6\xda\x38\x40\x5f\xc7\xb3\x5b\xa2\x9c\x52\xfa\x55\xd8\x9e\x97\xc8\x5d\xa5\x3d\x79\x38\x40\x3a\x2f\x66\xd3\x37\x00\x00\xff\xff\x0e\x1c\x39\x14\x9d\x00\x00\x00")

func initRailsDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerComposeYml,
		"init/rails/docker-compose.yml",
	)
}

func initRailsDockerComposeYml() (*asset, error) {
	bytes, err := initRailsDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/docker-compose.yml", size: 157, mode: os.FileMode(420), modTime: time.Unix(1463265125, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initRubyDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xcd\x4e\xc0\x20\x10\x84\xef\x3c\xc5\x26\xde\xcb\x43\x98\xe8\x49\x6b\x9a\x78\xf0\x56\x0a\x4b\x6d\x0a\xbb\x84\x9f\x46\xde\x5e\x8a\x35\xb1\x72\x62\x67\xbf\x61\x86\xa7\x69\x7c\x01\xcd\x74\xf0\x97\x8c\x65\xa9\x42\x3c\xb4\x31\x54\x60\x72\x15\xf2\x27\x82\xdd\x1c\x26\x20\x44\x83\x06\x2c\x47\x58\x0a\x19\x87\xb0\x51\xca\xca\xb9\xc6\x17\xd2\xec\x3d\x52\xee\xfc\x81\x64\x38\x4a\xad\x74\x1b\xdc\x46\x8d\xb4\x50\xb9\xc0\x7c\x19\x83\xd2\xbb\x5a\x71\x3e\xc5\x08\x2b\xfa\x24\x1e\xc7\xb7\x0f\x78\x46\x7f\x66\x41\x3f\x52\x85\x20\x2f\xe5\xb6\x1e\x1c\xeb\xfd\xb6\xee\x4a\xab\xd1\xa9\x5b\x7a\xa7\xfe\x2a\x62\x7a\x7f\xfd\xdf\xff\xf7\xc3\x67\xf7\x88\x29\x03\xdb\x7e\x6f\xde\x9f\xe0\xa1\xbf\x23\xbe\x03\x00\x00\xff\xff\x8b\xae\xa0\xae\x2a\x01\x00\x00")

func initRubyDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerfile,
		"init/ruby/Dockerfile",
	)
}

func initRubyDockerfile() (*asset, error) {
	bytes, err := initRubyDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/Dockerfile", size: 298, mode: os.FileMode(420), modTime: time.Unix(1463247575, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initRubyDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8c\xc1\x0a\x83\x30\x0c\x86\xef\x3e\x45\xf0\x6e\xe9\x98\x87\x21\xf8\x30\x5a\x03\xca\xa2\x29\x69\x3a\xed\xdb\x2f\x85\x6d\xb7\xdd\xfa\xf5\xff\xf2\x9d\x38\x0f\x0d\xc0\x9c\x37\x5a\x06\x70\xf6\x0c\xbc\xef\xd3\x61\x80\x61\x65\x68\x71\xd9\x14\x16\x0e\x4f\x94\xce\xa6\xc8\x09\x5d\xd9\x09\xce\x4d\x57\x28\x9c\x05\x92\x4e\xa2\x39\x7e\x0f\x5b\x6b\xd0\x34\x23\xa5\x1a\x06\xe8\x6c\x38\x5e\x7c\xb9\xc8\xa2\xae\xef\xef\x2e\x0a\x2b\x07\xa6\x51\x29\xfd\x57\xae\x32\xaa\x64\x34\xa1\xfe\xfe\x62\x0f\x3f\xf4\xde\xfb\x0f\x99\x5b\xf1\xd6\xbc\x03\x00\x00\xff\xff\xae\x01\x4e\xf5\xc8\x00\x00\x00")

func initRubyDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerComposeYml,
		"init/ruby/docker-compose.yml",
	)
}

func initRubyDockerComposeYml() (*asset, error) {
	bytes, err := initRubyDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/docker-compose.yml", size: 200, mode: os.FileMode(420), modTime: time.Unix(1463247575, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initSinatraDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xc1\x6e\x84\x20\x10\x86\xef\x3c\xc5\x24\xbd\xcb\x43\x34\x69\x4f\xad\x8d\x49\x0f\xbd\x49\x61\x70\x89\x30\x43\x00\xcd\xfa\xf6\x8b\xac\x9b\xac\xeb\x49\xbe\xf9\x86\xff\xe7\x63\xe8\xbf\x40\x33\xad\x7c\x95\xd9\x91\x2a\x49\x09\xf1\x56\x49\xdc\x80\xc9\x6f\x50\x2e\x08\xd6\x79\xcc\x40\x88\x06\x0d\x58\x4e\xf0\xbf\x90\xf1\x08\x8e\x72\x51\xde\x57\x7f\x21\xcd\x21\x20\x95\xe6\xaf\x48\x86\x93\xd4\x4a\xd7\x83\x77\x54\x4d\x0b\x1b\x2f\x30\x1e\x8b\x51\xe9\x59\x4d\x38\xee\x30\xc1\x84\x21\x8b\xf7\xfe\xe7\x0f\x3e\x31\xec\x59\xd0\x3e\xa9\x62\x94\x07\x39\x8d\x3b\xcf\x7a\x3e\x8d\x1b\xa9\x35\x9a\x75\x4a\x6f\xd6\x33\x11\xc3\xef\xf7\x6b\xff\xc7\x83\xf7\xee\x09\x73\x01\xb6\xed\xbf\xee\xde\x83\xbb\x76\x8f\xb8\x05\x00\x00\xff\xff\x9c\x51\x49\xbe\x2d\x01\x00\x00")

func initSinatraDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerfile,
		"init/sinatra/Dockerfile",
	)
}

func initSinatraDockerfile() (*asset, error) {
	bytes, err := initSinatraDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/Dockerfile", size: 301, mode: os.FileMode(420), modTime: time.Unix(1463247575, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initSinatraDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\x03\x32\x73\x12\x93\x52\x73\x8a\x41\x82\x0a\x0a\xba\x0a\xc9\xf9\x79\x65\xf9\x15\x7a\x05\xf9\x45\x25\x7a\x26\x26\xc6\x7a\x05\x45\xf9\x25\xf9\xc9\xf9\x39\xb6\x25\x39\xc5\xb8\x95\x54\x54\xda\x96\x14\x95\xa6\x02\x15\x80\x44\xe1\x86\x59\x18\x58\x99\x18\x18\x18\x40\x79\x40\xb5\x20\xae\x21\x17\x20\x00\x00\xff\xff\xc0\xe1\x22\xef\x84\x00\x00\x00")

func initSinatraDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerComposeYml,
		"init/sinatra/docker-compose.yml",
	)
}

func initSinatraDockerComposeYml() (*asset, error) {
	bytes, err := initSinatraDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/docker-compose.yml", size: 132, mode: os.FileMode(420), modTime: time.Unix(1463247575, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templatesGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x99\xdb\x6e\x1b\xc9\xd1\xc7\xaf\xc5\xa7\x98\x15\xb0\x0b\xea\x83\x96\x9a\xf3\x41\x80\x6f\x2c\xfb\x03\x7c\x11\x2f\xe0\x38\x08\x82\x28\x58\xcc\xa1\x47\x19\x2c\x45\x2a\x24\xe5\x95\x6c\xf8\xdd\x53\xbf\xae\xa2\x44\xc9\x22\x65\xcb\x72\x2e\x46\x9c\xe9\xae\xae\x43\x77\xd5\xbf\xaa\x5a\x47\x47\xc1\xc9\xbc\x73\xc1\x99\x9b\xb9\x45\xbd\x72\x5d\xd0\x5c\x07\x67\xf3\x5f\x9b\x61\xd6\xd5\xab\x7a\x32\x12\x82\xe5\xfc\x72\xd1\xba\xe5\x31\xef\x2b\x77\x7e\x31\x15\xba\xe5\xd1\x30\x1b\x56\x47\x8b\x7a\x98\x2e\x8f\x26\xdd\xbc\xfd\xc3\x2d\x86\xb3\xd9\x7c\xe1\xb6\x52\xbd\xf2\x44\xfd\x30\xdd\x4e\x22\x52\x8f\xfe\x74\xcd\xd6\xf9\x76\x3e\xeb\x87\x33\x3f\x32\xd4\xd3\xe1\xa3\x5b\xf8\xb1\x0f\xf3\xab\xc9\x62\xfb\x2a\xd5\xee\xd7\x76\x7e\x7e\x31\x5f\xba\xc9\xf5\xf9\xf4\x21\xd2\xcb\xe6\xfa\x11\x15\xa1\xf8\x2a\x5e\xcb\x61\x56\xaf\x16\xf5\x6e\x76\x6b\xa2\xc7\x38\xde\xbc\x4d\xce\xe6\xcc\xbc\xfa\x2d\x78\xfb\xdb\xfb\xe0\xf5\xab\x37\xef\x7f\x1a\x8d\x2e\xea\xf6\x8f\xfa\xcc\xdd\xd2\x8f\x46\x83\x30\x5a\xac\x82\xf1\x68\x6f\xbf\xb9\x96\x91\x7d\x79\x81\xfb\xc2\x2d\x97\x47\x67\x1f\x87\x0b\x06\xfa\xf3\x15\x3f\xc3\x9c\xbf\xcb\xd5\x62\x98\x9d\x79\xc2\xb9\xff\xbb\x1a\xce\x9d\x4e\x1f\x0d\xf3\xcb\xd5\x30\xe5\xe3\xa2\x5e\xfd\xfb\x08\x63\x78\xd9\x1f\x1d\x8c\x46\xfd\xe5\xac\x0d\xcc\x53\xde\xb9\xba\x1b\xf3\x12\xfc\xf3\x5f\x88\x3d\x0c\x66\xf5\xb9\x0b\x94\xf5\x41\x30\x5e\x8f\xba\xc5\x62\xbe\x38\x08\x3e\x8d\xf6\xce\x3e\xfa\xaf\xe0\xf8\x45\x80\x56\x93\xb7\xee\x4f\x98\xb8\xc5\xd8\xab\xcd\xf7\xcb\xcb\xbe\x97\x6f\xd8\x1e\x1c\x8c\xf6\x86\xde\x2f\xf8\xe9\x45\x30\x1b\xa6\xb0\xd8\x5b\xb8\xd5\xe5\x62\xc6\xe7\x61\x20\x26\x4d\x5e\xc3\xbd\x1f\xef\xc3\x28\xf8\xf9\x3f\xc7\xc1\xcf\x1f\xf6\x55\x13\x2f\x4b\x78\x7c\x1e\x8d\xf6\x3e\xd4\x8b\xa0\xb9\xec\x03\x95\xa3\x42\x46\x7b\xbf\xab\x3a\x2f\x82\x61\x3e\x39\x99\x5f\x5c\x8f\x7f\x11\x9a\x43\xd1\x4d\x56\xb5\xd3\xd7\x6b\x4d\x27\x27\x53\x39\xa7\xb1\x98\xff\x4c\xfa\xc0\x46\xf9\x6f\x61\x24\x84\xaa\xb7\x0d\x8a\x5a\x93\x97\xa8\x3e\x3e\x38\x84\x62\x24\x73\xab\xeb\x0b\x17\xd4\xcb\xa5\x5b\xb1\xe5\x97\xed\x0a\x2e\xde\x3e\x3b\x0f\x11\x33\xeb\xe7\x41\x30\x5f\x4e\xfe\x5f\xce\xf0\x8d\x7c\xdc\xac\xb3\x23\x5c\x8f\x6f\x70\xd8\x38\xc3\xd1\xde\x52\x02\x2e\x18\x66\xab\x3c\x1d\xed\x9d\x03\x1a\xc6\xeb\x2f\xf2\xee\x47\xde\x8b\xdb\x04\xf8\xce\x84\x37\xd8\x7b\x0f\x19\xf7\xc3\x7d\x11\x07\xc1\x5b\xe1\x3c\x3e\x30\xde\x88\x32\xe3\xfa\x61\x82\x50\x59\xbc\x7d\xed\x5f\x45\x11\x59\xeb\x55\xb9\xbb\x14\x15\x77\x2e\x45\x57\x59\xba\xa1\xf9\x5d\x06\xd8\xf5\x18\x03\x8c\x13\x1e\x37\x86\x7e\xc1\xc1\xac\xdf\xce\xe4\xcd\xf2\xd5\xb0\x10\x16\xcd\x7c\x3e\xdd\x5c\x5d\x4f\x97\x8f\x58\x7e\xbd\x54\xc3\x05\x56\xea\xd6\x7d\xfa\xbc\xb1\xda\x3c\x01\xe7\xfe\x1d\x84\x79\x07\xf8\xbd\xda\x40\x66\x71\x6d\xf5\x85\xf1\xfe\xe9\x55\xd4\x9f\x5e\x95\xcd\xe9\x55\x58\xca\x13\xda\x53\x9d\x5e\xe5\x4e\xc6\x6d\xac\x17\x9a\x2e\x96\xa7\x38\xbd\x4a\x85\x36\xae\x4f\xaf\xda\x4e\xdf\x5b\xa1\x4d\xe5\x71\xd9\x5d\x9a\x56\xd6\xc4\xad\x8c\x47\x3a\x9e\xf6\x4a\xb7\xa6\xe1\x37\x86\x97\xc8\x69\x5b\xe5\x03\x3d\x34\x89\xf0\x4a\x73\xe5\xe9\xd0\xc5\xde\x2b\x59\x17\xd9\x7b\xcc\x9c\xbc\x17\xa1\xd2\x38\x99\x73\xe9\xe9\x55\xcd\xaf\xf0\xcd\xe5\x29\x22\x9d\xab\x6c\x2e\x32\xfa\x50\xc6\xc3\xf8\xd6\x5e\xec\xe3\x69\x4b\xd5\xcd\xcb\x11\x1b\x93\x7e\x63\x4f\xc2\xfd\x35\xd2\x3d\xb8\xa9\x16\x88\x0f\x01\xdc\x3a\x5c\x37\x00\x52\x22\xfb\xe1\xb3\x39\x94\x99\xfd\x6d\x29\x75\x5f\x66\x0f\x6e\xc2\xe9\xc1\xf5\x68\xf0\x7f\x3e\xfe\x37\x35\xf0\x00\x70\x83\xb2\xbb\xf4\x7f\x0c\xcc\x6e\x30\xc8\xa3\x88\x30\xbb\xe7\x9a\x9f\x08\xda\xe3\x60\x87\x09\x01\xb1\x79\x1c\xe4\xc9\x61\x40\x90\x1d\x6f\xc6\xe0\x38\x8d\xc3\x03\x3f\x4e\xe8\x1c\x6b\x68\xfd\x6d\x36\x5c\x8d\xa3\x34\x4f\xe2\xbc\xcc\xcb\xf8\x30\x08\x0f\x04\x2c\x6b\x84\xff\xe2\x2d\xfd\xe4\xcd\x3b\x0e\xcc\x4a\x34\x3b\x0e\xfc\xcf\xe7\x9b\xcd\xaf\x0f\x77\xc5\x05\xd9\xec\x49\x51\x91\x8b\xc7\x66\xf2\xde\x08\x6d\x8a\x27\x8b\x97\x25\xf2\x1d\xe1\x95\x32\xd7\x4b\x94\x44\x99\x7a\x7a\x27\x5e\x97\xc9\x9a\x42\x3c\x2b\x93\x27\xc6\x5b\x85\x97\x0b\x95\x07\xdf\xa1\x8c\x37\xf2\xf4\x89\xf0\xa9\xcc\x93\xe1\x45\xd4\x08\x6d\x95\xab\x6e\xb1\x78\x68\x2f\x63\x7d\xa1\x3a\x74\xb9\xea\x17\x47\x1a\x01\xb5\xf0\x6a\xf1\xe0\x56\xf5\xa8\x64\xae\x97\xb9\x42\xf8\x16\x44\x86\xe8\x1a\x66\x16\xb5\x9d\x46\x33\xf6\x24\xb2\x2e\x8b\xd4\xfb\x2b\xa1\x2b\xe5\xbb\x10\xb9\x31\x36\x09\x9f\x58\xe4\xf4\xf2\xde\x3a\xb5\xb7\xc2\xf6\x5e\xed\x6d\x84\xb6\x91\xb5\x95\xd0\xb7\xa1\xea\x52\xe4\xaa\x77\x29\xef\x3d\xba\xa3\x1f\xfb\x24\x72\x8b\x4c\x23\xb2\x95\xb1\x06\xdb\xd8\x0f\x19\x6b\x32\x8d\xd6\xb8\x57\x19\x7d\xa5\x91\x9c\xa6\x1a\x99\x1d\xdf\xcc\x25\x1a\xad\xcc\x23\x23\x96\xa7\xae\xf4\xcc\x32\xf6\x35\xd1\x88\x66\x2c\x8f\x74\xbf\xb0\xd9\x23\x4e\xa3\x72\xb1\xab\xcb\xf4\x97\x7d\x69\x5a\x45\xa3\x3c\x55\xdb\x23\x68\x0b\x3d\x9b\xca\xa9\xdd\x4e\x64\x57\xbd\xee\x43\x19\xab\x9c\xaa\x55\xde\x7d\xab\xe8\x95\xc4\xba\x1e\xe4\xca\x6d\x1f\x90\x0f\xca\x71\xfe\xd0\x38\x93\x03\x0d\x7e\x10\xe6\xea\x47\xd0\x7a\x44\xc3\x7f\x6a\x45\x52\x7c\x8e\xfd\x43\x96\x93\xb3\x6a\x9c\x9d\x17\xbe\x52\xea\x3a\xce\xbc\x68\xf5\xcc\xb1\xbf\xce\x55\x07\xfc\x28\x91\x35\x65\xae\x7c\x38\xa7\x24\x51\x5d\xf1\xcd\xbc\x56\x3f\x28\x43\x45\x6e\xf4\x0d\x9d\xfa\x28\xfb\x9e\x19\x0a\xe3\x17\x8d\xbd\x37\xec\x89\xf9\x76\x66\xef\xfe\xfc\x1a\xb5\x0d\x9e\x5d\xa2\x99\x82\xf3\xee\xe4\xb7\x6c\x15\x95\x73\xdb\xf3\x24\xd7\xbd\xf6\x68\x2e\xb4\x65\xa6\x3e\x16\xa5\x2a\x3b\x2d\x74\x9e\x18\x62\x9e\x8c\x81\x9f\xd5\xbd\x9e\x79\x65\xfe\x81\x0f\xc0\x97\x0c\x83\xfd\xf8\x2d\x7b\x12\x76\x5f\x22\x3c\xbe\x81\x3e\x9c\xa7\xf7\xad\x75\x36\xd8\x89\xf0\xc0\xc3\x77\xe3\x3b\x4c\xee\xa3\xfb\xed\xcc\x4e\x68\x87\xe0\x09\xc0\xbe\xa1\xf6\x0f\x80\xf5\x4d\xdd\x0d\xd3\xd3\x2a\xff\x76\x50\x4f\x8b\xac\xc8\x9e\x17\xd4\x5f\x0e\xb3\xbf\xbb\xe6\x49\x80\x9e\x8a\x03\x95\x94\x36\x6b\xa0\x8a\x15\xd0\xc3\x75\x80\x17\x1a\x50\x00\x58\x2f\xfc\x9c\x38\x6a\x54\x68\x00\xe2\xd0\xb5\xd0\x35\x80\x50\xaa\xb2\x08\x20\xc0\x8f\xe0\x00\x18\x01\xea\x38\x56\xf0\xab\x0d\xd4\x53\x73\x7c\x1c\xba\xac\x75\x1d\x6b\x1a\x73\xe6\xc8\x12\x01\x6b\x00\x3e\xc0\x1b\xe0\x00\xd0\x01\x80\xa4\xd1\x20\x00\x70\xb3\x58\xf9\x13\x30\xbe\xe4\x21\x28\x19\x4f\x75\x0f\xf8\x2d\x0b\xb5\x8b\x84\x44\x20\x7a\xbb\x3a\x0d\x98\xc4\xa9\xae\x24\x9c\x9c\xc0\xab\x54\x1e\x60\x8b\xad\xc8\xef\x53\x05\xa3\xda\xca\xb1\xba\x56\xd0\xf0\x20\x00\x28\x5a\x39\xc8\xfe\x46\x96\x00\xd8\xd7\x88\xc4\x00\xf0\x64\x2a\x07\xd9\xd8\x98\xc2\x37\xd5\x7d\x07\x5c\x01\xb7\xdc\xf4\xa9\x0c\x10\xe0\x09\x7d\x6a\xe0\x4e\x22\x62\x0f\x00\x71\xf4\x23\x49\x75\xbd\x96\x9b\x9c\x23\xfc\x3c\x10\x62\x33\x67\xd7\x28\x08\x85\x06\xaa\xec\x5d\x9e\xe8\x1e\xf8\xf3\x4b\x35\x11\x03\x68\xf7\x41\xa3\xb1\x84\x56\x74\xca\xcf\x9f\xef\x8e\xb2\x50\xdd\xef\x3b\x00\x43\x19\xdc\x07\x0b\xbb\x14\xd9\x82\x14\xba\xe6\x9b\x50\xe2\x8e\x9e\x3f\x00\x21\x6e\x14\x36\x78\x88\xca\xec\x41\x78\xa8\x92\x5d\x35\x5f\x96\xa5\xf9\xf3\xc2\xc3\x89\xbf\x3d\x7a\xb3\x71\x79\x74\xe2\xef\x8e\xde\x3d\x0d\x32\xa8\xd9\xc8\x97\x84\x3a\x6e\x15\xf6\xea\xba\xb8\x16\x75\x5f\x6d\x1d\x0e\xb9\x35\x23\xc7\x87\x9a\x53\xa9\x57\x08\x2f\x72\x64\xda\x59\xb7\x13\x2b\x3f\x42\xa2\xb5\x5a\x04\x1a\x60\xc3\x77\x5e\xad\xae\xa3\xae\xf1\x9d\x57\xab\x79\x2c\xb6\x0e\xca\xaf\xe9\x35\xf7\xfa\x2e\xcc\xe9\xb7\x7f\x6f\x94\x7e\xdd\xa1\xa5\x26\x97\x71\x5f\x6b\xd5\x1a\x82\xd0\x7b\x3e\xcd\x2d\xdf\xb4\xbd\xed\xd2\x6a\x0b\xd9\xcc\xc2\x91\x31\x6a\x00\x5f\xc3\x44\x96\xf3\xad\xf3\x03\x8e\x32\xdb\xbb\xcc\xa0\x14\x18\x03\x42\xc9\xe1\xce\x1e\x6a\x34\x60\x30\x0d\xb5\xf6\x25\x8f\xb7\x06\xbb\x4d\xa7\x30\xd1\x51\xdf\xc4\xba\xb7\xa5\xc1\x66\x55\x6b\x78\xb3\xbe\xa8\x74\xaf\xf8\x2e\xc3\xcd\x10\xbd\x0d\x65\x5f\x73\x24\x0a\x33\x89\xc1\xf0\xae\x50\xde\xee\x2a\xdf\x11\xde\xdb\x99\xde\x0f\xf9\x9d\xf7\x9c\x5b\x80\x60\x3b\xf7\x6f\x02\x87\x47\x2d\xff\x01\x80\xf1\x88\xb9\x6b\x18\x89\x8a\xa7\xb4\x8e\x59\xf4\xcc\x30\xa2\x05\xd0\x89\xde\xd7\xfe\xe3\x7c\xfa\x24\xf0\x20\x4f\xf9\xc0\x8a\x34\xf0\x37\xeb\x8d\x36\x57\x40\xa1\xce\xa0\xf9\xf0\x79\xbd\xd7\x02\x9a\x00\xf3\x8d\x55\xa2\xb5\x06\xf9\x98\x75\xd4\x09\x1e\x6c\x22\x95\x43\x9e\x44\x86\xbf\x06\xa1\x00\xef\xf5\x41\x16\x05\x35\xf5\x05\xc5\xbc\x6f\x5c\xac\xb6\xa0\x6e\xa0\x21\xa4\x20\x67\x3d\xc1\xe4\x8b\x6f\xa7\x01\x48\xf3\x49\x70\x26\xc2\x3f\xcf\x0c\xc4\xc8\xb5\x8d\xda\x0d\x08\x00\x4a\x00\x1d\x35\x43\x6e\xf5\x49\x98\x28\xe0\xd0\x24\x90\x7b\x01\xa7\xcc\x72\x6f\x6d\x8d\x02\x73\x34\xae\x34\x3f\x4d\x6c\xc5\x7f\xa1\x4d\x58\x5e\xa8\x9d\xe4\x71\x64\x03\x16\xe4\x63\xe6\x9a\x44\xe5\x53\x53\x61\x27\x60\xd3\x1b\x48\xf9\xc6\xd9\x69\xf3\x08\x70\x66\x9d\x36\x9a\x34\x45\x80\xc6\x9a\x17\xb5\x94\xdf\xdf\x5c\x01\x34\x29\x1e\x68\x20\x9c\xd6\x6a\x00\x18\x75\x49\xd5\x7d\xcd\x15\xd1\xad\x93\x7c\x77\x1b\x71\xcb\xea\x3e\x58\x7c\xf9\x0f\x84\x9d\x4d\xc5\x2d\xa3\x27\xb4\x16\x5f\x18\xf4\x03\xd0\xe0\x21\x7b\xd6\x10\x90\x3d\x05\x02\xb2\x28\x7e\xc6\x46\xe3\xb2\xb9\xfe\xce\xcb\x23\x9f\xa8\x7a\xbb\x4a\x75\x76\x69\x62\x97\x47\x34\xee\x3e\x49\xb5\xda\x6b\x10\x87\x9d\x5d\x5c\x50\x8b\xd3\x4b\xb8\x52\xaf\x4b\x89\x2f\x12\x21\x35\x30\x0d\x2d\x45\x86\x2f\x22\x1a\xab\xa3\x6b\xed\x4f\xe0\xe9\x9b\x66\xe3\x95\x39\xed\x37\x68\xd8\xb9\xb8\x21\xb6\xf3\x58\xe3\x8c\x4b\x1d\x6a\xfa\xd2\xea\xfc\xbc\xd2\xa4\x4c\x6c\xa3\x2f\x98\x82\x2c\x62\xca\x37\xf6\x99\x25\xf1\x58\x75\xf6\x97\x0c\xd6\x77\x80\x57\xf0\xa6\xb6\xee\x0d\x3f\xb8\x38\xe1\xe2\x69\x7d\xa9\x84\xdd\x5c\xf0\x78\x3c\xcb\xed\x2a\xb8\xd0\x5a\x1f\xfd\xe9\x81\xe8\x5b\x7c\xf1\x14\x29\x46\xf0\x50\x8b\x83\x93\x91\x5d\x29\x83\x1b\xc4\x35\xf1\xef\x9c\xe2\x1a\xbd\x14\xbd\x82\x8f\x73\x70\xc6\xf4\x8f\xc0\xa5\x56\xf7\x83\xc2\x07\x9d\xfd\x65\x5e\x65\xf5\x7e\x6b\x72\xed\xf2\x81\x3d\x5c\x5f\x8a\x24\x76\x89\xc5\x19\x53\xe4\xf5\x76\xa1\xb7\xbe\x30\x02\x53\x29\x04\x39\x13\xf8\x17\x86\x2b\xe0\x32\x38\x8b\x7e\xa5\x5d\x3c\x81\x39\x14\x7f\x4d\xae\xeb\xd9\x13\x70\x1c\xec\x63\x0c\x3b\xbc\xde\x76\x89\xc8\x3e\x83\x75\x5c\x24\x71\x36\xbd\xd3\xa2\x8b\xb3\x2b\xd6\x3d\x5a\xa7\xfd\x90\xc7\xad\x42\x8b\x1e\x8f\x9f\x85\xe5\x85\x4a\xf1\xb8\xb3\xcb\x40\x72\x02\x3e\x81\x7f\xd0\x07\xd1\x33\xe2\x03\xf4\x91\xf4\x63\xd0\xde\xc7\xc2\xd2\x8a\xdb\x3a\xb4\x4b\x95\x7a\xfb\x65\xca\x9d\x68\x79\x22\x08\xde\xe1\xb1\x81\x7e\x77\xff\x63\xfb\x00\xe8\xdd\x59\xf8\xd5\x68\xf7\x90\xca\xcf\x0b\x73\xf7\x15\x37\x74\x8b\xab\xf2\x7f\x7e\x8d\xf2\xdf\x00\x00\x00\xff\xff\xe9\x3e\x41\xe5\x00\x20\x00\x00")

func templatesGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesGo,
		"templates.go",
	)
}

func templatesGo() (*asset, error) {
	bytes, err := templatesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates.go", size: 20480, mode: os.FileMode(420), modTime: time.Unix(1463268789, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"init/rails/.dockerignore": initRailsDockerignore,
	"init/rails/Dockerfile": initRailsDockerfile,
	"init/rails/bin/web": initRailsBinWeb,
	"init/rails/config/initializers/convox.rb": initRailsConfigInitializersConvoxRb,
	"init/rails/docker-compose.yml": initRailsDockerComposeYml,
	"init/ruby/Dockerfile": initRubyDockerfile,
	"init/ruby/docker-compose.yml": initRubyDockerComposeYml,
	"init/sinatra/Dockerfile": initSinatraDockerfile,
	"init/sinatra/docker-compose.yml": initSinatraDockerComposeYml,
	"templates.go": templatesGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"init": &bintree{nil, map[string]*bintree{
		"rails": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initRailsDockerignore, map[string]*bintree{
			}},
			"Dockerfile": &bintree{initRailsDockerfile, map[string]*bintree{
			}},
			"bin": &bintree{nil, map[string]*bintree{
				"web": &bintree{initRailsBinWeb, map[string]*bintree{
				}},
			}},
			"config": &bintree{nil, map[string]*bintree{
				"initializers": &bintree{nil, map[string]*bintree{
					"convox.rb": &bintree{initRailsConfigInitializersConvoxRb, map[string]*bintree{
					}},
				}},
			}},
			"docker-compose.yml": &bintree{initRailsDockerComposeYml, map[string]*bintree{
			}},
		}},
		"ruby": &bintree{nil, map[string]*bintree{
			"Dockerfile": &bintree{initRubyDockerfile, map[string]*bintree{
			}},
			"docker-compose.yml": &bintree{initRubyDockerComposeYml, map[string]*bintree{
			}},
		}},
		"sinatra": &bintree{nil, map[string]*bintree{
			"Dockerfile": &bintree{initSinatraDockerfile, map[string]*bintree{
			}},
			"docker-compose.yml": &bintree{initSinatraDockerComposeYml, map[string]*bintree{
			}},
		}},
	}},
	"templates.go": &bintree{templatesGo, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

