// Code generated by go-bindata.
// sources:
// templates/init/rails/.dockerignore
// templates/init/rails/Dockerfile
// templates/init/rails/docker-compose.yml
// templates/init/ruby/.dockerignore
// templates/init/ruby/Dockerfile
// templates/init/ruby/docker-compose.yml
// templates/init/sinatra/.dockerignore
// templates/init/sinatra/Dockerfile
// templates/init/sinatra/docker-compose.yml
// templates/init/unknown/.dockerignore
// templates/init/unknown/Dockerfile
// templates/init/unknown/docker-compose.yml
// templates/templates.go
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _initRailsDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\xd7\x4b\xce\xcf\x2b\xcb\xaf\x00\x32\x52\xf3\xca\x80\x64\x7a\x66\x09\x97\x7e\x4a\x92\xbe\x96\x5e\x71\x61\x4e\x66\x49\xaa\x31\x2a\x4f\x37\x2b\xbf\xb4\x28\x2f\x31\x87\x4b\x3f\x27\x3f\x5d\x5f\x8b\x4b\xbf\x24\xb7\x80\x0b\x10\x00\x00\xff\xff\xa0\x04\x95\x56\x4e\x00\x00\x00")

func initRailsDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerignore,
		"init/rails/.dockerignore",
	)
}

func initRailsDockerignore() (*asset, error) {
	bytes, err := initRailsDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/.dockerignore", size: 78, mode: os.FileMode(420), modTime: time.Unix(1466784924, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRailsDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x50\xbb\x4e\xc4\x30\x10\xec\xfd\x15\x2b\xd1\x5f\x7a\x5a\x24\xa8\xe0\x50\x24\x0a\xba\xf3\x39\xeb\x60\xe2\xd8\x96\x1f\x27\xf2\xf7\x6c\xd6\x09\x21\xa7\xa4\xca\x3c\xec\x99\xf1\x73\x7b\x7e\x05\xe5\xdd\xcd\xff\x34\x51\x1a\x9b\x84\x78\x20\x1c\x26\xf0\xce\x4e\x90\xbf\x10\xb4\xb1\x98\xc0\x21\x76\xd8\x81\xf6\x11\xae\xc5\x75\x16\xc1\xb8\x94\xa5\xb5\xe4\x2f\x4e\xf9\x71\x44\x97\xd9\x7f\x43\xd7\xf9\xd8\x28\xa9\x08\x58\xe3\xc8\xa9\x61\xf2\x05\x2e\xcb\xc1\x20\xd5\x20\x7b\xbc\xcc\x64\x84\x1e\xc7\x24\x9e\xce\xef\x9f\xf0\x82\xe3\x9c\x05\xfc\x35\x32\x84\x66\x61\x76\xf2\xc9\x7a\x35\xec\x64\x66\xa8\x06\xbb\x76\xe9\xec\xfa\xcf\x88\xf6\xe3\xed\xbe\xff\x3a\xf8\xbb\xa4\x7c\x3c\x58\xa6\x84\x39\x3d\x86\x88\xb4\x33\xfc\x15\x6a\xe5\x80\x4b\x61\x0e\x5a\x71\x55\xe9\x51\xb5\xe9\xb7\x2d\x15\x57\x2d\x94\xab\x35\x6a\xd3\x2a\xae\xda\x8c\x6b\x60\xd5\x36\xcc\xe5\x23\x85\x1c\x14\x5a\x47\xcc\xfd\x23\xd2\x10\xaf\xf9\x9f\x4e\xd7\x6b\x4f\x7c\x9b\xf8\x0d\x00\x00\xff\xff\x08\xae\x24\x4e\xf0\x01\x00\x00")

func initRailsDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerfile,
		"init/rails/Dockerfile",
	)
}

func initRailsDockerfile() (*asset, error) {
	bytes, err := initRailsDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/Dockerfile", size: 496, mode: os.FileMode(420), modTime: time.Unix(1466784924, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRailsDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\x03\x32\x73\x12\x93\x52\x73\x8a\x41\x82\x0a\x0a\xba\x0a\xc9\xf9\x79\x65\xf9\x15\x7a\x05\xf9\x45\x25\x7a\x26\x26\xc6\x7a\x05\x45\xf9\x25\xf9\xc9\xf9\x39\xb6\x25\x39\xc5\xb8\x95\x54\x54\xda\x96\x14\x95\xa6\x02\x15\x80\x44\xe1\x86\x59\x18\x58\x99\x18\x18\x18\x40\x79\x40\xb5\x20\xae\x21\x17\x20\x00\x00\xff\xff\xc0\xe1\x22\xef\x84\x00\x00\x00")

func initRailsDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerComposeYml,
		"init/rails/docker-compose.yml",
	)
}

func initRailsDockerComposeYml() (*asset, error) {
	bytes, err := initRailsDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/docker-compose.yml", size: 132, mode: os.FileMode(420), modTime: time.Unix(1466784924, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRubyDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\xd7\x4b\xce\xcf\x2b\xcb\xaf\x00\x32\x52\xf3\xca\x80\x64\x7a\x66\x09\x17\x20\x00\x00\xff\xff\xc9\x68\x92\x70\x1e\x00\x00\x00")

func initRubyDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerignore,
		"init/ruby/.dockerignore",
	)
}

func initRubyDockerignore() (*asset, error) {
	bytes, err := initRubyDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/.dockerignore", size: 30, mode: os.FileMode(420), modTime: time.Unix(1466784924, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRubyDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xcd\x4e\xc0\x20\x10\x84\xef\x3c\xc5\x26\xde\xcb\x43\x98\xe8\x49\x6b\x9a\x78\xf0\x56\x0a\x4b\x6d\x0a\xbb\x84\x9f\x46\xde\x5e\x8a\x35\xb1\x72\x62\x67\xbf\x61\x86\xa7\x69\x7c\x01\xcd\x74\xf0\x97\x8c\x65\xa9\x42\x3c\xb4\x31\x54\x60\x72\x15\xf2\x27\x82\xdd\x1c\x26\x20\x44\x83\x06\x2c\x47\x58\x0a\x19\x87\xb0\x51\xca\xca\xb9\xc6\x17\xd2\xec\x3d\x52\xee\xfc\x81\x64\x38\x4a\xad\x74\x1b\xdc\x46\x8d\xb4\x50\xb9\xc0\x7c\x19\x83\xd2\xbb\x5a\x71\x3e\xc5\x08\x2b\xfa\x24\x1e\xc7\xb7\x0f\x78\x46\x7f\x66\x41\x3f\x52\x85\x20\x2f\xe5\xb6\x1e\x1c\xeb\xfd\xb6\xee\x4a\xab\xd1\xa9\x5b\x7a\xa7\xfe\x2a\x62\x7a\x7f\xfd\xdf\xff\xf7\xc3\x67\xf7\x88\x29\x03\xdb\x7e\x6f\xde\x9f\xe0\xa1\xbf\x23\xbe\x03\x00\x00\xff\xff\x8b\xae\xa0\xae\x2a\x01\x00\x00")

func initRubyDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerfile,
		"init/ruby/Dockerfile",
	)
}

func initRubyDockerfile() (*asset, error) {
	bytes, err := initRubyDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/Dockerfile", size: 298, mode: os.FileMode(420), modTime: time.Unix(1466784924, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRubyDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8c\xc1\x0a\x83\x30\x0c\x86\xef\x3e\x45\xf0\x6e\xe9\x98\x87\x21\xf8\x30\x5a\x03\xca\xa2\x29\x69\x3a\xed\xdb\x2f\x85\x6d\xb7\xdd\xfa\xf5\xff\xf2\x9d\x38\x0f\x0d\xc0\x9c\x37\x5a\x06\x70\xf6\x0c\xbc\xef\xd3\x61\x80\x61\x65\x68\x71\xd9\x14\x16\x0e\x4f\x94\xce\xa6\xc8\x09\x5d\xd9\x09\xce\x4d\x57\x28\x9c\x05\x92\x4e\xa2\x39\x7e\x0f\x5b\x6b\xd0\x34\x23\xa5\x1a\x06\xe8\x6c\x38\x5e\x7c\xb9\xc8\xa2\xae\xef\xef\x2e\x0a\x2b\x07\xa6\x51\x29\xfd\x57\xae\x32\xaa\x64\x34\xa1\xfe\xfe\x62\x0f\x3f\xf4\xde\xfb\x0f\x99\x5b\xf1\xd6\xbc\x03\x00\x00\xff\xff\xae\x01\x4e\xf5\xc8\x00\x00\x00")

func initRubyDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerComposeYml,
		"init/ruby/docker-compose.yml",
	)
}

func initRubyDockerComposeYml() (*asset, error) {
	bytes, err := initRubyDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/docker-compose.yml", size: 200, mode: os.FileMode(420), modTime: time.Unix(1466784924, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initSinatraDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\xd7\x4b\xce\xcf\x2b\xcb\xaf\x00\x32\x52\xf3\xca\x80\x64\x7a\x66\x09\x17\x20\x00\x00\xff\xff\xc9\x68\x92\x70\x1e\x00\x00\x00")

func initSinatraDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerignore,
		"init/sinatra/.dockerignore",
	)
}

func initSinatraDockerignore() (*asset, error) {
	bytes, err := initSinatraDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/.dockerignore", size: 30, mode: os.FileMode(420), modTime: time.Unix(1466784924, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initSinatraDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xc1\x6e\x84\x20\x10\x86\xef\x3c\xc5\x24\xbd\xcb\x43\x34\x69\x4f\xad\x8d\x49\x0f\xbd\x49\x61\x70\x89\x30\x43\x00\xcd\xfa\xf6\x8b\xac\x9b\xac\xeb\x49\xbe\xf9\x86\xff\xe7\x63\xe8\xbf\x40\x33\xad\x7c\x95\xd9\x91\x2a\x49\x09\xf1\x56\x49\xdc\x80\xc9\x6f\x50\x2e\x08\xd6\x79\xcc\x40\x88\x06\x0d\x58\x4e\xf0\xbf\x90\xf1\x08\x8e\x72\x51\xde\x57\x7f\x21\xcd\x21\x20\x95\xe6\xaf\x48\x86\x93\xd4\x4a\xd7\x83\x77\x54\x4d\x0b\x1b\x2f\x30\x1e\x8b\x51\xe9\x59\x4d\x38\xee\x30\xc1\x84\x21\x8b\xf7\xfe\xe7\x0f\x3e\x31\xec\x59\xd0\x3e\xa9\x62\x94\x07\x39\x8d\x3b\xcf\x7a\x3e\x8d\x1b\xa9\x35\x9a\x75\x4a\x6f\xd6\x33\x11\xc3\xef\xf7\x6b\xff\xc7\x83\xf7\xee\x09\x73\x01\xb6\xed\xbf\xee\xde\x83\xbb\x76\x8f\xb8\x05\x00\x00\xff\xff\x9c\x51\x49\xbe\x2d\x01\x00\x00")

func initSinatraDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerfile,
		"init/sinatra/Dockerfile",
	)
}

func initSinatraDockerfile() (*asset, error) {
	bytes, err := initSinatraDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/Dockerfile", size: 301, mode: os.FileMode(420), modTime: time.Unix(1466784924, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initSinatraDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\x03\x32\x73\x12\x93\x52\x73\x8a\x41\x82\x0a\x0a\xba\x0a\xc9\xf9\x79\x65\xf9\x15\x7a\x05\xf9\x45\x25\x7a\x26\x26\xc6\x7a\x05\x45\xf9\x25\xf9\xc9\xf9\x39\xb6\x25\x39\xc5\xb8\x95\x54\x54\xda\x96\x14\x95\xa6\x02\x15\x80\x44\xe1\x86\x59\x18\x58\x99\x18\x18\x18\x40\x79\x40\xb5\x20\xae\x21\x17\x20\x00\x00\xff\xff\xc0\xe1\x22\xef\x84\x00\x00\x00")

func initSinatraDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerComposeYml,
		"init/sinatra/docker-compose.yml",
	)
}

func initSinatraDockerComposeYml() (*asset, error) {
	bytes, err := initSinatraDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/docker-compose.yml", size: 132, mode: os.FileMode(420), modTime: time.Unix(1466784924, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initUnknownDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\x4b\xcd\x2b\xe3\xd2\x4b\xcf\x2c\xe1\x02\x04\x00\x00\xff\xff\x9c\x10\x28\x7b\x0a\x00\x00\x00")

func initUnknownDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initUnknownDockerignore,
		"init/unknown/.dockerignore",
	)
}

func initUnknownDockerignore() (*asset, error) {
	bytes, err := initUnknownDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/unknown/.dockerignore", size: 10, mode: os.FileMode(420), modTime: time.Unix(1466784924, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initUnknownDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x0b\xf2\xf7\x55\x28\x4d\x2a\xcd\x2b\x29\xb5\x32\x34\xd3\x33\x30\xe1\xe2\x72\xf6\x0f\x88\x54\xd0\x53\xd0\x4f\x2c\x28\xe0\x02\x04\x00\x00\xff\xff\xf1\xa3\x65\xfc\x1f\x00\x00\x00")

func initUnknownDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initUnknownDockerfile,
		"init/unknown/Dockerfile",
	)
}

func initUnknownDockerfile() (*asset, error) {
	bytes, err := initUnknownDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/unknown/Dockerfile", size: 31, mode: os.FileMode(420), modTime: time.Unix(1466784924, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initUnknownDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x4d\xcc\xcc\xb3\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\xe3\x02\x04\x00\x00\xff\xff\xa6\xe1\xc1\x85\x11\x00\x00\x00")

func initUnknownDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initUnknownDockerComposeYml,
		"init/unknown/docker-compose.yml",
	)
}

func initUnknownDockerComposeYml() (*asset, error) {
	bytes, err := initUnknownDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/unknown/docker-compose.yml", size: 17, mode: os.FileMode(420), modTime: time.Unix(1466784924, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9a\x5b\x6f\xe3\x46\xd2\x86\xaf\xad\x5f\xc1\x18\x48\x20\x7f\x70\x64\x9e\x0f\x06\x72\x93\x99\x7c\x40\x2e\x36\x01\x72\xb8\x58\xac\x17\x01\x0f\x4d\x2f\x11\x5b\xf2\x4a\x72\x62\xcf\x60\xfe\xfb\xd6\xd3\xd5\xb4\x64\x89\x92\x3d\x3e\x60\x66\x0f\x03\x70\x44\x36\xbb\xab\xab\xba\xab\xde\x7e\xab\xe8\x93\x13\xef\xcd\xac\x31\xde\xb9\x99\x9a\x79\xb9\x34\x8d\x57\xdd\x7a\xe7\xb3\xaf\xab\x6e\xda\x94\xcb\x72\x32\x92\x0e\x8b\xd9\xf5\xbc\x36\x8b\x53\xee\x97\xe6\xf2\xea\x42\xfa\x2d\x4e\xba\x69\xb7\x3c\x99\x97\xdd\xc5\xe2\x64\xd2\xcc\xea\xdf\xcd\xbc\x3b\x9f\xce\xe6\x66\x67\xaf\xb7\xb6\x53\xdb\x5d\xec\xee\xa2\x72\xbe\xae\x67\x97\x57\xb3\x85\x99\xdc\x5e\x5e\x0c\x75\xbd\xae\x6e\x1f\x9e\x92\x4e\xfb\x67\xa4\xc7\xa3\x26\x5c\x74\xd3\x72\x39\x2f\x1f\x9c\xb3\xef\xb7\x77\xda\xbe\xd3\xa3\x66\xbe\x9e\xfe\x3e\x9d\xfd\x39\x7d\x70\xe6\xbe\xdf\xde\x99\xfb\x4e\x0f\xcd\x7c\x77\x37\x39\x9f\xf1\xe6\xed\x8f\xde\x0f\x3f\xfe\xe2\x7d\xf7\xf6\xfb\x5f\xbe\x18\x8d\xae\xca\xfa\xf7\xf2\xdc\xac\xfa\x8f\x46\x9d\x08\x9a\x2f\xbd\xf1\xe8\xe0\xb0\xba\x95\x96\x43\xb9\x41\xfa\xdc\x2c\x16\x27\xe7\xef\xba\x2b\x1a\xda\xcb\x25\x3f\xdd\x4c\xff\x3f\xe9\x66\xd7\xcb\xee\x82\x87\x99\x1d\x70\x55\x2e\xff\x71\x82\xe6\xdc\xd0\xb0\x58\xce\xbb\xe9\xb9\x7d\xb7\xec\x2e\xcd\xe1\xe8\x68\x34\x6a\xaf\xa7\xb5\xe7\x5c\xf3\x27\x53\x36\x63\x6e\xbc\xbf\xfd\x9d\x69\x8f\xbd\x69\x79\x69\x3c\x1d\x76\xe4\x8d\xfb\x56\x33\x9f\xcf\xe6\x47\xde\xfb\xd1\xc1\xf9\x3b\xfb\xe4\x9d\x7e\xe3\xa1\xd5\xe4\x07\xf3\x27\x42\xcc\x7c\x6c\xd5\xe6\xf9\xdb\xeb\xb6\x95\x67\xc4\x1e\x1d\x8d\x0e\xba\xd6\x0e\xf8\xe2\x1b\x6f\xda\x5d\x20\xe2\x60\x6e\x96\xd7\xf3\x29\x8f\xc7\x9e\x98\x34\xf9\x0e\xe9\xed\xf8\x10\x41\xde\x97\xff\x3c\xf5\xbe\xfc\xe3\x50\x35\xb1\x73\x89\x8c\x0f\xa3\xd1\xc1\x1f\xe5\xdc\xab\xae\x5b\x4f\xe7\xd1\x49\x46\x07\xbf\xa9\x3a\xdf\x78\xdd\x6c\xf2\x66\x76\x75\x3b\xfe\x4a\xfa\x1c\x8b\x6e\x32\xaa\xbe\xf8\xae\xd7\x74\xf2\xe6\x42\xf6\x69\x2c\xe6\xbf\x90\x3e\x88\x51\xf9\x3b\x04\x49\x47\xd5\xdb\x35\x8a\x5a\x93\x6f\x51\x7d\x7c\x74\x4c\x8f\x91\xbc\x5b\xde\x5e\x19\xaf\x5c\x2c\xcc\x92\x25\xbf\xae\x97\x48\xb1\xf6\xb9\xfd\x90\x69\xa6\xed\xcc\xf3\x66\x8b\xc9\xff\xcb\xb6\x7e\x2f\x0f\x77\xe3\xdc\x16\xf6\xed\x6b\x12\xec\x1e\xca\x3f\xdd\xc6\xd1\xc1\xa2\x7b\x67\x9f\xbb\xe9\x32\x8d\x47\x07\x97\x60\x95\x77\x27\xf4\x2f\xf2\x68\x1b\x7f\x11\x0f\xf1\x70\x93\x09\x77\xcc\x63\x5d\x65\xdc\x76\x9b\x73\x1d\x79\x3f\xc8\x14\xe3\x23\x37\x03\x73\x3a\x2b\xdb\x6e\xc2\xec\x32\x78\xf7\xd8\x9f\x45\x1d\x19\x6b\xb5\xb9\x3f\x14\x45\xf7\x0e\x45\x57\x19\xba\xa6\xf9\x7d\x01\x98\xf6\x90\x00\x8c\x13\x19\x77\x86\x6e\x49\x70\xd6\xef\x16\xf2\xfd\xe2\x6d\x37\x17\x11\xd5\x6c\x76\xb1\x3e\xba\xbc\x58\x3c\x60\xf9\xed\x42\x0d\x17\x7c\x29\x6b\xf3\xfe\xc3\xda\x68\xe7\x12\x78\xf9\x6f\x40\xcd\x4f\x80\xf9\xdb\x35\xc8\x12\x1f\x57\xa7\x18\x1f\x9e\xdd\x04\xed\xd9\x4d\x5e\x9d\xdd\xf8\xb9\x5c\xbe\xbb\x8a\xb3\x9b\xd4\x48\xbb\x6b\x6b\xa5\x4f\x13\xca\x95\x9d\xdd\xc4\xd2\x37\x2c\xcf\x6e\xea\x46\xef\x6b\xe9\x1b\xcb\x65\x92\xfb\x7d\x6a\x19\x5f\xcb\xb8\x90\x7b\xb9\xca\x56\x65\x45\xd2\x27\x91\xab\x8d\xa4\x5d\xe4\xe4\xd2\x96\xc6\x67\x37\x99\xdc\xa7\xa9\xce\x5d\x88\x8c\x4c\xc6\xc7\xd2\x56\x48\xdf\x4a\xee\x0b\x79\x97\xc8\x6f\x16\x48\x3f\xb9\x62\xa3\xfd\x99\xbb\x94\x7e\x51\xa0\x7a\xc5\x32\x4f\x94\xe9\xbc\x95\xdc\x57\x22\x3b\x14\x3b\xc2\x56\xfb\xe4\x4e\xbf\x08\xdd\x32\xfd\x4d\xc4\x96\xc4\xad\x43\xec\xc6\x85\x32\xae\xca\x54\x3f\x5f\xda\x02\x7f\xb5\x3e\xac\x07\x57\xc9\xb3\xf4\x2b\xc4\xf6\x24\x55\x9d\xee\xd6\xd0\x3f\xec\x21\x72\x70\x13\x5c\x04\x0f\x21\x63\x1f\xe7\x6b\xc8\x2a\x90\x30\xbc\x97\xc7\xf2\xe6\x70\xd7\xe1\x7f\x28\x6f\x8f\xee\xc2\x6f\x70\x3c\x1a\xfc\x9f\x05\x8e\x75\x0d\x2c\x72\xdc\xc1\xf3\x3e\xfd\x1f\x42\xc1\x3b\xf0\xb2\xf0\x23\xc2\x36\x5c\xf9\x3d\x41\x7e\xea\xed\x31\xc1\x23\x96\x4f\xbd\x2c\x3f\xf6\x08\xca\xd3\xf5\x98\x1d\xc7\xa1\x7f\x64\xdb\x09\xb5\x53\x0d\xc5\x5f\xa7\xdd\xcd\x38\x88\xd3\x34\xcb\xe3\x22\x8c\x8f\x3d\xff\x48\x50\xb6\x64\xf2\xaf\xac\xa5\xef\xad\x79\xa7\x9e\xb3\x12\xcd\x4e\xed\xff\x1f\xee\xd6\xbe\x3c\xde\x17\x46\x1c\x8c\x4f\x0a\xa2\xb4\x16\x47\x91\xfb\xaa\x52\x67\xa9\xc5\x79\x22\x5f\x9d\xcb\xc8\xbb\x56\x1c\x31\x48\xd4\x79\x9b\x40\x9d\x92\xc0\x48\x4a\x75\xc8\x52\x64\x19\x5f\x65\xf0\xec\x4b\x7b\x55\x6a\x30\x45\x04\xa1\x8c\x4b\x91\x45\x20\xe6\x1a\x34\x81\x73\xf4\x96\xa0\xcb\x54\x87\xc6\x05\x5a\x28\x73\x94\xd2\x56\xc6\x1a\x8c\x51\xad\x7a\x14\xf2\xae\x95\x77\x99\xc8\xcd\x2a\x0d\x46\x3f\x71\x41\xde\x68\xf0\x63\x4f\x24\xe3\x12\xe9\x17\x10\xa8\xd2\x2f\x27\x90\x09\x36\x6c\x12\x39\xa1\xcc\xd3\xfa\x0a\x06\xd8\x5b\xf8\x1a\x5c\xd8\x4b\x60\x56\x32\xb6\x90\xfe\xb5\xaf\xba\x64\xa9\xea\x9d\xcb\x7d\x8b\xee\xe8\xc7\x3a\xc9\xbc\x99\x5c\x81\xb4\xd5\xd2\x56\x61\x1b\xeb\x21\x6d\x15\x7a\xc5\x1a\xe0\xcc\xd1\x16\x0a\x12\x71\xac\x40\xd2\xf0\xcc\xbb\x48\xc1\x89\xf7\xcc\x01\x28\x94\x85\xee\x59\xc2\xba\x02\x48\xae\x0d\x80\x61\xbd\xb0\x39\x34\x0a\x60\xcc\x8b\x5d\x4d\xa2\xbf\xac\x4b\x25\x36\xd6\xb5\x02\x18\xb6\x07\xf4\xcd\x74\x6f\x0a\xa3\x76\x1b\x99\xbb\x68\x75\x1d\xf2\x50\xe7\x29\x6a\x95\xdd\xca\x6f\x94\x28\x28\x32\x1e\x40\x4b\xdd\x3a\x30\x3f\xe0\xca\xfe\xd3\xc7\xb8\x79\xe8\x83\x1f\xf8\xa9\xfa\x11\x7d\x4d\xe1\xfc\xa7\x54\xd0\xc5\xe7\x58\x3f\xe6\x32\x8d\x02\xa8\xdd\x2f\x7c\x25\xd7\x71\xec\x79\x56\xeb\x9e\x63\x7f\x99\xaa\x0e\xf8\x51\x24\x63\xf2\x54\xe5\xb0\x4f\x51\xa4\xba\xe2\x9b\x69\xa9\x7e\x00\x30\x02\x96\xe8\xeb\x1b\xf5\x51\xd6\x3d\x49\x54\x1f\xfc\xa2\x72\xf7\x00\x69\xe8\x7c\x3b\x71\xf7\x76\xff\x2a\xb5\x0d\x99\x4d\xa4\x00\xce\x7e\x37\x1c\x0c\xd8\xeb\xfc\x99\x35\x8f\x52\x5d\x6b\xe6\x0e\xa5\x6f\x9e\xa8\x8f\x05\xb1\xce\x1d\x67\xfa\x9e\x18\xe2\x3d\x87\x11\x7e\xc6\xc1\xc3\x9e\x17\xce\x3f\xf0\x01\xe4\x72\x50\x60\x3f\x7e\xcb\x9a\xf8\xcd\x36\xc0\xe3\x1b\xe8\xc3\x7e\x5a\xdf\xe2\x7d\xf0\x10\xc0\x03\x0f\xcf\x86\x77\x84\x6c\x82\xfb\xea\xcd\x5e\x64\xa7\xc3\x13\x70\x7d\x4d\xed\x57\x40\xf5\x75\xdd\x1d\xa4\xc7\x45\xfa\xf9\x60\xfa\x1b\x4d\xc0\xfe\x7a\x79\xf1\x24\x64\xef\xa9\x47\x4c\xb4\x85\x8a\xc0\xd0\x1c\x90\x3a\xce\x57\x94\x09\x0f\x85\xb2\x80\x7c\xbc\x6f\x90\x17\x29\x02\x80\xb6\x81\xfc\x16\x91\xbe\xe3\x39\x47\x6e\xa0\xc8\x01\xda\xf7\x88\xcf\x2f\xe8\x60\xd1\x0e\x7d\x12\xbd\x27\xc2\x40\x0c\xdf\x3d\xc7\x44\x8b\x6b\x03\x8d\xb9\xea\x74\xd5\x27\x76\xfd\x42\xf7\xdb\xcb\x04\x05\xaa\x54\xdb\xb9\x07\x81\x2d\xea\x12\xc1\xb1\x5e\x44\xa9\x3d\x61\x1c\x05\x02\x41\xfc\x50\x75\xb0\xe8\x20\xed\x26\x50\x24\x49\xd0\xcd\x21\x6d\xe1\xee\xfb\x2b\xf6\xd5\x06\x7e\x2b\x87\xae\x36\xea\x38\x59\x32\x7d\xde\x8c\x4c\x4e\x0c\x64\x87\xa1\x22\x2c\xc8\xf5\x30\xf5\x5a\x6d\xf2\xb3\xe3\x73\x25\x6a\x33\x4a\xb7\x33\xfa\xbd\xd1\xba\x12\xf4\x84\x98\xdd\x32\xe8\x15\x22\x77\xc8\x1e\x17\xc1\x41\x14\x7e\xea\x08\xbe\xae\x6e\xff\xad\x72\x9b\x9d\x0e\x8d\x5e\xb9\xe6\x3b\x99\xaf\x54\x62\x97\x43\x6f\xd8\xfc\x44\x5f\xde\x90\xb2\xe6\xc6\x5b\x25\xbd\x01\x07\xde\x18\xfd\x68\xdf\x1d\xd6\xfd\x65\xdd\x76\x40\x7f\xe7\xb0\x91\xff\xd9\xf8\xeb\x93\x93\x88\x44\x8e\x90\xbc\x75\x5e\x6a\x1c\x79\x76\x49\x04\x30\x08\x1c\x42\xea\x80\x6c\xe0\xbe\x71\x04\x16\x02\x0c\xd9\x36\xb9\x7a\x35\x24\xa8\x28\x95\xb0\x43\x6c\xc8\x60\x39\x56\x2c\xa9\x6b\xdc\x51\xe3\x48\xbd\x25\x4f\x4e\x16\x59\x78\xee\x48\x29\xc7\x58\x26\x1e\x9b\x72\x65\x4a\xee\x53\x07\xf9\x24\x16\x69\xa1\x24\x0b\xd2\x84\xbe\x59\xac\x73\x41\xcc\x2d\xc1\x4b\x94\x70\xc7\xa1\xea\x6c\xc9\x66\xa0\xc7\x0b\xc4\x2f\x73\xc7\x09\x64\x98\x24\x86\x63\x90\x04\xa4\x4f\x2e\x42\x77\xcc\xe4\x91\x12\xe2\xb0\x56\x22\xc8\x31\x83\xfe\x41\xa1\x19\x7f\xe5\x2b\x21\x25\x2a\xb9\xaa\x42\x8f\x41\xa2\x91\xc8\x86\x3c\x43\x7a\x89\x5e\x63\x94\xec\x92\x84\x10\xbd\x51\xae\x95\x88\xd2\xe9\x1f\x90\x9c\xd5\xba\x1e\x79\xa3\x3a\xdb\xa4\xae\xd0\xbd\xc0\x5e\x3b\xaf\x23\xa1\xac\x61\x4f\x8e\x23\x97\xcc\xb0\xc7\xa0\x47\xeb\x12\xbb\x3e\x71\x80\x28\xfb\xad\xee\x09\xf2\x49\x5c\x6c\x95\x23\x70\x95\x8a\x50\x89\x2f\x76\x93\xf0\x80\x4c\x1c\xd3\x8c\x67\x4d\x48\x00\x21\xc0\xb4\x19\x57\x41\x29\x5d\x32\xc9\x3a\x27\x95\xa2\x11\x7b\xd3\x1a\x45\x3b\xf6\x8e\x36\xe6\x62\x6c\xe3\x10\x89\x64\xb1\x8e\x74\x5f\xb9\xc7\x07\xc3\x42\xe9\x4a\xe3\x92\xc2\xb4\x55\x9f\xc0\x3f\x48\x4c\xcb\xc0\x55\x4f\x22\x4d\x3a\xe8\xbb\x89\x74\xf8\x38\xc7\x7b\xd9\x1f\xf3\xe5\x6e\x52\x7d\x2f\x5a\x9e\x8b\x73\x1b\x94\xfa\xfe\x37\x89\x7d\x10\xf7\x51\x84\x7a\x48\xe5\x97\x87\xb7\x01\x3a\x1d\x16\x9f\xbc\x44\x72\x67\xfb\x33\xd9\x34\x61\x06\x3c\x90\x73\x13\xc6\x84\x12\x75\x12\xbf\x56\x68\xb1\x10\x67\x1c\x7b\xf5\x75\x3c\x79\x26\xf0\x46\xb8\xc3\x1c\xc9\xe9\x18\x43\xe8\xf9\xee\x40\x2e\x43\x75\x61\x60\x89\x5c\x98\xdc\x18\x57\x26\x94\x08\x2b\x60\x8f\x10\x04\x62\x08\xcd\x36\x71\x6e\x0b\x2b\x6f\x14\x0a\x08\x4f\x72\x45\x42\x9d\x3c\x9e\x62\xa3\x9d\x23\xd5\x83\x9b\xbc\x1b\x3d\xa9\x0d\xa0\x27\x79\xad\x85\x44\x5f\x7f\x81\x3c\x0e\x7a\xe0\x80\xda\x04\xec\x99\xba\x06\x39\x34\x19\x04\x79\x31\x04\x03\x36\x4d\x3d\x82\xf5\xa1\x40\x49\x5f\xee\x6d\x2d\xa5\x71\x79\x74\xbe\xaa\x25\x40\x1c\x38\x0e\xb0\x11\xc6\x6e\x6b\x36\xad\x86\x3c\x50\x4f\xa6\x41\xbd\x86\xd0\xa4\x6e\x12\x38\x9d\x39\x0e\xa8\x09\x61\x9b\x2d\xb0\xd6\x0e\xca\x72\x95\x55\xba\x1a\x06\x17\xb5\x10\xf6\x03\xe8\xf2\x33\xd5\x11\x58\x65\x4d\x5b\xa7\x13\xfd\x21\x42\x14\x65\x2d\x7c\xc6\x0a\x0b\xc0\x0d\x17\x70\x83\x5e\xc0\x59\x1b\x2b\x7c\xb4\x95\xb6\x15\x0e\xa2\xa8\x3d\x51\xa3\x62\x0d\x87\x20\x84\x39\x7c\x57\x04\x66\x8f\xea\xfc\x11\x64\xe9\xd9\xe4\x7f\x40\xd2\x06\x9c\x3c\x8a\xfa\x0f\x88\xf9\x78\x70\x79\x65\xe2\xbf\xcb\x98\x1e\x6a\xfc\x4f\xcd\xa3\x7e\xd6\x0f\xb7\xff\x6d\xd4\x7f\xc0\xec\xa7\x39\xf3\x80\xa0\x95\x2f\x0f\x7e\x62\xdf\xf6\xe4\x01\x19\x8f\x75\xe4\xdd\x76\xbc\xa8\x1f\xef\x30\xe4\x73\x49\x06\xee\xad\xc2\xf3\xf3\x81\xc0\xbd\x8b\xd7\xf2\x81\x74\x23\x1f\xa0\xe8\xde\xac\xf2\x01\xc0\x99\xc3\x90\x83\x07\x7e\x0b\x9f\xc5\xed\x01\xe3\xca\xdd\xdb\x82\x34\xb2\x0a\x3d\x50\x63\x07\xc8\x75\x7f\x48\xa6\x8e\xd3\xb9\x62\x6a\xe9\x78\xa8\x2d\x73\xb9\x82\x3c\x7a\xa0\xab\x21\x27\x88\xf4\xd0\x81\x27\x52\xf2\xa1\xb8\x6c\xb9\x75\xad\x65\x24\x0e\xba\xa2\xff\x9a\xe7\x0e\x3d\x0e\x84\xc4\x7d\xed\x83\x7b\x13\x5e\x36\x6c\x5a\xf7\x31\xc4\xe8\x3a\x71\x68\x50\x4a\xb2\x65\x36\xdf\xad\x53\xaa\x07\x36\x39\x41\x5f\xc4\x65\x6e\x3e\x46\x20\x97\x71\xb9\xd1\x5c\x83\xc3\xcc\xe6\x38\x99\xf2\xe1\xd0\xe5\x2d\xa1\x2b\xfe\xa3\x9f\x49\x35\xec\x29\xeb\x61\x17\xe5\xba\x26\x56\xae\x0d\x4c\x40\x56\xb2\x4c\x73\x18\x0e\x6a\xfb\xf5\xd0\x91\x8c\xc8\x85\x37\xeb\xc5\x5c\xb6\x50\x5e\x68\x3f\x0e\x60\x38\x3b\x7d\xd8\x4b\xbb\x8f\x81\xf6\x6d\x1d\x5f\x37\x2e\x3f\x80\xfc\x90\x27\x91\xb7\x30\xde\x1e\xee\xc6\x7d\xbc\x08\x95\x44\x70\x40\x43\x04\xd8\xd3\xa8\x52\xd8\xb2\x1f\x13\x8c\xb6\xa1\x13\xfd\xc9\xe3\x6c\x1e\x98\xa8\x0d\x96\xd3\xa7\xba\x2f\x7c\x80\x21\x07\x30\x2e\x1f\x80\x48\x58\xc8\x72\x76\xd2\x86\xce\xec\x11\xe5\x4a\x0e\x65\x9b\x7b\x34\xba\xc6\xbc\x63\x3d\xe9\xdb\x7f\xac\xc0\x57\x29\x25\x42\x5a\x36\xa1\x10\x32\xc3\xba\xf4\xbe\xc3\x87\x82\x1d\xb9\xc1\x56\xf0\xbc\x00\x10\xde\xcf\x10\xb6\xff\x82\xe8\x01\x0c\xfc\x98\x3c\x61\x97\xfa\xaf\x82\x7f\x03\xd9\x42\xe4\x07\x9f\x13\xfa\xfd\xaf\xfc\xfe\x9f\x5a\x7e\xdf\xb1\xcd\x2f\x10\xad\x43\x34\x7c\xf7\x1f\xf4\x3d\x10\xbb\x1f\x4f\xc6\xf7\x1b\xf6\x2a\x71\xfc\x59\x97\xe2\x7f\xd5\xbf\x68\x7c\x11\x4a\x6e\xa9\x76\xa3\x34\xdb\x44\x6b\x6d\xad\xd6\xf8\xf0\x3d\x7c\xdd\x8f\x87\xcf\x10\xb8\x0f\xc9\x31\x1f\xe9\x6d\xdc\x0e\xfb\xe6\x80\xca\x4f\xf3\xcb\x01\x41\x2b\x9f\x1c\xfc\xbb\xd1\x6d\x77\x1c\x90\xf1\x58\x57\xdc\x6d\xc7\x8b\xba\xe1\x0e\x43\x7a\x0f\xfc\xd4\x74\xfa\xde\x2a\x3c\x99\x4e\x43\x03\xa1\x6c\xfd\xdf\xcb\xf0\xf7\x0c\xb8\x12\x47\x4b\x7f\x8c\xe0\x96\xd4\x3c\x2a\xf7\xb7\x1b\xd0\x68\xea\x3c\x91\xab\x53\xe1\x9e\x1c\x41\xc8\xb2\xf5\x20\xf7\x37\x19\x16\xb6\xa9\x49\x45\xfa\x1b\x3b\x77\x0e\xdd\xdf\xf5\xec\x72\x69\x68\x6a\x19\xb9\x63\xa6\x56\x5b\x1e\xe3\xd2\x4f\xa7\x45\x5b\x62\xb6\xdd\x79\x1f\x2d\xda\x1a\xfe\x24\x4f\x7e\x2d\x5a\x34\x64\x41\x4f\x8b\x3e\x29\x2b\xfa\x57\x00\x00\x00\xff\xff\xd4\xda\x4e\x09\x00\x30\x00\x00")

func templatesGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesGo,
		"templates.go",
	)
}

func templatesGo() (*asset, error) {
	bytes, err := templatesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates.go", size: 24576, mode: os.FileMode(420), modTime: time.Unix(1468603699, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"init/rails/.dockerignore": initRailsDockerignore,
	"init/rails/Dockerfile": initRailsDockerfile,
	"init/rails/docker-compose.yml": initRailsDockerComposeYml,
	"init/ruby/.dockerignore": initRubyDockerignore,
	"init/ruby/Dockerfile": initRubyDockerfile,
	"init/ruby/docker-compose.yml": initRubyDockerComposeYml,
	"init/sinatra/.dockerignore": initSinatraDockerignore,
	"init/sinatra/Dockerfile": initSinatraDockerfile,
	"init/sinatra/docker-compose.yml": initSinatraDockerComposeYml,
	"init/unknown/.dockerignore": initUnknownDockerignore,
	"init/unknown/Dockerfile": initUnknownDockerfile,
	"init/unknown/docker-compose.yml": initUnknownDockerComposeYml,
	"templates.go": templatesGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"init": &bintree{nil, map[string]*bintree{
		"rails": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initRailsDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initRailsDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initRailsDockerComposeYml, map[string]*bintree{}},
		}},
		"ruby": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initRubyDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initRubyDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initRubyDockerComposeYml, map[string]*bintree{}},
		}},
		"sinatra": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initSinatraDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initSinatraDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initSinatraDockerComposeYml, map[string]*bintree{}},
		}},
		"unknown": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initUnknownDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initUnknownDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initUnknownDockerComposeYml, map[string]*bintree{}},
		}},
	}},
	"templates.go": &bintree{templatesGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

