// Code generated by go-bindata.
// sources:
// templates/init/django/.dockerignore
// templates/init/django/Dockerfile
// templates/init/django/docker-compose.yml
// templates/init/rails/.dockerignore
// templates/init/rails/Dockerfile
// templates/init/rails/docker-compose.yml
// templates/init/ruby/.dockerignore
// templates/init/ruby/Dockerfile
// templates/init/ruby/docker-compose.yml
// templates/init/sinatra/.dockerignore
// templates/init/sinatra/Dockerfile
// templates/init/sinatra/docker-compose.yml
// templates/init/unknown/.dockerignore
// templates/init/unknown/Dockerfile
// templates/init/unknown/docker-compose.yml
// templates/templates.go
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _initDjangoDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\x4b\xce\xcf\x2b\xcb\xaf\xe0\xd2\x4b\xcd\x2b\xe3\xd2\x4b\xcf\x2c\x01\x13\x99\xe9\x79\xf9\x45\xa9\x5c\x80\x00\x00\x00\xff\xff\x57\x31\x5f\xce\x1d\x00\x00\x00")

func initDjangoDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initDjangoDockerignore,
		"init/django/.dockerignore",
	)
}

func initDjangoDockerignore() (*asset, error) {
	bytes, err := initDjangoDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/django/.dockerignore", size: 29, mode: os.FileMode(420), modTime: time.Unix(1470074923, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initDjangoDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\xcd\xae\xd3\x30\x10\x85\xf7\x79\x8a\x91\x60\xdb\x66\xd1\x27\x40\x25\x2c\x40\xb4\x51\x28\x48\x5d\x21\xe3\x4c\x52\x17\xc7\x63\xfc\x03\x8d\x50\xdf\x9d\xb1\xd3\xd0\xe6\xde\xbb\xb8\xbb\xcc\xf1\xcc\x99\x6f\x4e\x3e\x34\xfb\xcf\x20\xc9\xfc\xa6\x4b\xd9\x9e\x85\xe9\xa9\x28\xde\x80\x43\xab\x85\x44\xc0\x8b\x18\xac\x46\x61\x2d\x08\xd3\xce\xa5\x75\x74\x46\x19\x20\x10\x04\xa1\x34\x39\x08\x27\x04\x35\x88\x1e\x93\x36\x52\x74\x70\xeb\x61\xaf\xba\xd9\x7f\xac\xb6\x07\x50\x1e\x84\xf6\x04\xd1\x63\x0b\x3f\x46\xe8\xa3\x51\x92\x9c\x01\x65\xf2\xfc\x02\x02\xde\x93\xfc\x89\xae\x53\x1a\x8b\x6a\xf7\x0d\xde\xd5\xf5\x03\x4c\x96\x66\xdf\x25\x54\xa2\x17\x06\x70\xb0\x61\x84\x2f\xd5\xb6\xa9\x0e\xdf\x3f\x55\x47\x68\xa3\x53\xa6\x87\x41\x18\xa6\x5c\xdb\x91\xd7\x0d\x5c\xb4\x1e\xfe\x28\xad\xf9\x60\x1f\x75\x48\x28\x69\xd8\x39\x72\x79\xc7\x83\x41\x47\x39\x19\x49\x3c\x4b\x46\x8f\x99\x39\xf1\x79\x30\x88\x2d\xdf\xd4\x71\x10\x56\x59\x36\xf1\x41\x68\x5d\x6c\xf7\xf5\x91\x8d\x7f\x45\xe5\x70\x40\x13\xfc\x3a\x5c\x02\x94\xcc\x5f\x3e\x55\x8b\xe6\xeb\x2e\xcd\x6e\xe6\x61\x58\xad\xa2\xed\x9d\x68\x31\xc9\x2f\x3c\xbb\x67\xce\xaf\xa0\x93\xa4\x35\x67\xc4\x16\x41\xc9\x89\xef\xed\x5f\x8e\xf6\x5a\x4e\xd2\x04\xb7\x90\xe6\xae\x5b\xda\xd7\xb9\x65\xae\xa7\xf7\x7b\xac\xf9\xf9\x7f\x39\x81\x8f\xe1\x44\x66\xb3\xc8\xfe\x81\x83\x4f\x35\xa4\x8c\x8d\xf7\x0b\x12\x3c\xff\x91\x00\xd4\xe5\xef\xf4\xcb\xf3\x9e\x75\xf6\x2f\xfe\x05\x00\x00\xff\xff\x22\xcb\xe6\x65\xb5\x02\x00\x00")

func initDjangoDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initDjangoDockerfile,
		"init/django/Dockerfile",
	)
}

func initDjangoDockerfile() (*asset, error) {
	bytes, err := initDjangoDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/django/Dockerfile", size: 693, mode: os.FileMode(420), modTime: time.Unix(1470074923, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initDjangoDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8d\xc1\xaa\xc2\x30\x10\x45\xf7\xfd\x8a\xfc\xc0\xcb\x8b\x36\x82\x04\xba\x92\xae\xdc\xa9\x1b\x57\x92\xb4\x43\x09\xa6\x99\x92\x4c\x6b\xfd\x7b\x13\x68\xbb\x10\xdc\xcd\xbd\xf7\x70\xe6\x05\x46\x15\x8c\x99\xd1\xba\x56\x31\x9e\x4e\xf0\x93\x0d\xe8\x7b\xf0\x94\x17\xc6\xfe\xd8\xb5\x3e\x5d\xea\xdb\xe3\x5c\xdf\x53\xe1\xb4\x01\x17\xd7\xa9\x41\x3f\xe1\xcc\x07\x0c\xc4\xa5\x2c\xf9\x10\x90\xb0\x41\x57\x91\x8b\xbf\x91\xf9\x5d\x51\x18\x21\xdb\xac\x7f\x6e\xb2\x56\x93\x36\x3a\xe6\x3e\xd3\x5b\x7f\x14\x4a\x0a\x21\x96\x94\x1c\x39\xee\x8a\x15\xcf\x98\xed\x75\x07\x6a\xf9\xf5\x3f\x60\xa4\x2e\x40\xfc\x16\x1d\x64\xb9\x2f\x3e\x01\x00\x00\xff\xff\x25\x21\x30\xfe\xf3\x00\x00\x00")

func initDjangoDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initDjangoDockerComposeYml,
		"init/django/docker-compose.yml",
	)
}

func initDjangoDockerComposeYml() (*asset, error) {
	bytes, err := initDjangoDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/django/docker-compose.yml", size: 243, mode: os.FileMode(420), modTime: time.Unix(1470074923, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRailsDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\xd7\x4b\xce\xcf\x2b\xcb\xaf\x00\x32\x52\xf3\xca\x80\x64\x7a\x66\x09\x97\x7e\x4a\x92\xbe\x96\x5e\x71\x61\x4e\x66\x49\xaa\x31\x2a\x4f\x37\x2b\xbf\xb4\x28\x2f\x31\x87\x4b\x3f\x27\x3f\x5d\x5f\x8b\x4b\xbf\x24\xb7\x80\x0b\x10\x00\x00\xff\xff\xa0\x04\x95\x56\x4e\x00\x00\x00")

func initRailsDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerignore,
		"init/rails/.dockerignore",
	)
}

func initRailsDockerignore() (*asset, error) {
	bytes, err := initRailsDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/.dockerignore", size: 78, mode: os.FileMode(420), modTime: time.Unix(1470074923, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRailsDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x50\x3d\x6f\x83\x30\x10\xdd\xfd\x2b\x4e\xea\x1e\xf6\xae\x95\xda\xa9\x4d\x85\xd4\xa1\x5b\x1c\x73\xa6\x2e\xc6\x67\xf9\x23\x0a\xff\xbe\x87\x0d\x25\x44\x61\xe2\x7d\x70\xef\x3d\x5e\xdb\xe3\x3b\x28\x72\x17\xba\x36\x41\x1a\x1b\x85\x78\x62\xec\x27\x20\x67\x27\x48\x3f\x08\xda\x58\x8c\xe0\x10\x3b\xec\x40\x53\x80\x73\x76\x9d\x45\x30\x2e\x26\x69\x2d\xfb\xb3\x53\x34\x8e\xe8\x52\xf1\x5f\xd0\x75\x14\x1a\x25\x15\x03\x6b\x1c\x3b\x35\x4c\x94\xe1\xb4\x7c\xe8\xa5\x1a\x64\x8f\xa7\x99\x0c\xd0\xe3\x18\xc5\xcb\xf1\xf3\x1b\xde\x70\x9c\xb3\xa0\x3c\x8d\xf4\xbe\x59\x98\x9d\x7c\xb0\xa4\x86\x9d\x5c\x18\xae\x51\x5c\xbb\xf4\xe2\xba\x65\x44\xfb\xf5\x71\xdf\x7f\x1d\xfc\x9b\x63\x7a\x3c\x58\xc6\x88\x29\x3e\xfb\x80\xbc\xd3\xff\x17\x6a\xe5\x80\x4b\xe1\x12\xb4\xe2\xaa\xf2\x4f\xd5\xa6\xdf\xb6\x54\x5c\x35\x9f\xcf\xd6\xa8\x4d\xab\xb8\x6a\x33\xae\x81\x55\xdb\xf0\x6d\x79\xbc\xa2\x82\xc0\x81\x0f\xca\xad\x83\xe6\x2d\x01\x79\x14\xe9\xf2\xce\x97\x6a\xc4\xa1\x5c\x16\x7f\x01\x00\x00\xff\xff\x3d\xf9\xb5\xe2\xfc\x01\x00\x00")

func initRailsDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerfile,
		"init/rails/Dockerfile",
	)
}

func initRailsDockerfile() (*asset, error) {
	bytes, err := initRailsDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/Dockerfile", size: 508, mode: os.FileMode(420), modTime: time.Unix(1470928689, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRailsDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\x03\x32\x73\x12\x93\x52\x73\x8a\x41\x82\x0a\x0a\xba\x0a\xc9\xf9\x79\x65\xf9\x15\x7a\x05\xf9\x45\x25\x7a\x26\x26\xc6\x7a\x05\x45\xf9\x25\xf9\xc9\xf9\x39\xb6\x25\x39\xc5\xb8\x95\x54\x54\xda\x96\x14\x95\xa6\x02\x15\x80\x44\xe1\x86\x59\x18\x58\x99\x18\x18\x18\x40\x79\x40\xb5\x20\xae\x21\x17\x20\x00\x00\xff\xff\xc0\xe1\x22\xef\x84\x00\x00\x00")

func initRailsDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerComposeYml,
		"init/rails/docker-compose.yml",
	)
}

func initRailsDockerComposeYml() (*asset, error) {
	bytes, err := initRailsDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/docker-compose.yml", size: 132, mode: os.FileMode(420), modTime: time.Unix(1470074923, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRubyDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\xd7\x4b\xce\xcf\x2b\xcb\xaf\x00\x32\x52\xf3\xca\x80\x64\x7a\x66\x09\x17\x20\x00\x00\xff\xff\xc9\x68\x92\x70\x1e\x00\x00\x00")

func initRubyDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerignore,
		"init/ruby/.dockerignore",
	)
}

func initRubyDockerignore() (*asset, error) {
	bytes, err := initRubyDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/.dockerignore", size: 30, mode: os.FileMode(420), modTime: time.Unix(1470074923, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRubyDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xcd\x4e\xc0\x20\x10\x84\xef\x3c\xc5\x26\xde\xcb\x43\x98\xe8\x49\x6b\x9a\x78\xf0\x56\x0a\x4b\x6d\x0a\xbb\x84\x9f\x46\xde\x5e\x8a\x35\xb1\x72\x62\x67\xbf\x61\x86\xa7\x69\x7c\x01\xcd\x74\xf0\x97\x8c\x65\xa9\x42\x3c\xb4\x31\x54\x60\x72\x15\xf2\x27\x82\xdd\x1c\x26\x20\x44\x83\x06\x2c\x47\x58\x0a\x19\x87\xb0\x51\xca\xca\xb9\xc6\x17\xd2\xec\x3d\x52\xee\xfc\x81\x64\x38\x4a\xad\x74\x1b\xdc\x46\x8d\xb4\x50\xb9\xc0\x7c\x19\x83\xd2\xbb\x5a\x71\x3e\xc5\x08\x2b\xfa\x24\x1e\xc7\xb7\x0f\x78\x46\x7f\x66\x41\x3f\x52\x85\x20\x2f\xe5\xb6\x1e\x1c\xeb\xfd\xb6\xee\x4a\xab\xd1\xa9\x5b\x7a\xa7\xfe\x2a\x62\x7a\x7f\xfd\xdf\xff\xf7\xc3\x67\xf7\x88\x29\x03\xdb\x7e\x6f\xde\x9f\xe0\xa1\xbf\x23\xbe\x03\x00\x00\xff\xff\x8b\xae\xa0\xae\x2a\x01\x00\x00")

func initRubyDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerfile,
		"init/ruby/Dockerfile",
	)
}

func initRubyDockerfile() (*asset, error) {
	bytes, err := initRubyDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/Dockerfile", size: 298, mode: os.FileMode(420), modTime: time.Unix(1470074923, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRubyDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8c\xc1\x0a\x83\x30\x0c\x86\xef\x3e\x45\xf0\x6e\xe9\x98\x87\x21\xf8\x30\x5a\x03\xca\xa2\x29\x69\x3a\xed\xdb\x2f\x85\x6d\xb7\xdd\xfa\xf5\xff\xf2\x9d\x38\x0f\x0d\xc0\x9c\x37\x5a\x06\x70\xf6\x0c\xbc\xef\xd3\x61\x80\x61\x65\x68\x71\xd9\x14\x16\x0e\x4f\x94\xce\xa6\xc8\x09\x5d\xd9\x09\xce\x4d\x57\x28\x9c\x05\x92\x4e\xa2\x39\x7e\x0f\x5b\x6b\xd0\x34\x23\xa5\x1a\x06\xe8\x6c\x38\x5e\x7c\xb9\xc8\xa2\xae\xef\xef\x2e\x0a\x2b\x07\xa6\x51\x29\xfd\x57\xae\x32\xaa\x64\x34\xa1\xfe\xfe\x62\x0f\x3f\xf4\xde\xfb\x0f\x99\x5b\xf1\xd6\xbc\x03\x00\x00\xff\xff\xae\x01\x4e\xf5\xc8\x00\x00\x00")

func initRubyDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerComposeYml,
		"init/ruby/docker-compose.yml",
	)
}

func initRubyDockerComposeYml() (*asset, error) {
	bytes, err := initRubyDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/docker-compose.yml", size: 200, mode: os.FileMode(420), modTime: time.Unix(1470074923, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initSinatraDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\xd7\x4b\xce\xcf\x2b\xcb\xaf\x00\x32\x52\xf3\xca\x80\x64\x7a\x66\x09\x17\x20\x00\x00\xff\xff\xc9\x68\x92\x70\x1e\x00\x00\x00")

func initSinatraDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerignore,
		"init/sinatra/.dockerignore",
	)
}

func initSinatraDockerignore() (*asset, error) {
	bytes, err := initSinatraDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/.dockerignore", size: 30, mode: os.FileMode(420), modTime: time.Unix(1470074923, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initSinatraDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xc1\x6e\x84\x20\x10\x86\xef\x3c\xc5\x24\xbd\xcb\x43\x34\x69\x4f\xad\x8d\x49\x0f\xbd\x49\x61\x70\x89\x30\x43\x00\xcd\xfa\xf6\x8b\xac\x9b\xac\xeb\x49\xbe\xf9\x86\xff\xe7\x63\xe8\xbf\x40\x33\xad\x7c\x95\xd9\x91\x2a\x49\x09\xf1\x56\x49\xdc\x80\xc9\x6f\x50\x2e\x08\xd6\x79\xcc\x40\x88\x06\x0d\x58\x4e\xf0\xbf\x90\xf1\x08\x8e\x72\x51\xde\x57\x7f\x21\xcd\x21\x20\x95\xe6\xaf\x48\x86\x93\xd4\x4a\xd7\x83\x77\x54\x4d\x0b\x1b\x2f\x30\x1e\x8b\x51\xe9\x59\x4d\x38\xee\x30\xc1\x84\x21\x8b\xf7\xfe\xe7\x0f\x3e\x31\xec\x59\xd0\x3e\xa9\x62\x94\x07\x39\x8d\x3b\xcf\x7a\x3e\x8d\x1b\xa9\x35\x9a\x75\x4a\x6f\xd6\x33\x11\xc3\xef\xf7\x6b\xff\xc7\x83\xf7\xee\x09\x73\x01\xb6\xed\xbf\xee\xde\x83\xbb\x76\x8f\xb8\x05\x00\x00\xff\xff\x9c\x51\x49\xbe\x2d\x01\x00\x00")

func initSinatraDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerfile,
		"init/sinatra/Dockerfile",
	)
}

func initSinatraDockerfile() (*asset, error) {
	bytes, err := initSinatraDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/Dockerfile", size: 301, mode: os.FileMode(420), modTime: time.Unix(1470074923, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initSinatraDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\x03\x32\x73\x12\x93\x52\x73\x8a\x41\x82\x0a\x0a\xba\x0a\xc9\xf9\x79\x65\xf9\x15\x7a\x05\xf9\x45\x25\x7a\x26\x26\xc6\x7a\x05\x45\xf9\x25\xf9\xc9\xf9\x39\xb6\x25\x39\xc5\xb8\x95\x54\x54\xda\x96\x14\x95\xa6\x02\x15\x80\x44\xe1\x86\x59\x18\x58\x99\x18\x18\x18\x40\x79\x40\xb5\x20\xae\x21\x17\x20\x00\x00\xff\xff\xc0\xe1\x22\xef\x84\x00\x00\x00")

func initSinatraDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerComposeYml,
		"init/sinatra/docker-compose.yml",
	)
}

func initSinatraDockerComposeYml() (*asset, error) {
	bytes, err := initSinatraDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/docker-compose.yml", size: 132, mode: os.FileMode(420), modTime: time.Unix(1470074923, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initUnknownDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\x4b\xcd\x2b\xe3\xd2\x4b\xcf\x2c\xe1\x02\x04\x00\x00\xff\xff\x9c\x10\x28\x7b\x0a\x00\x00\x00")

func initUnknownDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initUnknownDockerignore,
		"init/unknown/.dockerignore",
	)
}

func initUnknownDockerignore() (*asset, error) {
	bytes, err := initUnknownDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/unknown/.dockerignore", size: 10, mode: os.FileMode(420), modTime: time.Unix(1470074923, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initUnknownDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x0b\xf2\xf7\x55\x28\x4d\x2a\xcd\x2b\x29\xb5\x32\x34\xd3\x33\x30\xe1\xe2\x72\xf6\x0f\x88\x54\xd0\x53\xd0\x4f\x2c\x28\xe0\x02\x04\x00\x00\xff\xff\xf1\xa3\x65\xfc\x1f\x00\x00\x00")

func initUnknownDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initUnknownDockerfile,
		"init/unknown/Dockerfile",
	)
}

func initUnknownDockerfile() (*asset, error) {
	bytes, err := initUnknownDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/unknown/Dockerfile", size: 31, mode: os.FileMode(420), modTime: time.Unix(1470074923, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initUnknownDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x4d\xcc\xcc\xb3\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\xe3\x02\x04\x00\x00\xff\xff\xa6\xe1\xc1\x85\x11\x00\x00\x00")

func initUnknownDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initUnknownDockerComposeYml,
		"init/unknown/docker-compose.yml",
	)
}

func initUnknownDockerComposeYml() (*asset, error) {
	bytes, err := initUnknownDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/unknown/docker-compose.yml", size: 17, mode: os.FileMode(420), modTime: time.Unix(1470074923, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9b\xdb\x6e\x23\x47\x73\xc7\xaf\xc5\xa7\x18\x0b\xb0\x21\x05\xb2\x34\xe7\x83\x00\xdf\x78\xd7\x01\x7c\x11\x1b\xf0\xe1\x22\xc8\x06\xc6\x1c\x7a\x14\xc6\x12\xb9\x21\x29\x7b\xe5\x85\xdf\x3d\xfd\xab\xaa\x91\xb8\xe2\x90\xd2\x52\x12\x76\x93\xef\x5b\x60\x96\x64\x4f\x77\x75\x55\x77\xd5\xbf\x0e\xdd\x3a\x3b\x0b\x5e\xcd\x3b\x17\x5c\xb8\x99\x5b\xd4\x2b\xd7\x05\xcd\x4d\x70\x31\xff\xba\x99\xce\xba\x7a\x55\x9f\x4e\x7c\x87\xe5\xfc\x7a\xd1\xba\xe5\x39\xdf\x57\xee\xea\xed\xa5\xef\xb7\x3c\x9b\xce\xa6\xab\xb3\xee\xbf\xeb\xd9\xc5\xfc\xec\xb4\x9b\xb7\xbf\xbb\xc5\xf4\x62\x36\x5f\xb8\xed\xdd\x5e\x4b\xaf\x7e\x7a\xb9\xa3\x8f\x52\xfa\xba\x9d\x5f\xbd\x9d\x2f\xdd\xe9\xcd\xd5\xe5\x48\xdf\x45\x3d\xbd\x5c\x3e\x38\xab\xf6\xda\x39\xa9\x76\x79\xdc\x9c\xd7\xcd\xcd\xc3\x53\xd2\x69\xf7\x8c\xf4\x78\xd4\x84\xcb\xe9\xac\x5e\x2d\xea\x07\xe7\x1c\xfa\xed\x9c\x76\xe8\xf4\xa8\x99\xaf\x67\xbf\xcf\xe6\x7f\xce\x1e\x9c\x79\xe8\xb7\x73\xe6\xa1\xd3\x43\x33\xdf\x7e\x3b\xbd\x98\xf3\xe6\xf5\x8f\xc1\x0f\x3f\xfe\x12\x7c\xf7\xfa\xfb\x5f\xbe\x98\x4c\xde\xd6\xed\xef\xf5\x85\xbb\xeb\x3f\x99\x4c\x3d\xa1\xc5\x2a\x38\x9a\x1c\x1c\x36\x37\xbe\xe5\xd0\x7f\x81\xfa\xc2\x2d\x97\x67\x17\x7f\x4d\xdf\xd2\xd0\x5f\xad\xf8\x98\xce\xf5\xff\xb3\xe9\xfc\x7a\x35\xbd\xe4\xc7\x5c\x06\xbc\xad\x57\xff\x75\x06\xe7\x7c\xa1\x61\xb9\x5a\x4c\x67\x17\xf2\x6e\x35\xbd\x72\x87\x93\xe3\xc9\xa4\xbf\x9e\xb5\x81\x59\xc4\x4f\xae\xee\x8e\xf8\x12\xfc\xc7\x7f\x32\xed\x49\x30\xab\xaf\x5c\xa0\xc3\x8e\x83\xa3\xa1\xd5\x2d\x16\xf3\xc5\x71\xf0\x7e\x72\x70\xf1\x97\xfc\x0a\xce\xbf\x09\xe0\xea\xf4\x07\xf7\x27\x44\xdc\xe2\x48\xd8\xe6\xf7\xb7\xd7\x7d\xef\x7f\x43\xf6\xf8\x78\x72\x30\xed\x65\xc0\x17\xdf\x04\xb3\xe9\x25\x24\x0e\x16\x6e\x75\xbd\x98\xf1\xf3\x24\xf0\x22\x9d\x7e\x07\xf5\xfe\xe8\x10\x42\xc1\x97\xff\x73\x1e\x7c\xf9\xc7\xa1\x72\x22\x73\x79\x1a\x7f\x4f\x26\x07\x7f\xd4\x8b\xa0\xb9\xee\x03\x9d\x47\x27\x99\x1c\xfc\xa6\xec\x7c\x13\x4c\xe7\xa7\xaf\xe6\x6f\x6f\x8e\xbe\xf2\x7d\x4e\x3c\x6f\x7e\x54\x7b\xf9\xdd\xc0\xe9\xe9\xab\x4b\xbf\x4f\x47\x5e\xfc\x67\xe2\x07\x32\x4a\x7f\x0b\x21\xdf\x51\xf9\xb6\x46\xcf\xd6\xe9\xb7\xb0\x7e\x74\x7c\x42\x8f\x89\x7f\xb7\xba\x79\xeb\x82\x7a\xb9\x74\x2b\x96\xfc\xba\x5d\x41\x45\xe4\xb3\xfd\xf0\xd3\xcc\xfa\x79\x10\xcc\x97\xa7\xff\xea\xb7\xf5\x7b\xff\xe3\x76\x9c\x6d\xe1\xd0\xbe\x46\x41\xf6\xd0\xff\xd3\x6d\x9c\x1c\x2c\xa7\x7f\xc9\xef\xe9\x6c\x95\xa7\x93\x83\x2b\x20\x32\xb8\x25\xfa\x6f\xfe\xa7\x34\xfe\xe2\x35\x24\x40\x4d\x4e\xf9\xc6\x3c\xa2\x2a\x47\xfd\xf4\xfe\x5c\xc7\xc1\x0f\x7e\x8a\xa3\x63\x9b\x81\x39\x4d\xca\x7e\x7a\xca\xec\x7e\xf0\xf6\xb1\x3f\x7b\x76\xfc\x58\xe1\xe6\xc3\xa1\x30\xba\x73\x28\xbc\xfa\xa1\x6b\x9c\x7f\x48\x00\xd1\x1e\x22\x80\x70\x9e\xc6\xad\xa0\x1b\x14\x4c\xfa\xed\x44\xbe\x5f\xbe\x9e\x2e\x3c\x89\x66\x3e\xbf\x5c\x1f\x5d\x5f\x2e\x1f\x90\xfc\x66\xa9\x82\x7b\x7c\xa9\x5b\xf7\xfe\xef\xb5\xd1\xa6\x12\x68\xf9\x6f\x40\xcd\x6b\xf1\x20\xaf\xd7\x30\xcb\x2b\xb9\x6a\xc5\xd1\xe1\x9b\x77\x51\xff\xe6\x5d\xd9\xbc\x79\x17\x96\xfe\x09\xed\xa9\xde\xbc\xcb\x9d\x6f\xb7\xb6\xde\xf7\xe9\xe2\x37\xef\x52\xdf\xaf\xf5\xed\xad\xff\x1d\xf3\xdd\x3f\xb5\xff\xee\xc2\xb5\xf7\x9d\xbe\x73\xc9\x5a\x1b\xfd\x5b\x4f\x2b\xf2\xf3\xf9\xf6\xca\xd3\x77\xfe\x29\xfc\xd3\xfb\x27\xcd\x3c\x1d\xff\x99\xf9\x3e\x65\xb8\xc6\x87\xcd\xcd\x93\x15\x6f\xde\x25\x7e\x7c\xd6\x2b\x0f\x51\xb7\xde\xef\x70\xc0\xa3\x71\x89\xcd\x5e\xc6\x70\x68\xb0\xaa\x35\x1c\xf3\x06\xb8\x65\xe5\x4e\xfc\xab\xc3\xad\x2e\xfe\xd0\xbf\x3e\xbe\x55\xf7\x71\x0a\x30\xf1\x2f\x62\xa9\xeb\x4c\x88\xa9\xde\xe2\xe1\x4e\x19\x1e\xc2\x9d\x5b\xb8\x10\x83\xf7\xd4\xee\x29\xcf\x7b\xcc\xea\x3c\xd8\x25\x45\x80\xf9\x9c\x07\x71\x75\x12\x60\x07\xe7\xeb\x66\x72\x94\xc6\xe1\xb1\xb4\xa3\xdd\xe7\xaa\xfd\xbf\xce\xa6\xef\x8e\xa2\xb4\x08\xc3\x22\xad\xe2\xe4\x24\x08\x8f\x3d\xb0\xd5\xcc\xfe\x95\xc8\xfa\x5e\x04\x3c\x0f\x4c\x4e\x58\x3b\x97\xff\xff\xbe\xdd\x80\xfa\x64\xa7\xe6\xe2\x8c\xf6\xd2\xdb\xd2\xeb\x54\x15\xa9\x5e\xd6\xfe\x5d\xe7\xf5\x2f\xf1\xef\x22\xff\x94\x5e\xef\xfa\x42\xf5\xb0\xac\xb5\x5f\x8e\x2e\x7b\xba\x79\xee\x3f\xfd\xef\xd8\xbf\x4f\x7d\x5b\x9c\xa9\x0e\xf3\xbd\x49\xbd\x1e\xf2\xce\xcf\x93\xfa\x27\x43\xe7\x23\xd5\xf9\xd4\xf7\xc9\xbc\xde\x47\x7e\x5c\xeb\x9f\xdc\xb7\xf5\xe8\xbe\xff\x2c\x7d\xbf\x0c\xfa\x9e\xaf\xca\x7f\x6f\x22\xe5\xa7\xf3\x6d\x8e\xf9\x3c\x7f\x8d\x9f\xbb\x29\xf5\xb3\xf5\xe3\xfa\x48\x3f\xb1\x99\xdc\x8f\x4b\x7d\x9f\x84\xc7\xf3\xd0\x0f\xb6\xe5\xc7\xb7\x95\xce\x53\xe7\x6a\x73\x9d\xff\x5d\x39\x95\x11\x5b\xc3\xbe\xe0\x97\x39\xb0\xb1\xd4\xcf\x5b\x37\xfa\x3e\xf5\xb4\xda\x50\xd7\x33\xf2\x7d\x6a\xe4\xf4\x74\x72\x64\xec\x74\x8d\xe1\x13\xbb\xab\x7d\xff\x82\x27\xd5\x3e\x51\xa5\xf3\xb3\x9e\xa1\x6f\xab\x23\xe5\x2d\xa9\x74\x1c\xeb\x47\x7b\x92\xe9\xbe\x44\x9e\x46\xc5\x1e\xe4\xba\x4e\xd0\x29\x90\xbf\xd1\xf9\xc0\x93\xa6\x56\xfe\x8b\x5e\x79\x69\x7c\xdf\xb0\xd0\xb5\x63\x7c\x89\xec\xb9\xd2\x65\x8f\x58\xe3\xd0\x8f\x4f\x7a\xe5\xc9\x21\x43\xa2\x7b\x54\xf9\x39\x2a\xc3\x9e\x9c\xfd\x8e\x6d\x3f\x62\x7d\x3a\xe3\x87\xb6\xb2\x52\x1d\xc9\xfc\xef\xa8\xd6\xf5\xc8\x6b\xd5\x91\xb0\xd3\xbe\x1d\x34\x32\xdd\x4f\xf6\xba\xca\x4d\x57\x7a\xd5\x91\x8c\x35\xb0\xfd\x0f\x73\x95\xad\x09\x55\x36\xf8\x8e\x7b\xa5\x81\x4c\xec\x49\xe8\x74\x2c\xbc\x67\xec\x05\x3a\x33\xf0\x9f\xe8\x7e\x96\xe8\x60\x64\x7b\x93\x2b\x4e\xa2\xa3\xe8\x6b\x67\xbc\xd1\x86\x5e\xb2\x3e\xbd\xd3\xbd\xae\x3b\xc5\x57\x74\x1a\x7b\x61\xdf\xd0\x57\xde\xe5\xbe\xbd\x2b\x75\x9f\x8a\x58\x6d\x00\x7d\x2d\x13\x9d\x0b\x3e\x78\xc7\xfe\xa6\xfe\x49\x5a\xd5\x2b\xd6\xb7\xec\x55\x1f\x79\x8f\x7e\x32\x16\x9b\x62\x7f\xd1\x17\xe4\xe9\xd8\xd7\x48\xf5\x22\x83\xe7\x4a\xf7\x9c\xfe\xd0\xcf\xcd\x6e\xf2\x56\xd7\x97\x35\x45\x1e\x6c\x84\x7d\xc7\x27\xb8\x4c\xd7\x0f\x9b\x8b\x6c\x8f\x92\x5a\x65\x65\xef\xaa\x54\x6d\x03\x9f\x80\x4d\xb0\x7e\xec\x19\xb6\x84\x3e\xc5\x4e\xed\x1e\x4c\x70\xa6\xcf\x99\xad\x0b\x7b\xe4\x3a\xb5\x43\x78\xc1\xb7\x60\x43\xec\x0f\xb2\x62\x7f\x79\x61\x3a\x8f\x1e\x86\xaa\x27\xb5\xe9\xb2\xbc\x63\xbd\x73\x95\x87\xb1\xe8\x8f\xeb\x95\x2e\x3c\x95\x4e\xf5\x34\xab\xd5\x6e\xf1\x87\xe8\x6c\xe3\xc7\x56\x66\xf3\xa2\x6f\xd8\x6b\xad\x7b\xd9\x54\xaa\xa7\xb4\xd7\x85\xe1\x53\xa3\x76\xd0\x9b\xbf\x64\x7d\x58\xfb\x32\xd2\xbd\x70\x91\xda\x30\x7a\xd8\x60\xa7\xa5\xea\x80\xbc\x67\x3f\x7b\xe5\x19\xde\xc1\x43\xd6\x58\x74\x1a\x7b\x8f\x55\x5e\xb0\x92\xf5\x07\x37\xd9\x3b\xd6\x1e\x59\xfa\x54\xfd\x7c\x9f\x28\x9e\xa0\x43\xc8\xc4\x3a\x31\x47\x98\x6d\xfa\xea\x38\xd6\x31\xb2\xe6\xe8\x7a\x66\xf6\xb6\xdb\x57\x83\xf1\x4f\xf7\xd4\x50\xd9\xf0\xd3\x77\xaf\x76\x3b\x69\x7a\xec\xe3\xa2\xd7\x58\x7f\x09\x07\xbd\xce\xbe\x79\xe7\xbc\x4a\x3e\x23\xf7\xfc\x4a\xf3\xd7\x7f\xbf\xba\xdc\xcb\x49\xe3\x04\x50\xca\x16\x07\xe0\x0d\xa1\x8d\xef\x9c\x74\x6a\x4e\xba\xef\xd4\x49\x03\x02\x38\x2b\x14\x0c\xda\x80\x4a\x39\x18\x56\xad\x80\x2f\x8e\xbe\x55\x80\x8d\x1a\x0d\x1e\x69\x07\x20\x71\x7c\xf0\x00\x90\x02\x62\xb4\x03\xe4\x79\xa3\x73\x60\x6c\x80\x4d\x6e\x4e\x18\x1e\xa0\x05\x90\x34\x66\x38\x85\x19\x2f\xca\x2f\x4e\x30\xb3\x40\xa3\x52\x87\x04\x1f\x80\x1e\xa0\x82\xd1\x60\xfc\xbd\x01\x08\x60\x8d\x83\x62\x1e\x69\x4b\x2d\x58\xc8\xd5\xa0\x00\x65\x0c\x46\x00\x8d\xbe\xb5\x82\x3d\xc1\x85\x00\x7f\xaf\x8e\x01\xa3\x47\x1e\x09\xaa\x0b\x05\x0f\xe4\x05\x8c\x12\x03\x05\xc0\x11\xc7\x19\xb6\x0a\x56\xb5\x05\x31\x80\x08\x72\x55\xe6\x9c\x18\x23\x6b\x14\xe9\x9a\x36\x06\x06\xf4\x83\x87\xcc\x9c\x0f\x41\x4e\x67\x60\x04\x08\xb1\x8f\x4d\xac\xb2\x0e\x4e\x1d\x80\x66\x6d\x12\x0b\xb6\x00\x37\xfa\x46\xac\xbd\x7f\x17\xd6\x4a\x07\xc7\x29\xb2\xb7\x0a\x66\xce\xe9\xfe\xb2\x96\x04\x35\x55\xa9\x40\x0a\xe0\x20\x83\x38\xe2\x4a\x1d\x05\xf2\xe1\xd4\x00\x34\x40\x1e\x07\x81\x5e\x00\xc6\x24\x06\x79\xaa\x40\x1a\x9b\x63\x08\xa3\x11\x90\xca\x94\x0f\xf4\x8c\x75\x07\xe0\x1e\x91\x50\xdc\x69\xfa\xd3\xa1\xea\x8e\xd6\x06\x60\x6d\xd6\x85\x76\x03\xd7\x1d\xa9\x7d\xe0\x6b\x43\xa8\x97\x00\xb1\x31\x91\x86\x54\x23\xfd\xd4\x60\xf6\x13\x25\xcf\x67\x49\x92\xb1\x43\x02\xa5\xb8\x56\xcc\x90\x04\xd8\x82\x28\x9c\xea\x7a\x9f\xb1\x64\x1a\x5a\x49\xac\xc1\x31\x3a\xd9\xd6\x1a\xb0\xa3\xd3\x45\xad\x4e\x9e\xb9\x2b\x70\xc8\xa9\x4d\x09\xb6\x39\xb5\xa9\xcc\x69\xe0\x45\xb0\x03\xee\xd0\x9f\xb9\xc1\x55\xf0\x08\xbe\x24\x20\x28\x74\x5e\x6c\x1d\x1c\x21\x28\x14\x7b\x89\x2c\xe0\xb4\x80\x9a\x00\x5e\x82\xd3\x21\xa8\x69\xf4\x1d\xe3\x62\x0b\x66\x24\x69\x37\xac\xbc\x6f\x67\xb5\x25\x06\x55\xa6\x38\x01\x4f\x5b\xec\x6c\x63\x13\xf6\x33\xb1\x0d\x32\x77\xd6\x35\x52\x22\xdf\xb4\xab\x8d\xf1\x8f\x35\xa9\x6d\xfc\x3f\xab\x35\x8d\x8a\x60\x76\x54\x94\x9f\x8f\x19\xed\x9d\xb1\x93\x11\x90\xe9\x25\x9d\x66\xbc\xe5\x5a\xc6\xde\x75\xea\xa4\x51\x5c\x14\x09\xe7\x18\x59\x94\x8d\xd3\x47\xc9\x88\xa4\xc5\x11\x76\x9a\xdd\x76\x96\x95\xe2\x88\x70\x36\x85\x65\x55\x92\x1d\xe4\x1a\xc9\xe3\x58\xe2\x44\x9d\x13\x3c\x60\x4c\xa5\x65\x56\xb1\x65\xc8\x18\x94\x23\x53\xea\x2c\x00\xe8\x95\x47\x0c\x6e\x70\xd0\x49\xa3\x86\x54\x58\x06\x48\x20\x90\x58\x86\x40\x46\x19\x59\xc6\x5d\x90\x81\x91\x81\xb4\x6a\x60\x64\xd0\xf0\x21\xd5\x86\x52\x0d\x4e\xb2\xee\x5a\x33\x16\x82\x0b\x67\x6b\xc0\x1c\xce\x2a\x11\x04\x02\x18\x1f\x32\x15\xb9\x66\x33\x04\x4c\xac\x17\xf2\xc5\xb9\x66\x7a\x64\x65\x54\x0b\x1a\xcb\x2a\xc9\xd0\xc9\x4e\x08\x44\x04\x68\xac\xb2\x46\x25\x02\x87\x8b\xb3\x86\x5f\x64\x8f\x2c\xdb\xcd\x6d\xfd\x98\x9f\x6c\x42\xb2\xdf\xf4\x2e\x10\x29\x5a\xcb\xbc\x33\x1d\x0b\x60\x91\x9d\x90\xc5\x10\x18\x11\x84\x48\xa5\x23\xd1\x60\xa2\xcd\x2c\xb3\x88\x14\xe8\x58\x1b\x32\x6c\xd6\x96\x8c\x1d\x5e\x01\x8f\x64\xc8\x58\x52\xdd\x17\x32\x49\x82\x03\x64\x65\xce\xc6\x02\x81\xd2\xe4\x27\x48\x92\x4c\xd9\x69\xe0\x92\x59\x36\xc7\x78\xf6\x8f\x3d\xc9\x6d\x4f\x59\x13\x02\x0a\x00\x93\xc0\x4a\x02\x95\x4e\x83\x89\xaa\xd1\xca\x02\xa0\x0b\x0f\xec\x03\xfa\x22\x59\x6e\xa5\x81\x05\xe3\x59\xff\xa6\xd5\x60\x07\xdd\x89\x2c\x58\x01\xec\xa5\xd2\xd2\xe8\x1a\x45\x16\x80\xc2\x03\x60\x4c\x25\x22\xb5\x6a\x40\x6d\x15\x04\xaa\x02\x54\x10\xe0\x99\x35\xae\x7a\x75\x10\x1d\xfa\x5d\xaa\x4e\xd7\x56\x21\x62\x8e\x24\x51\x39\xc9\xf4\xc8\x7e\x3b\x0b\x2a\xf3\x4e\xb3\x72\xf8\x22\xd3\x25\x40\x96\x0a\x0f\x81\x50\xaf\x4e\x85\x2c\x18\xdb\x22\x58\x93\x2a\x8f\x65\xf2\xec\x3d\x15\x23\xf8\xc3\x41\x55\x26\x4f\x3b\xd8\x91\x05\x5a\xac\xd5\x58\x60\x95\x58\xd5\x81\x20\xd6\x0d\xd5\x96\xe8\x21\xc0\xdf\x3f\xf9\xbb\x47\xe4\x3e\xd8\xef\x4a\xfd\xee\x0d\xdd\x03\xe7\x5f\x2a\xf1\xdb\xe4\xdd\x20\x3e\x0b\x3f\x1e\xe3\xab\xb8\xcc\xcb\xea\x05\x30\xfe\x89\x69\xdf\x10\x8a\xa0\xd5\xa4\x11\xce\xc2\x1e\xd0\x5f\xea\x54\x16\x42\x91\xc6\x10\xc2\x50\x2f\xe5\x3d\x28\x02\x22\x11\x26\x81\x7c\x58\x16\xe9\x47\x66\xbf\x49\x23\x40\x5c\x49\x0b\x2d\xe5\x68\xec\xb3\x1d\x6a\x28\x56\x67\x91\x54\x28\x53\x2b\x0f\xb3\xbb\xf3\x88\xd8\xda\x40\x50\x1e\x2c\x7f\xe8\x93\x5a\xbf\xd8\x3e\x07\x9a\xa4\x31\x58\x30\xed\x7c\x07\xe1\xb0\xd4\xca\xea\x82\x3c\x20\x3a\x61\x5a\x64\x21\x11\x96\x4f\x6d\x24\x1a\xd0\xc2\x10\xb5\xb4\x9a\x19\x48\x06\xf2\x54\xf6\x7d\x78\x40\x7f\x64\x90\x7a\x74\xa6\x1e\x04\x24\x88\x2d\x1d\x8c\x47\x42\x31\x10\x00\xda\xd4\x67\xf0\x5e\xd4\x23\x1f\x0e\xc5\x9e\x9a\xf1\x8c\x92\xba\x6f\xa5\x8f\xc9\x77\x46\x09\xed\x61\xb3\x2f\x9b\xed\x6c\x97\xc7\x2c\x38\x4a\xe2\x4f\x1d\xa5\x5d\x37\x37\xff\xa7\x72\x9d\xad\x0a\x5d\x69\x9d\x86\xfc\xa7\xb0\xc3\x81\x6d\x0a\x7d\x4f\xe6\x3d\x75\xf9\x1e\x95\x35\x35\xde\xb8\x08\x33\xa2\xc0\xf7\x46\x3f\x5a\x77\xc7\x79\x7f\x5e\xb5\x1d\xe1\xdf\x14\x36\x09\x3f\x1b\x7d\xdd\x3b\xa9\x90\xa3\xe5\xde\xb4\xd4\x29\x14\x0e\xc7\x56\xc0\xa0\xb3\xb2\x3f\x90\x1d\xdb\x51\x1c\x5a\x4a\xb5\x50\x2a\x51\xa5\x6a\x35\x41\x70\x55\x6b\x00\xdf\xdb\xd1\x06\x6e\x05\x0d\x27\xe8\x12\x57\xd3\x28\xcd\xca\x8e\xa3\xa0\x95\x59\x75\x8b\xa0\x0e\x37\x46\x82\x40\x02\x40\xd0\x4f\x26\x9d\x1b\xe4\x13\x2c\x13\xb0\x17\x16\x34\xc1\x2f\xd5\x51\xa9\x14\x16\x9a\x08\xe4\x76\x5c\x9e\x5a\xe9\x9e\xa0\x52\x8e\xc6\x53\xad\x8a\x15\xe6\x4e\x08\xe0\x48\x28\x70\x83\x24\x4e\x04\xef\xe2\xce\xcc\xcd\x10\xfc\x71\x44\x25\xc7\x9a\x85\xba\x19\xf8\xe7\xc8\x87\xe4\x87\xc0\x9a\x00\x1a\xab\xe4\xa1\xa2\x86\x1b\x94\x6a\xa3\x25\x2f\x92\x00\xc5\x5a\xbd\x93\x23\xb4\x48\xad\x37\x29\xb5\x32\x51\x1b\xff\x12\xdc\xdb\xb1\x22\xc1\xbc\x1c\xa1\x86\x46\x33\x54\x79\x65\x5e\xbb\x36\xc0\x1a\x72\x6c\x42\x60\x4e\xa0\xcd\xbe\xc8\x71\x22\x01\x6e\xad\x95\x07\xac\x9d\x23\x2b\x2a\x10\x04\xb5\xec\x49\x6a\x81\x69\x9e\xdf\x55\x42\xe1\xaf\x34\x17\x49\x85\xc3\xd9\xf1\x1b\xe3\x59\x13\x67\x95\x5f\xda\x9c\x55\x54\x08\xb2\xa9\xe4\xca\xb5\x84\x46\xd1\x48\x8e\x63\x9c\xa2\x1d\x7b\x47\x1b\x73\xf5\x76\xe4\x25\xa8\x44\x25\x37\xb1\xa4\xb2\xb8\x4b\x16\x08\x57\x08\xce\xa9\xd8\x90\xd4\xca\xb1\xa3\x5d\x9d\x20\xa8\x96\x6a\x4a\xa2\x09\x4e\x98\x6c\x22\x1d\x3a\x2e\x47\x42\x83\x9b\xaf\xb7\x07\xd5\x1f\x58\xcb\x53\x71\xee\x5e\x48\xfd\xe1\x4d\xbe\x5d\x10\xf7\x51\x01\xf5\x18\xcb\xcf\x0f\x6f\x23\xe1\x74\x5c\x7d\xf2\x92\xc9\xad\xec\xcf\x71\x88\xd2\xea\x21\x0a\x66\x3c\xd4\x4d\xc8\xbb\x81\x16\x67\xc5\x70\x89\x5e\x43\x3b\x15\xb5\x5c\x1a\x73\x27\x72\xec\x4b\x1d\x83\xe9\x85\xe6\x90\xc9\x1f\x51\x61\x60\x49\x8a\xfb\x9d\xaa\x32\xa6\x84\x59\x01\x7b\x98\xa0\xd4\x66\x6a\xcd\xa7\x45\x6d\x63\xcd\xc7\x81\x02\xcc\x93\x5a\x4a\x6b\xb9\x3d\xc5\x47\x99\xc3\x4e\xc8\xe5\x34\xbf\xd5\x7c\x15\x3e\xc9\xa5\x05\x12\xed\xe4\x1c\xc8\xc3\xd1\x4b\x9e\x6e\x39\x2a\x39\x28\xa7\xe7\x64\x10\x72\x12\xec\x34\x9a\xe6\xf4\x33\xb4\x83\x0b\xfa\xf2\x9d\x77\x64\x19\x1c\x72\x50\x9f\x91\x1b\x01\x99\x1d\xfe\x38\x95\x51\x4e\xc2\x9d\xf2\x8a\xc9\x03\xf5\x64\x1a\xd4\x4a\x30\xcd\xa1\xae\x11\xda\x0d\x03\xea\x54\xc8\x26\x05\xd7\xd6\xa0\xac\x54\x5a\x98\xa8\x9c\x04\xf7\x5a\x87\x91\x43\x8f\x46\x0f\x32\xe4\x04\x3f\xd2\x35\xed\x8d\x27\xfa\x27\x56\x17\x10\xf8\xb4\x5c\xbb\xb7\xd3\x7c\xe0\x26\xb4\x5b\x02\xd4\x31\x3a\xab\x3d\x84\x76\x12\x9f\x59\x1d\x85\x3a\x41\xd3\x8e\x43\x48\x6d\x07\x21\x72\x18\x95\xd9\x3a\x3d\x14\x2c\x3d\x39\xf8\x1f\xa1\x74\x0f\x4e\x1e\x15\xfa\x8f\x90\xf9\x78\x70\x79\xe1\xc0\x7f\x9b\x30\x03\xd4\x84\x9f\x3a\x8e\xfa\x59\xaf\x3b\xff\xa3\x85\xfe\x23\x62\xef\xa7\xcc\x23\x84\xee\x74\x79\xf4\x62\xfa\xa6\x26\x8f\xd0\x78\xac\x22\x6f\x97\xe3\x59\xf5\x78\x8b\x20\x9f\x4b\x32\xf0\xc1\x2a\x3c\x3d\x1f\x88\xec\x5d\xba\x96\x0f\xe4\xf7\xf2\x81\x54\x4f\xfe\x87\x7c\x00\x70\xc6\x19\xe2\x78\xa4\x88\xda\xa9\xda\x03\xc6\x8d\x7d\xc7\x69\xa1\x96\xa5\x5d\x8d\x4a\x0d\x90\xdb\xc1\x49\xe6\x16\xd3\x59\xa1\xb9\xb6\x38\x54\xca\x5c\x4e\xcb\x49\xf0\x01\xaf\xce\xae\x11\xe2\x74\x88\x13\x29\xf9\x48\xe1\xd7\x0a\xe0\x72\xe8\x51\xe9\x89\xbd\x94\xd4\xcc\xe9\x49\x51\xdf\x4e\xff\x3a\xbb\x5a\xdb\xda\x35\xc2\xcc\x0e\x08\xe4\x90\x21\xb7\xeb\x5f\x76\xa8\x20\xeb\x94\xab\xc3\x26\x27\x18\x6e\x2f\xc8\xad\x80\x50\xe9\x32\x8e\x03\x04\x72\x0d\x9c\x99\xe4\x38\x85\xc6\xc3\xb1\xe5\x2d\x7c\xb2\xa6\xf0\x27\x57\x9d\x7a\x2d\xeb\x95\x76\x5b\xa0\xb3\x1b\x01\x9d\x5d\x3b\x2b\x0a\xcd\x61\x70\xd4\x72\x9a\x68\x41\x46\x62\xe6\xcd\x7a\x31\x17\x41\x4b\x66\x07\x3c\x38\x60\x62\x76\xfa\xb4\xc3\x15\x3b\xbb\xc5\xd0\x5b\xbc\xee\x2c\x3f\x90\x6b\x93\x91\xe6\x2d\x8c\x17\xe7\xee\x34\xc6\xcf\xed\x3a\x59\x68\xd7\xde\xd8\xd3\xc4\xae\x57\xca\x01\x80\xd3\x36\x78\xa2\xbf\x14\xe7\x6b\xbb\x52\x57\x5b\x4c\x9f\xeb\xbe\x44\x91\xe6\x00\xce\xf2\x01\xb9\x59\xd2\xdf\x5d\xaf\xa3\x0d\x9e\xd9\x23\xca\x95\x38\x65\xc9\x3d\x3a\x5d\x63\xde\xc9\x35\xcd\x44\xf3\xa0\xc2\xae\xdc\x51\x4a\x1c\xbb\x6e\x45\x30\xc3\xba\x0c\xba\x33\x14\xf3\x1f\x82\xc2\xfd\xd3\x83\x0d\x32\x9b\x30\xb8\x2b\x49\xd8\x18\xbe\x17\x02\xbe\x54\xaa\x30\x26\xc1\x2d\xf8\x45\x9f\x13\xfa\xfd\xb3\xfc\xfe\xff\xb5\xfc\xbe\x65\x9b\x9f\xc1\x5a\xc7\xc2\xf0\xed\x7f\x06\xf7\x80\xed\x7e\x7c\x30\xbe\x5b\xb0\x17\xb1\xe3\xcf\xba\x14\xff\xab\xfe\x1d\xe0\xf3\xfd\x79\xce\x8e\x3f\xbf\x41\xf7\x42\xbb\x29\x39\xe6\x43\x88\x7d\x62\xbb\x99\x28\x76\x3b\xae\x9b\x23\x2c\xef\xa7\x97\x23\x84\xee\x74\x72\xf4\xaf\x2d\x37\xd5\x71\x84\xc6\x63\x55\x71\xbb\x1c\xcf\xaa\x86\x5b\x04\x19\x34\xf0\x53\x87\xd3\x1f\xac\xc2\xde\xe1\x34\x61\x20\x21\x9b\xfc\x75\x45\xa1\x77\x11\x62\xbb\xaf\x30\xb8\x11\xd4\x32\xb6\x7b\x01\xb8\x0e\xc2\x68\xf9\x6b\x1c\xab\x53\xb9\xe1\x7e\x4d\x6c\xf5\xa0\x5e\xe7\x10\xd8\x0e\xf5\xde\x0a\x9f\xa9\xa9\x33\xf4\x29\x9f\x6e\x53\x69\xc2\x54\xfe\x8a\x42\xdc\x4c\xab\xb2\x3c\x46\xa5\xf7\x0f\x8b\x36\xc8\x6c\xaa\xf3\xae\xb0\x68\x63\xf8\x5e\x9a\xfc\x52\x61\xd1\x98\x04\x43\x58\xf4\xa9\xa3\xa2\x0f\x16\xe0\x89\x51\x11\x85\x88\xff\x0d\x00\x00\xff\xff\xf5\x05\x4b\x5e\x00\x40\x00\x00")

func templatesGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesGo,
		"templates.go",
	)
}

func templatesGo() (*asset, error) {
	bytes, err := templatesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates.go", size: 32768, mode: os.FileMode(420), modTime: time.Unix(1470928696, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"init/django/.dockerignore": initDjangoDockerignore,
	"init/django/Dockerfile": initDjangoDockerfile,
	"init/django/docker-compose.yml": initDjangoDockerComposeYml,
	"init/rails/.dockerignore": initRailsDockerignore,
	"init/rails/Dockerfile": initRailsDockerfile,
	"init/rails/docker-compose.yml": initRailsDockerComposeYml,
	"init/ruby/.dockerignore": initRubyDockerignore,
	"init/ruby/Dockerfile": initRubyDockerfile,
	"init/ruby/docker-compose.yml": initRubyDockerComposeYml,
	"init/sinatra/.dockerignore": initSinatraDockerignore,
	"init/sinatra/Dockerfile": initSinatraDockerfile,
	"init/sinatra/docker-compose.yml": initSinatraDockerComposeYml,
	"init/unknown/.dockerignore": initUnknownDockerignore,
	"init/unknown/Dockerfile": initUnknownDockerfile,
	"init/unknown/docker-compose.yml": initUnknownDockerComposeYml,
	"templates.go": templatesGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"init": &bintree{nil, map[string]*bintree{
		"django": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initDjangoDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initDjangoDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initDjangoDockerComposeYml, map[string]*bintree{}},
		}},
		"rails": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initRailsDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initRailsDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initRailsDockerComposeYml, map[string]*bintree{}},
		}},
		"ruby": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initRubyDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initRubyDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initRubyDockerComposeYml, map[string]*bintree{}},
		}},
		"sinatra": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initSinatraDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initSinatraDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initSinatraDockerComposeYml, map[string]*bintree{}},
		}},
		"unknown": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initUnknownDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initUnknownDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initUnknownDockerComposeYml, map[string]*bintree{}},
		}},
	}},
	"templates.go": &bintree{templatesGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

