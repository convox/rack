// Code generated by go-bindata.
// sources:
// templates/init/rails/Dockerfile
// templates/init/rails/bin/web
// templates/init/rails/config/initializers/convox.rb
// templates/init/rails/docker-compose.yml
// templates/init/ruby/Dockerfile
// templates/init/ruby/docker-compose.yml
// templates/init/sinatra/Dockerfile
// templates/init/sinatra/docker-compose.yml
// templates/templates.go
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _initRailsDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x50\xbb\x4e\xc4\x30\x10\xec\xfd\x15\x2b\xd1\x5f\x7a\x5a\x24\xa8\xe0\x50\x24\x0a\xba\xf3\x39\xeb\x60\xe2\xd8\x96\x1f\x27\xf2\xf7\x6c\xd6\x09\x21\xa7\xa4\xca\x3c\xec\x99\xf1\x73\x7b\x7e\x05\xe5\xdd\xcd\xff\x34\x51\x1a\x9b\x84\x78\x20\x1c\x26\xf0\xce\x4e\x90\xbf\x10\xb4\xb1\x98\xc0\x21\x76\xd8\x81\xf6\x11\xae\xc5\x75\x16\xc1\xb8\x94\xa5\xb5\xe4\x2f\x4e\xf9\x71\x44\x97\xd9\x7f\x43\xd7\xf9\xd8\x28\xa9\x08\x58\xe3\xc8\xa9\x61\xf2\x05\x2e\xcb\xc1\x20\xd5\x20\x7b\xbc\xcc\x64\x84\x1e\xc7\x24\x9e\xce\xef\x9f\xf0\x82\xe3\x9c\x05\xfc\x35\x32\x84\x66\x61\x76\xf2\xc9\x7a\x35\xec\x64\x66\xa8\x06\xbb\x76\xe9\xec\xfa\xcf\x88\xf6\xe3\xed\xbe\xff\x3a\xf8\xbb\xa4\x7c\x3c\x58\xa6\x84\x39\x3d\x86\x88\xb4\x33\xfc\x15\x6a\xe5\x80\x4b\x61\x0e\x5a\x71\x55\xe9\x51\xb5\xe9\xb7\x2d\x15\x57\x2d\x94\xab\x35\x6a\xd3\x2a\xae\xda\x8c\x6b\x60\xd5\x36\xcc\xe5\x23\x85\x1c\x14\x5a\x47\xcc\xfd\x23\xd2\x10\xaf\xf9\x9f\x4e\xd7\x6b\x4f\x7c\x9b\xf8\x0d\x00\x00\xff\xff\x08\xae\x24\x4e\xf0\x01\x00\x00")

func initRailsDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerfile,
		"init/rails/Dockerfile",
	)
}

func initRailsDockerfile() (*asset, error) {
	bytes, err := initRailsDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/Dockerfile", size: 496, mode: os.FileMode(420), modTime: time.Unix(1463247575, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initRailsBinWeb = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8d\x41\xae\xc2\x30\x0c\x05\xf7\x39\xc5\xfb\xea\x17\xbb\x36\xac\xb9\x04\x08\x71\x81\x94\x98\xd6\x22\x75\xa2\xd8\x45\x1c\x9f\x8a\x08\x81\xbc\x9b\x19\xeb\x75\x7f\x7e\x64\xf1\x3a\x3b\xd7\x21\x52\x22\x23\xe4\x14\xa1\x54\x1f\x54\x87\xc2\xd1\xd5\x05\xfd\x0d\x3e\x94\xe2\x6d\x29\x7e\x43\xea\x7f\xf4\xf6\xa7\x16\xaa\x61\x2d\x90\x89\xe5\x09\x16\xd8\x4c\x18\xc3\xf5\x3e\xd5\xbc\x4a\x74\x8d\xef\xbe\x6d\x0d\x9c\x14\x89\xd5\x48\x58\x26\x64\xc1\x7e\x78\xdf\xe1\xff\x74\x3c\x5f\x5c\x0b\xda\x0c\xfa\xf1\x63\xd1\x17\xb4\xe0\x15\x00\x00\xff\xff\xb8\xc0\x7d\x5f\xb9\x00\x00\x00")

func initRailsBinWebBytes() ([]byte, error) {
	return bindataRead(
		_initRailsBinWeb,
		"init/rails/bin/web",
	)
}

func initRailsBinWeb() (*asset, error) {
	bytes, err := initRailsBinWebBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/bin/web", size: 185, mode: os.FileMode(493), modTime: time.Unix(1463265546, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initRailsConfigInitializersConvoxRb = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x0a\x0e\x71\xf1\x0f\x0d\xd1\x2b\xae\xcc\x4b\x56\xb0\x55\x28\x29\x2a\x4d\xe5\xe2\x0a\x4a\xcc\xcc\x29\xd6\x4b\x2c\x28\xc8\xc9\x4c\x4e\x2c\xc9\xcc\xcf\xd3\x4b\xce\xcf\x4b\xcb\x4c\xd7\x4b\x4a\x4d\xcb\x2f\x4a\x8d\xcf\xcc\xcb\x2c\xc9\x4c\xcc\xc9\xac\x4a\x55\x48\xc9\x57\xa8\x01\x2a\xac\xe1\x52\x50\x00\x52\x30\x75\x39\xf9\xe9\xe9\xa9\x45\x40\xf3\x7c\xc0\x0c\xbd\xbc\xd4\x72\x0d\x88\x45\x9a\x5c\xa9\x79\x29\x5c\x80\x00\x00\x00\xff\xff\x36\xc3\xef\x32\x75\x00\x00\x00")

func initRailsConfigInitializersConvoxRbBytes() ([]byte, error) {
	return bindataRead(
		_initRailsConfigInitializersConvoxRb,
		"init/rails/config/initializers/convox.rb",
	)
}

func initRailsConfigInitializersConvoxRb() (*asset, error) {
	bytes, err := initRailsConfigInitializersConvoxRbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/config/initializers/convox.rb", size: 117, mode: os.FileMode(420), modTime: time.Unix(1463268516, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initRailsDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\xcc\xc1\x0a\xc2\x30\x0c\xc6\xf1\xfb\x9e\x22\x2f\x60\xac\xd8\x83\x04\xf6\x30\xeb\xcc\x41\x88\x26\x74\xe9\x9c\x6f\x6f\x0a\xd2\x9b\xb7\xfc\x3f\x7e\xe4\xcd\x85\x26\x80\xd2\x1e\x72\x27\xc0\x38\x65\x29\x2c\x5b\x1f\x01\x4e\xb0\xea\x6b\xd7\x03\x4d\xab\x63\xce\x57\xb4\xaa\xae\xab\xca\xec\xb2\xfd\x27\xc7\x67\xf6\xda\x38\x40\x5f\xc7\xb3\x5b\xa2\x9c\x52\xfa\x55\xd8\x9e\x97\xc8\x5d\xa5\x3d\x79\x38\x40\x3a\x2f\x66\xd3\x37\x00\x00\xff\xff\x0e\x1c\x39\x14\x9d\x00\x00\x00")

func initRailsDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerComposeYml,
		"init/rails/docker-compose.yml",
	)
}

func initRailsDockerComposeYml() (*asset, error) {
	bytes, err := initRailsDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/docker-compose.yml", size: 157, mode: os.FileMode(420), modTime: time.Unix(1463265125, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initRubyDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xcd\x4e\xc0\x20\x10\x84\xef\x3c\xc5\x26\xde\xcb\x43\x98\xe8\x49\x6b\x9a\x78\xf0\x56\x0a\x4b\x6d\x0a\xbb\x84\x9f\x46\xde\x5e\x8a\x35\xb1\x72\x62\x67\xbf\x61\x86\xa7\x69\x7c\x01\xcd\x74\xf0\x97\x8c\x65\xa9\x42\x3c\xb4\x31\x54\x60\x72\x15\xf2\x27\x82\xdd\x1c\x26\x20\x44\x83\x06\x2c\x47\x58\x0a\x19\x87\xb0\x51\xca\xca\xb9\xc6\x17\xd2\xec\x3d\x52\xee\xfc\x81\x64\x38\x4a\xad\x74\x1b\xdc\x46\x8d\xb4\x50\xb9\xc0\x7c\x19\x83\xd2\xbb\x5a\x71\x3e\xc5\x08\x2b\xfa\x24\x1e\xc7\xb7\x0f\x78\x46\x7f\x66\x41\x3f\x52\x85\x20\x2f\xe5\xb6\x1e\x1c\xeb\xfd\xb6\xee\x4a\xab\xd1\xa9\x5b\x7a\xa7\xfe\x2a\x62\x7a\x7f\xfd\xdf\xff\xf7\xc3\x67\xf7\x88\x29\x03\xdb\x7e\x6f\xde\x9f\xe0\xa1\xbf\x23\xbe\x03\x00\x00\xff\xff\x8b\xae\xa0\xae\x2a\x01\x00\x00")

func initRubyDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerfile,
		"init/ruby/Dockerfile",
	)
}

func initRubyDockerfile() (*asset, error) {
	bytes, err := initRubyDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/Dockerfile", size: 298, mode: os.FileMode(420), modTime: time.Unix(1463247575, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initRubyDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8c\xc1\x0a\x83\x30\x0c\x86\xef\x3e\x45\xf0\x6e\xe9\x98\x87\x21\xf8\x30\x5a\x03\xca\xa2\x29\x69\x3a\xed\xdb\x2f\x85\x6d\xb7\xdd\xfa\xf5\xff\xf2\x9d\x38\x0f\x0d\xc0\x9c\x37\x5a\x06\x70\xf6\x0c\xbc\xef\xd3\x61\x80\x61\x65\x68\x71\xd9\x14\x16\x0e\x4f\x94\xce\xa6\xc8\x09\x5d\xd9\x09\xce\x4d\x57\x28\x9c\x05\x92\x4e\xa2\x39\x7e\x0f\x5b\x6b\xd0\x34\x23\xa5\x1a\x06\xe8\x6c\x38\x5e\x7c\xb9\xc8\xa2\xae\xef\xef\x2e\x0a\x2b\x07\xa6\x51\x29\xfd\x57\xae\x32\xaa\x64\x34\xa1\xfe\xfe\x62\x0f\x3f\xf4\xde\xfb\x0f\x99\x5b\xf1\xd6\xbc\x03\x00\x00\xff\xff\xae\x01\x4e\xf5\xc8\x00\x00\x00")

func initRubyDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerComposeYml,
		"init/ruby/docker-compose.yml",
	)
}

func initRubyDockerComposeYml() (*asset, error) {
	bytes, err := initRubyDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/docker-compose.yml", size: 200, mode: os.FileMode(420), modTime: time.Unix(1463247575, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initSinatraDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xc1\x6e\x84\x20\x10\x86\xef\x3c\xc5\x24\xbd\xcb\x43\x34\x69\x4f\xad\x8d\x49\x0f\xbd\x49\x61\x70\x89\x30\x43\x00\xcd\xfa\xf6\x8b\xac\x9b\xac\xeb\x49\xbe\xf9\x86\xff\xe7\x63\xe8\xbf\x40\x33\xad\x7c\x95\xd9\x91\x2a\x49\x09\xf1\x56\x49\xdc\x80\xc9\x6f\x50\x2e\x08\xd6\x79\xcc\x40\x88\x06\x0d\x58\x4e\xf0\xbf\x90\xf1\x08\x8e\x72\x51\xde\x57\x7f\x21\xcd\x21\x20\x95\xe6\xaf\x48\x86\x93\xd4\x4a\xd7\x83\x77\x54\x4d\x0b\x1b\x2f\x30\x1e\x8b\x51\xe9\x59\x4d\x38\xee\x30\xc1\x84\x21\x8b\xf7\xfe\xe7\x0f\x3e\x31\xec\x59\xd0\x3e\xa9\x62\x94\x07\x39\x8d\x3b\xcf\x7a\x3e\x8d\x1b\xa9\x35\x9a\x75\x4a\x6f\xd6\x33\x11\xc3\xef\xf7\x6b\xff\xc7\x83\xf7\xee\x09\x73\x01\xb6\xed\xbf\xee\xde\x83\xbb\x76\x8f\xb8\x05\x00\x00\xff\xff\x9c\x51\x49\xbe\x2d\x01\x00\x00")

func initSinatraDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerfile,
		"init/sinatra/Dockerfile",
	)
}

func initSinatraDockerfile() (*asset, error) {
	bytes, err := initSinatraDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/Dockerfile", size: 301, mode: os.FileMode(420), modTime: time.Unix(1463247575, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _initSinatraDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\x03\x32\x73\x12\x93\x52\x73\x8a\x41\x82\x0a\x0a\xba\x0a\xc9\xf9\x79\x65\xf9\x15\x7a\x05\xf9\x45\x25\x7a\x26\x26\xc6\x7a\x05\x45\xf9\x25\xf9\xc9\xf9\x39\xb6\x25\x39\xc5\xb8\x95\x54\x54\xda\x96\x14\x95\xa6\x02\x15\x80\x44\xe1\x86\x59\x18\x58\x99\x18\x18\x18\x40\x79\x40\xb5\x20\xae\x21\x17\x20\x00\x00\xff\xff\xc0\xe1\x22\xef\x84\x00\x00\x00")

func initSinatraDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerComposeYml,
		"init/sinatra/docker-compose.yml",
	)
}

func initSinatraDockerComposeYml() (*asset, error) {
	bytes, err := initSinatraDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/docker-compose.yml", size: 132, mode: os.FileMode(420), modTime: time.Unix(1463247575, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templatesGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x99\x5b\x4f\x1b\x59\x12\xc7\x9f\xf1\xa7\xe8\x41\x9a\x91\x59\x31\xa6\xef\x17\xa4\xbc\x84\x64\xa5\x3c\x6c\x46\xca\x66\xb5\x5a\x2d\xab\x51\x5f\x4e\xb3\xad\x31\x36\x6b\x9b\x0c\x24\xca\x77\xdf\xfa\x9d\x2a\x83\x21\x36\x4c\x08\xd1\x3c\x34\xee\x3e\x97\xba\x9c\x53\xf5\xaf\x0b\x47\x47\xc1\xc9\xbc\x73\xc1\x99\x9b\xb9\x45\xbd\x72\x5d\xd0\x5c\x07\x67\xf3\x9f\x9b\x61\xd6\xd5\xab\x7a\x32\x92\x05\xcb\xf9\xe5\xa2\x75\xcb\x63\xde\x57\xee\xfc\x62\x2a\xeb\x96\x47\xc3\x6c\x58\x1d\x2d\xea\x61\xba\x3c\x7a\x35\x6f\x7f\x73\x8b\x7e\x98\xba\x9d\x4b\x84\xde\xd1\xef\xae\xd9\x39\xdf\xce\x67\xfd\x70\xe6\x47\x86\x7a\x3a\x7c\x74\x0b\x3f\xf6\x61\x7e\x35\x59\xec\xde\xd5\x79\xc6\x3f\xb7\xf3\xf3\x8b\xf9\xd2\x4d\xae\xcf\xa7\xdb\x96\x5e\x36\xd7\x8f\x88\xc8\x8a\x3f\x44\x6b\x39\xcc\xea\xd5\xa2\x7e\x98\xdc\x7a\xd1\x63\x14\x6f\xde\x26\x67\x73\x66\x5e\xfd\x12\xbc\xfd\xe5\x7d\xf0\xfa\xd5\x9b\xf7\x3f\x8c\x46\x17\x75\xfb\x5b\x7d\xe6\x6e\xd7\x8f\x46\x83\x10\x5a\xac\x82\xf1\x68\x6f\xbf\xb9\x96\x91\x7d\x79\x81\xfa\xc2\x2d\x97\x47\x67\x1f\x87\x0b\x06\xfa\xf3\x15\x3f\xc3\x9c\xbf\xcb\xd5\x62\x98\x9d\xf9\x85\x73\xff\x77\x35\x9c\x3b\x9d\x3e\x1a\xe6\x97\xab\x61\xca\xc7\x45\xbd\xfa\xef\x11\xca\xf0\xb2\x3f\x3a\x18\x8d\xfa\xcb\x59\x1b\x98\x0d\xbc\x73\x75\x37\xe6\x25\xf8\xf7\x7f\x60\x7b\x18\xcc\xea\x73\x17\x28\xe9\x83\x60\xbc\x1e\x75\x8b\xc5\x7c\x71\x10\x7c\x1a\xed\x9d\x7d\xf4\x5f\xc1\xf1\x8b\x00\xa9\x26\x6f\xdd\xef\x10\x71\x8b\xb1\x17\x9b\xef\x97\x97\x7d\x2f\xdf\x90\x3d\x38\x18\xed\x0d\xbd\xdf\xf0\xc3\x8b\x60\x36\x4c\x21\xb1\xb7\x70\xab\xcb\xc5\x8c\xcf\xc3\x40\x54\x9a\xbc\x86\x7a\x3f\xde\x87\x50\xf0\xe3\xff\x8e\x83\x1f\x3f\xec\xab\x24\x9e\x97\xd0\xf8\x3c\x1a\xed\x7d\xa8\x17\x41\x73\xd9\x07\xca\x47\x99\x8c\xf6\x7e\x55\x71\x5e\x04\xc3\x7c\x72\x32\xbf\xb8\x1e\xff\x24\x6b\x0e\x45\x36\xd9\xd5\x4e\x5f\xaf\x25\x9d\x9c\x4c\xe5\x9e\xc6\xa2\xfe\x33\xc9\x03\x19\xa5\xbf\x83\x90\x2c\x54\xb9\x6d\x50\xc4\x9a\xbc\x44\xf4\xf1\xc1\x21\x2b\x46\x32\xb7\xba\xbe\x70\x41\xbd\x5c\xba\x15\x47\x7e\xd9\xae\xa0\xe2\xf5\xb3\xfb\x10\x36\xb3\x7e\x1e\x04\xf3\xe5\xe4\xaf\x72\x87\x6f\xe4\xe3\x66\x9f\x5d\xe1\x7a\x7c\x83\xc2\xc6\x1d\x8e\xf6\x96\xe2\x70\xc1\x30\x5b\xe5\xe9\x68\xef\x1c\x38\x30\x5a\x7f\x93\x77\x3f\xf2\x5e\xcc\x26\xc0\x76\x26\xbc\x41\xde\x5b\xc8\xb8\x1f\xee\xb3\x38\x08\xde\x0a\xe5\xf1\x81\xd1\x86\x95\x29\xd7\x0f\x13\x98\xca\xe6\xdd\x7b\xff\x2e\x82\xc8\x5e\x2f\xca\xdd\xad\x88\xf8\xe0\x56\x64\x95\xad\x1b\x92\xdf\x25\x80\x5e\x8f\x11\x40\x39\xa1\x71\xa3\xe8\x17\x14\x4c\xfb\xdd\x44\xde\x2c\x5f\x0d\x0b\x21\xd1\xcc\xe7\xd3\xcd\xdd\xf5\x74\xf9\x88\xe6\xd7\x4b\x55\x5c\x60\xa5\x6e\xdd\xa7\xcf\x1b\xbb\xcd\x12\x30\xee\x5f\x41\x98\x77\x80\xdf\x2d\x04\x89\x61\xab\x25\x8c\xf7\x4f\xaf\xa2\xfe\xf4\xaa\x6c\x4e\xaf\xc2\x52\x9e\xd0\x9e\xea\xf4\x2a\x77\x32\x6e\x63\xbd\xac\xc9\xdb\xd3\xab\x4c\xde\x1b\x59\x9b\xca\x5c\x9b\x9e\x5e\x25\xf2\x1d\xc9\xe3\x64\xae\xef\xe4\x3d\x3b\xbd\x8a\x65\xbe\x8b\x64\xad\xec\x29\x6a\xf9\x95\x27\x96\xb5\xb5\xd0\x72\xa1\xd2\xe0\x3b\x94\xf1\x46\x9e\x3e\x11\x3a\xc2\xcf\xc9\xbe\x1c\x5a\xb1\xec\x97\xb5\x55\xae\xb2\xc5\x85\xac\x91\xb1\xbe\x50\x19\xba\x5c\xe5\x8b\x85\x47\x2d\x63\xb5\xd0\x6a\x85\x4e\xd2\xaa\x1c\x95\xcc\xf5\x32\x57\x08\xdd\x42\x68\x16\x22\x6b\x28\x72\x39\x79\x3a\x91\xb1\xed\x54\x9f\x44\xf6\x65\xb2\x2e\x92\xbd\x95\xac\x2b\xe5\xbb\x10\xbe\x31\x3a\x09\x9d\x58\xf8\xf4\xf2\xde\x3a\xd5\xb7\x42\xf7\x5e\xf5\x6d\x64\x6d\x23\x7b\x2b\x59\xdf\x86\x2a\x4b\x91\xab\xdc\xa5\xbc\xf7\xc8\x8e\x7c\x9c\x93\xf0\x2d\xe4\x89\x64\xac\x95\xb1\x06\xdd\x38\x0f\x19\x6b\x90\x4b\xde\xe3\x5e\x79\xf4\x22\x7b\x21\x6b\x52\x19\xab\x44\xb7\x8e\x6f\xe6\x44\x97\xae\xd0\x79\x78\xc4\xf2\xd4\x95\xde\x59\xc6\xb9\xca\x7c\x6b\x63\x79\xa4\xe7\x85\xce\x31\xfc\x1b\xe5\x8b\x5e\x5d\xa6\xbf\x9c\x4b\x23\x3a\xb6\xf2\xe4\xa9\xea\x1e\xb1\xb6\xd0\xbb\xa9\x9c\xea\xed\x84\x77\xd5\xeb\x39\x94\xb1\xf2\xa9\x5a\xa5\xdd\xcb\x6f\x22\xbf\x49\xac\xfb\xf3\x5c\x79\x73\x0e\xf0\x6f\x2b\xbd\x7f\xd6\x38\xe3\xc3\x1a\xec\x20\xcc\xd5\x8e\x58\xeb\x2a\xb3\x1f\x59\xdb\xf6\x6a\x73\x9c\x1f\xbc\x9c\xdc\x55\xe3\xec\xbe\xb0\x95\x52\xf7\x71\xe7\x45\xab\x77\x8e\xfe\x75\xae\x32\x60\x47\x89\xec\x29\x73\xa5\xc3\x3d\x25\x89\xca\x8a\x6d\xe6\xb5\xda\x41\x29\xfa\xa4\x8d\xca\x1b\x3a\xb5\x51\xce\x3d\xcb\x54\x1e\xec\xa2\xb1\xf7\x86\x33\x31\xdb\xce\xec\xdd\xdf\x5f\xa3\xba\x41\xb3\x13\x1e\x71\xad\xf7\xdd\xc9\x6f\x89\xbe\x66\xcf\x9c\x79\x92\xeb\x59\xc3\x3b\x96\xb5\x65\xa6\x36\x16\xa5\xca\x3b\x2d\x74\x1e\x1f\x62\xbe\x8b\xd5\xce\xea\x5e\xef\xbc\x32\xfb\xc0\x06\xa0\x9b\xf6\xaa\x3f\x76\xcb\x99\x84\xdd\xad\xef\x72\x56\x3c\xd8\x06\xf2\x70\x9f\xde\xb6\x98\x8f\xd6\xeb\xf6\xd7\x31\x7b\x0b\x3c\x58\x40\xd9\x16\xa8\xd7\x61\x67\x23\xd0\x4b\x84\xda\x86\x31\x87\x32\xbe\xbf\x35\xe5\xdb\x97\xa9\x83\x9b\x88\xb0\x65\x2b\xac\xff\xe2\x03\xd8\x26\x6b\x1f\xc1\x6e\xd2\x84\xdd\x62\x3f\x16\x8b\x6f\x42\xa8\x0f\x82\x42\xea\x1e\xb2\x7e\x22\xe6\x1c\x07\xbb\x64\x0f\x88\x2b\xc7\x41\x5a\xe5\x87\x01\x11\xe2\x78\x33\x80\x8c\xd3\x38\x3c\xf0\xe3\xe0\xfe\xb1\xc6\x85\x7f\xcc\x86\xab\x71\x94\xe6\x49\x9c\x16\x59\x91\x1d\x06\xe1\x81\x44\xfa\x1a\xd6\x3f\x79\x2d\x3f\x79\xd5\x8e\x03\xd3\x10\xb9\x8e\x03\xff\xf3\xf9\xe6\xc4\xeb\xc3\xed\xa0\xfe\x72\x98\xfd\xd3\x35\x4f\x02\xf4\x54\x0c\xa8\x14\xc3\x49\xd7\x40\x15\x2b\xa0\x87\x6b\x07\x2f\xd4\xa1\x00\xb0\x5e\xe8\x39\x31\xd4\xa8\x50\x07\xc4\xa0\x6b\x59\xd7\x00\x42\xa9\xf2\xc2\x81\x00\x3f\x9c\x03\x60\x04\xa8\xe3\x58\xc1\xaf\x36\x50\x4f\xcd\xf0\x31\xe8\xb2\xd6\x7d\xec\x69\xcc\x98\x23\x0b\x04\xec\x01\xf8\x00\x6f\x80\x03\x40\x07\x00\x92\x46\x9d\x00\xc0\xcd\x62\xa5\x8f\xc3\x00\xa2\x38\x53\xcd\x78\xaa\x67\xc0\x6f\x59\xa8\x5e\x04\x24\x1c\xd1\xeb\xd5\xa9\xc3\x24\x4e\x65\x25\xe0\xe4\x38\x5e\xa5\xfc\x00\x5b\x74\x85\x7f\x9f\x2a\x18\x11\x68\x00\xf0\xba\x56\xd0\xf0\x20\x00\x28\x56\xea\xd4\x9c\x6f\x64\x01\x80\x73\x8d\x08\x0c\x00\x4f\xa6\x7c\xe0\x8d\x8e\x29\x74\x53\x3d\x77\xc0\x15\x70\xcb\x4d\x9e\xca\x00\x01\x9a\xac\x4f\x0d\xdc\x09\x44\x9c\x01\x20\x8e\x7c\x04\xa9\x4e\xf6\xba\x48\xef\x11\x7a\x1e\x08\xd1\x99\xbb\x6b\x14\x84\x42\x03\x55\xce\x2e\x4f\xf4\x0c\xfc\xfd\xa5\x1a\x88\x01\xb4\xfb\xa0\xd1\x58\x40\x2b\x3a\xa5\xe7\xef\x37\xdc\x0d\x1a\x6a\x7e\xdf\x00\x18\x4a\xe0\x3e\x58\x58\xf1\xb7\x03\x29\x74\xcf\x57\xa1\xc4\x1d\x39\xbf\x03\x42\xdc\x08\x6c\xf0\x10\x95\xd9\x56\x78\xa8\x92\x07\xe0\x21\xcf\xb2\x34\x7f\x5e\x78\x38\xf1\x55\xf2\x9b\x8d\x22\xf9\xc4\xd7\xc8\xef\x9e\x06\x19\xe4\x6c\xc4\x4b\x5c\x1d\xb3\x0a\x7b\x35\x5d\x4c\x8b\xbc\xcf\xc3\x48\xab\xb1\x35\x23\xc6\x87\x1a\x53\xc9\x57\x70\x2f\x62\x64\xda\xa9\xcb\xe0\x76\xd0\xc3\x25\x5a\xcb\x45\x58\x03\x6c\xb0\x3f\x6e\x75\x1f\x79\x0d\xb9\x04\x6e\x45\x1c\x63\x9c\x6f\xbf\xa7\xd7\xd8\xcb\x7a\xf2\x15\xbe\xfd\x7b\xa3\xeb\x81\x0a\xbe\x53\xe3\xcb\xb8\xcf\xb5\x6a\x75\x41\xd6\x7b\x3a\xcd\x2d\xdd\xd4\x64\xe1\xbd\x36\x97\xcd\xcc\x1d\x19\x23\x07\xf0\x39\x4c\x64\x31\xbf\x55\x57\x04\x8e\x32\x3b\xbb\xcc\xa0\x14\x18\x03\x42\x89\xe1\xce\x1e\x72\x34\x60\x30\x0d\x35\xf7\x25\x8e\xb7\x06\xbb\x4d\xa7\x30\xd1\x91\xdf\xc4\x7a\xb6\xa5\xc1\x66\x55\xab\x7b\xb3\xbf\xa8\xf4\xac\xf8\x2e\xc3\x4d\x17\xbd\x75\x65\x9f\x73\x24\x0a\x33\x89\xc1\xf0\x43\xae\xbc\xdb\x54\xbe\xc1\xbd\x77\x13\xbd\xef\xf2\x0f\xf6\x73\x76\x00\xc1\x6e\xea\x5f\x05\x0e\x8f\x6a\xfe\x1d\x00\xe3\x11\x75\xd7\x30\x12\x15\x5f\x9f\x65\xe4\x65\x16\x3d\x33\x8c\x68\x02\x74\xa2\x7d\xa9\x7f\x9d\x4f\x9f\x04\x1e\xc4\x29\xef\x58\x91\x3a\xfe\x66\xbe\xd1\xe6\x0a\x28\xe4\x19\x14\x1f\x3e\xae\xf7\x9a\x40\xe3\x60\xbe\xb0\x4a\x34\xd7\x20\x1e\xb3\x8f\x3c\xc1\x83\x4d\xa4\x7c\x88\x93\xf0\xc0\xc9\x88\xa5\x79\xaf\x0f\xbc\x48\xa8\xc9\x2f\x48\xe6\x7d\xe1\x62\xb9\x05\x79\x03\x05\x21\x09\x39\xfb\x71\x26\x9f\x7c\x3b\x75\x40\x8a\x4f\x9c\x33\x11\xfa\x79\x66\x20\x46\xac\x6d\x54\x6f\x40\x00\x50\x02\xe8\xc8\x19\x72\xcb\x4f\xc2\x44\x01\x87\x22\x81\xd8\x0b\x38\x65\x16\x7b\x6b\x2b\x14\x98\xa3\x70\xa5\xf8\x69\x62\x4b\xfe\x0b\x2d\xc2\xf2\x42\xf5\x24\x8e\xc3\x1b\xb0\x20\x1e\x33\xd7\x24\xca\x9f\x9c\x0a\x3d\x01\x9b\xde\x40\xca\x17\xce\x4e\x8b\x47\x80\x33\xeb\xb4\xd0\xa4\x28\x02\x34\xd6\xb4\xc8\xa5\xfc\xf9\xe6\x0a\xa0\x49\xb1\xa5\x80\x70\x9a\xab\x01\x60\xe4\x25\x55\xf7\x30\x80\xdc\x37\x92\x6f\x2e\x23\x6e\x49\xdd\x07\x8b\x2f\x1b\xa5\x0f\x16\x15\xb7\x84\x9e\x50\x5a\x7c\xa1\xd0\x77\x40\x83\x6d\xfa\xac\x21\x20\x7b\x0a\x04\x64\x51\xfc\x8c\x85\xc6\x65\x73\xfd\x8d\xcd\x23\x1f\xa8\x7a\xf5\x35\xdf\x3c\x0a\xad\xd1\x12\x6a\xe1\xee\x83\x54\xab\xb5\x06\x7e\xd8\x59\xe3\x82\x5c\x9c\x5a\xc2\x61\xb7\x95\xfa\x17\x81\x90\x1c\x98\x82\x96\x24\xc3\x27\x11\x8d\xe5\xd1\xb5\xd6\x27\xd0\xf4\x45\xb3\xd1\xca\x9c\xd6\x1b\x14\xec\x34\x6e\xf0\xed\x3c\x56\x3f\xa3\xa9\x43\x4e\x5f\x5a\x9e\x9f\x57\x1a\x94\xf1\x6d\xe4\x05\x53\xe0\x85\x4f\xf9\xc2\x3e\xb3\x20\x1e\xab\xcc\xbe\xc9\x60\x75\x07\x78\x05\x6d\x72\xeb\xde\xf0\x83\xc6\x09\x8d\xa7\x75\x53\x09\xbd\x69\xf0\x78\x3c\xcb\x15\x4f\x68\x00\x90\xeb\x23\x3f\x35\x10\x75\x8b\x4f\x9e\x22\xc5\x08\x1e\x72\x71\x70\x92\x1c\x1e\x8c\x02\x37\xf0\x6b\xfc\xdf\x39\xc5\x35\x6a\x29\x6a\x05\xef\xe7\xe0\x8c\xc9\x1f\x81\x4b\xad\x9e\x07\x89\x0f\x32\xfb\x66\x5e\x65\xf9\x7e\x6b\x7c\xad\xf9\xc0\x19\xae\x9b\x22\x89\x35\xb1\xb8\x63\x92\xbc\xde\x1a\x7a\xeb\x86\x11\x98\x4a\x22\xc8\x9d\x40\xbf\x30\x5c\x01\x97\xc1\x59\xe4\x2b\xad\xf1\x04\xe6\x90\xfc\x35\xb9\xee\xe7\x4c\xc0\x71\xb0\x8f\x31\xf4\xf0\x72\x5b\x13\x91\x73\x06\xeb\x68\x24\x71\x37\xbd\xd3\xa4\x8b\xbb\x2b\xd6\x35\x5a\xa7\xf5\x90\xc7\xad\x42\x93\x1e\x8f\x9f\x85\xc5\x85\x4a\xf1\xb8\xb3\x66\x20\x31\x01\x9b\xc0\x3e\xa8\x83\xa8\x19\xb1\x01\xea\x48\xea\x31\xd6\xde\xc7\xc2\xd2\x92\xdb\x3a\xb4\xa6\x4a\xbd\xbb\x99\x72\xc7\x5b\x9e\x08\x82\x77\x68\x6c\xa0\xdf\xdd\xff\x4c\x6d\x01\xbd\x3b\x1b\xff\x30\xda\x6d\x13\xf9\x79\x61\xee\xbe\xe0\x86\x6e\x71\x55\xfe\xe9\x6d\x94\x1b\xe5\x9f\x21\xbf\x29\x37\xf2\x1b\x7c\x69\x9d\xdf\x80\x2d\x1e\xe3\x9c\x26\xf3\xe0\x09\xfb\x7d\xae\x52\xaa\xbf\xd3\xd3\xa0\x99\xc7\x1e\x7c\x0f\x3b\xc4\xef\x89\xf3\xd8\x30\xb8\x44\xdc\xa6\x29\xda\x59\x21\x83\x5f\x81\x7b\xf8\x20\x18\xe3\xeb\xfd\xcc\xec\x36\xd6\x98\x0d\x16\xac\x0b\x35\x7c\x9d\x9c\x81\x78\xef\x79\xe0\xaf\xa1\xe6\x1a\xbe\x00\x69\x55\x4e\x72\x02\x8f\x89\xa1\xfe\x82\x79\xb9\xf5\x78\x3a\xcb\x07\xe8\x77\x90\x23\xd0\x8c\xa4\x8f\x42\x8e\x43\x23\x96\xbc\x83\xf3\x21\xf7\x60\x2d\xef\xbe\x89\xde\x59\x03\xb5\xbc\x6d\x22\x57\xb1\xc6\x03\x74\x4c\xac\xff\x82\xac\xf8\xbc\xcf\xa5\x42\x6d\xd4\xe3\x9b\xe4\x31\x91\xc9\x4c\x3c\xe0\x9f\x01\xe8\x06\xb6\x17\xd6\x8b\xf2\x4d\xf0\x58\x7d\x14\x3d\x78\x68\x82\x73\x1f\x60\x57\x58\xa8\x8c\xe0\x2a\x67\xda\x9b\x4c\xac\xa7\x48\xf2\xfd\x9d\x54\x79\x82\x0b\xe0\x0d\x0f\x78\x83\x5c\x89\xf5\x84\xc0\x0f\x72\x55\xc6\x2a\xc3\x28\xf2\x57\x8a\x57\xce\x70\x1b\x86\xc0\x63\x9d\x2f\x72\x47\x6d\xb9\x3b\x9f\xda\x62\x93\xdf\x8a\x24\x5b\xb3\xa9\xed\xff\xc7\x7e\x08\x57\xfe\x1f\x00\x00\xff\xff\x4b\x4f\xd2\xf1\x00\x20\x00\x00")

func templatesGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesGo,
		"templates.go",
	)
}

func templatesGo() (*asset, error) {
	bytes, err := templatesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates.go", size: 20480, mode: os.FileMode(420), modTime: time.Unix(1463268548, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"init/rails/Dockerfile": initRailsDockerfile,
	"init/rails/bin/web": initRailsBinWeb,
	"init/rails/config/initializers/convox.rb": initRailsConfigInitializersConvoxRb,
	"init/rails/docker-compose.yml": initRailsDockerComposeYml,
	"init/ruby/Dockerfile": initRubyDockerfile,
	"init/ruby/docker-compose.yml": initRubyDockerComposeYml,
	"init/sinatra/Dockerfile": initSinatraDockerfile,
	"init/sinatra/docker-compose.yml": initSinatraDockerComposeYml,
	"templates.go": templatesGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"init": &bintree{nil, map[string]*bintree{
		"rails": &bintree{nil, map[string]*bintree{
			"Dockerfile": &bintree{initRailsDockerfile, map[string]*bintree{
			}},
			"bin": &bintree{nil, map[string]*bintree{
				"web": &bintree{initRailsBinWeb, map[string]*bintree{
				}},
			}},
			"config": &bintree{nil, map[string]*bintree{
				"initializers": &bintree{nil, map[string]*bintree{
					"convox.rb": &bintree{initRailsConfigInitializersConvoxRb, map[string]*bintree{
					}},
				}},
			}},
			"docker-compose.yml": &bintree{initRailsDockerComposeYml, map[string]*bintree{
			}},
		}},
		"ruby": &bintree{nil, map[string]*bintree{
			"Dockerfile": &bintree{initRubyDockerfile, map[string]*bintree{
			}},
			"docker-compose.yml": &bintree{initRubyDockerComposeYml, map[string]*bintree{
			}},
		}},
		"sinatra": &bintree{nil, map[string]*bintree{
			"Dockerfile": &bintree{initSinatraDockerfile, map[string]*bintree{
			}},
			"docker-compose.yml": &bintree{initSinatraDockerComposeYml, map[string]*bintree{
			}},
		}},
	}},
	"templates.go": &bintree{templatesGo, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

