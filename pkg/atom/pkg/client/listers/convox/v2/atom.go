/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v2

import (
	v2 "github.com/convox/rack/pkg/atom/pkg/apis/convox/v2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AtomLister helps list Atoms.
type AtomLister interface {
	// List lists all Atoms in the indexer.
	List(selector labels.Selector) (ret []*v2.Atom, err error)
	// Atoms returns an object that can list and get Atoms.
	Atoms(namespace string) AtomNamespaceLister
	AtomListerExpansion
}

// atomLister implements the AtomLister interface.
type atomLister struct {
	indexer cache.Indexer
}

// NewAtomLister returns a new AtomLister.
func NewAtomLister(indexer cache.Indexer) AtomLister {
	return &atomLister{indexer: indexer}
}

// List lists all Atoms in the indexer.
func (s *atomLister) List(selector labels.Selector) (ret []*v2.Atom, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v2.Atom))
	})
	return ret, err
}

// Atoms returns an object that can list and get Atoms.
func (s *atomLister) Atoms(namespace string) AtomNamespaceLister {
	return atomNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AtomNamespaceLister helps list and get Atoms.
type AtomNamespaceLister interface {
	// List lists all Atoms in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v2.Atom, err error)
	// Get retrieves the Atom from the indexer for a given namespace and name.
	Get(name string) (*v2.Atom, error)
	AtomNamespaceListerExpansion
}

// atomNamespaceLister implements the AtomNamespaceLister
// interface.
type atomNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Atoms in the indexer for a given namespace.
func (s atomNamespaceLister) List(selector labels.Selector) (ret []*v2.Atom, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v2.Atom))
	})
	return ret, err
}

// Get retrieves the Atom from the indexer for a given namespace and name.
func (s atomNamespaceLister) Get(name string) (*v2.Atom, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v2.Resource("atom"), name)
	}
	return obj.(*v2.Atom), nil
}
