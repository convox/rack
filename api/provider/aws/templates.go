// Code generated by go-bindata.
// sources:
// provider/aws/templates/service/syslog.tmpl
// DO NOT EDIT!

package aws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesServiceSyslogTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x57\x4b\x6f\xdb\x38\x10\xbe\xfb\x57\x08\xba\x14\xc8\x26\x76\x9c\xa2\x58\x2c\x6f\xde\xa4\xe9\x66\x37\xdd\x1a\x76\xda\x1e\x16\x39\x30\x34\xed\x68\x23\x89\x02\x49\x25\x4d\x0d\xfd\xf7\x0e\xa9\x87\xc5\x97\xe5\x00\x89\x5b\x04\x10\x39\x1c\xce\x7c\xf3\xe0\x37\xdb\x6d\xb4\xa2\xeb\x24\xa7\x51\x2c\x28\x7f\x4c\x08\x8d\xa3\xaa\x1a\x6d\x47\x51\x14\xcf\xbe\x2f\x6f\x68\x56\xa4\x58\xd2\x4b\xc6\x33\x2c\xbf\x51\x2e\x12\x96\xc7\x28\x8a\xcf\x4e\xa7\xa7\x27\xa7\x7f\xc0\xff\xf8\x58\xc9\x7e\x29\x65\x51\x4a\x01\x5b\xea\x28\x2c\x7c\xe5\x69\xf7\x01\x9f\xdf\x70\x5a\xd2\xde\x02\x2c\x2d\xe8\x5a\x69\x52\x82\xcd\x62\x35\x6a\xff\x56\x5a\xe9\x1c\x73\x9c\x51\x09\xb7\xee\xf4\x5e\xb3\xcd\x27\xce\xca\xa2\xaf\xfc\x82\x0a\xc2\x93\x42\x36\xb6\x9d\xa7\xac\x5c\x7d\xc7\x92\xdc\x47\x20\x1d\x69\xf1\x48\xb2\x48\x94\x77\x4a\xee\x8e\xc2\x87\xb6\x5a\x1f\xbe\x79\x2e\x94\x61\xf1\x52\xf2\x24\xdf\xd4\xa6\x54\xc7\x5e\x27\xac\x7b\x96\xcf\x22\x05\xfd\x5f\x17\xd7\xc7\x11\x1d\x6f\xc6\xd1\x3b\x49\x8a\xdf\x64\x2a\xd0\x64\x02\x1b\x62\x3a\x2e\x70\x41\xb9\xe4\x38\x49\x71\x51\x8c\x09\xcb\xd0\x74\x7a\xf6\xfe\xc3\xbb\x81\xdb\x3b\x00\x16\x54\xb0\x92\x13\xda\xf3\xff\xb2\xcc\x49\x63\x40\x67\xd7\x9c\x33\x75\x4f\xd2\x93\xd3\xeb\xe7\x6c\x65\x62\x0e\x6b\xcb\xf7\x7f\x96\xe4\x81\x4a\x6b\x5d\x69\xce\x11\xfa\x9b\x25\x4a\xf3\x7f\xc6\x0e\xec\x9d\x74\x16\xb7\x3f\x5b\x04\x84\x08\xcb\x1f\xd9\x0f\x47\x32\xb2\x2e\x32\xc3\x0f\x49\x86\xd0\x82\x6e\x94\x4b\x8e\x58\x65\xad\xdc\x8e\x42\x5f\xd5\xb1\xe9\xe4\x3f\xf4\x59\x69\x4f\x71\x76\xb7\xc2\x13\xa1\x23\x35\xfe\x99\x14\xbb\x3b\x7a\x27\xac\xc0\x1a\x78\xb9\x59\x6a\x1e\x6d\xe3\xf1\x2f\x64\x6a\xe0\xac\x76\x71\x29\x31\x79\xd0\x42\x5e\x35\x7f\xe1\x7c\x95\x52\xae\xc4\x93\x7c\x45\x7f\x8c\xef\x9b\x85\x9e\xcc\x82\xa5\xce\x15\x2a\x68\x9f\xa8\x9c\x49\xe9\x84\xad\x96\x37\xa3\x11\xcf\xb8\x01\xf3\xad\xd7\x98\x45\x99\xcb\x44\xbb\x13\xe7\x90\x42\xff\x8b\xbe\x15\x37\xb0\xc3\x4a\xa9\x9b\xc0\x87\xae\x72\x9d\x84\xd6\x4e\x5f\x6b\xf8\x11\xea\x92\xd6\xa8\xae\x39\xe5\x59\x22\xc4\x81\xc9\x3c\x6b\xd3\xbe\x09\x2a\xba\x82\x6c\x7b\xa0\x9d\xea\x97\xc5\xc4\xb4\xc8\x06\x60\x0e\xc5\x48\x92\x02\xa7\x3e\xb8\xbd\x35\x12\x8f\x2d\xa4\x9d\x12\x52\x1d\xc1\xa9\x0d\xb7\x32\x0e\xa8\x8b\xca\xd6\x12\xe3\x0c\xff\x64\x39\x7e\x12\xaa\xc7\xc4\xc1\x22\xf1\x47\x7b\xa9\x5b\xcc\x8c\x10\x06\x61\xdf\x97\xc2\x8d\xc8\xd5\xca\x0f\x5a\xa3\x87\x3b\x25\x14\x06\x6d\x08\x33\xcc\x73\x04\x5e\x21\x85\x1d\x7a\x2b\xf0\x5e\xac\xd8\x83\x43\x50\x37\x58\x7e\xb2\x51\x0f\xd0\x4b\x6e\xe9\xde\xb8\x61\xfd\x47\x07\x45\xfb\xb0\x2a\xed\xd5\xa3\x51\xa7\x56\xdf\x09\x57\xa8\x10\x65\x46\x95\xf4\x9c\xa5\x09\x79\xbe\x60\x04\xbe\xdd\x9c\x82\x56\x28\x69\xb3\x61\x86\xdc\x86\x64\x57\xf4\x9e\xe7\x46\x48\x81\x76\x57\xda\x58\xdd\x3a\x58\x7d\x5c\xaf\x29\xd1\x7d\x6b\x96\xa6\xec\xc9\x89\x47\xb0\xea\x5b\xb3\x1b\x7e\xe4\x33\x26\x6a\xbb\xd2\x78\x4f\x29\x6a\xb3\xec\x90\x8e\x42\x5f\x86\x03\xb1\x49\xbd\xce\x4e\x80\x7d\x4d\x7f\x0f\x34\x2f\x2c\xef\x95\xdc\xa4\xdf\x12\x75\x44\xea\x88\xf5\xad\xb7\x28\xc0\xde\xb8\xd5\x20\x04\x63\xe7\xaa\x6b\x8e\xec\x89\xa1\xde\x27\x8a\xae\x3d\x29\xba\x86\xe6\xa5\xfc\x4c\x81\x09\x91\x0b\x2c\xb1\x87\x48\x68\x79\x7f\xfb\xf7\xc8\x3a\x29\xa0\x8f\x0f\xa5\x81\x16\x6a\x89\x97\x12\x3b\xf2\xf0\x92\x03\x39\xce\x90\xeb\xba\xaf\x9d\x73\x0a\x98\x76\x35\x1f\xf2\xda\x10\x05\xba\x48\x71\xb6\x57\x16\xb0\x04\xc1\x8f\x8f\x10\x2b\xf1\x86\xe8\x18\x2d\xfa\x48\xfd\x7b\x3b\xb8\x74\xa6\xac\xf5\x28\x02\x72\xa8\x66\x6d\x77\x54\x53\xab\x37\xf4\xd1\x67\xeb\x7e\xbe\xdc\xc9\x04\x22\xe4\xa3\xcf\xdd\x99\x16\x51\xcb\xdb\xa0\x2a\x3f\x98\x3d\x47\x86\x79\x76\xfb\xf3\x04\xaa\xd3\xf3\x2a\x06\x04\x9f\xce\x03\x6d\x10\x2a\xd4\x93\xd7\xb0\xc4\xc3\xc7\x5f\x62\xc9\xc4\x93\xe6\xf5\xcf\xee\xf0\xe1\x55\x7b\xba\xf1\xcc\x3b\xce\x1b\x35\xf0\x0e\x78\xcc\x6e\x9a\x7a\xc3\x85\xe3\xfa\xb1\xd7\x23\xf2\x65\x9b\x5b\xbb\x81\xb9\xaf\x69\x67\xcc\xed\x7e\xfe\x70\x35\xfb\x0c\xa9\xd5\xbd\xc1\x2d\x6d\x58\xd6\xe3\xb6\x9e\xaa\x2e\x93\x54\xea\xe9\xa6\x37\x4b\x17\x34\x5f\x89\x2f\x66\xf9\xc4\x36\x07\xe9\x61\x10\xe4\x1d\xd0\x07\x64\x92\x6b\x4f\x02\xec\x33\x34\x21\x79\x86\x07\xbd\x7e\xd0\x94\x54\xfb\x04\xaf\x2d\xfc\xd5\x01\xe9\xbf\xb7\x6d\x3b\xdf\x33\x82\xb8\x2c\x6f\x88\xa7\xa9\x16\x8b\x3c\xb0\x8e\xda\xc3\xd5\xa8\x1a\x6d\xb7\x11\x00\x1b\x55\xd5\xaf\x00\x00\x00\xff\xff\x1c\xa4\x67\x21\xdb\x11\x00\x00")

func templatesServiceSyslogTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesServiceSyslogTmpl,
		"templates/service/syslog.tmpl",
	)
}

func templatesServiceSyslogTmpl() (*asset, error) {
	bytes, err := templatesServiceSyslogTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/service/syslog.tmpl", size: 4571, mode: os.FileMode(420), modTime: time.Unix(1461003499, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/service/syslog.tmpl": templatesServiceSyslogTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"service": &bintree{nil, map[string]*bintree{
			"syslog.tmpl": &bintree{templatesServiceSyslogTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

