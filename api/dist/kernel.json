{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "Autoscale": { "Fn::Equals": [ { "Ref": "Autoscale" }, "Yes" ] },
    "BlankAmi": { "Fn::Equals": [ { "Ref": "Ami" }, "" ] },
    "BlankCertificate": { "Fn::Equals": [ { "Ref": "Certificate" }, "" ] },
    "BlankDockerImageApi": { "Fn::Equals": [ { "Ref": "DockerImageApi" }, "" ] },
    "BlankInstanceBootCommand": { "Fn::Equals": [ { "Ref": "InstanceBootCommand" }, "" ] },
    "BlankInstanceRunCommand": { "Fn::Equals": [ { "Ref": "InstanceRunCommand" }, "" ] },
    "BlankKey": { "Fn::Equals": [ { "Ref": "Key" }, "" ] },
    "BlankRegistryHost": { "Fn::Equals": [ { "Ref": "RegistryHost" }, "" ] },
    "Development": { "Fn::Equals": [ { "Ref": "Development" }, "Yes" ] },
    "Private": { "Fn::Equals": [ { "Ref": "Private" }, "Yes" ] },
    "PrivateApi": { "Fn::Equals": [ { "Ref": "PrivateApi" }, "Yes" ] },
    "RegionHasEFS": {
        "Fn::Or": [
          { "Fn::Equals": [ { "Ref": "AWS::Region" }, "us-east-1" ]},
          { "Fn::Equals": [ { "Ref": "AWS::Region" }, "us-west-2" ]},
          { "Fn::Equals": [ { "Ref": "AWS::Region" }, "eu-west-1" ]}
        ]
    }
  },
  "Mappings": {
    "RegionConfig": {
      "us-east-1": { "Ami": "ami-8f7687e2" },
      "us-west-1": { "Ami": "ami-bb473cdb" },
      "us-west-2": { "Ami": "ami-84b44de4" },
      "eu-west-1": { "Ami": "ami-4e6ffe3d" },
      "eu-central-1": { "Ami": "ami-b0cc23df" },
      "ap-northeast-1": { "Ami": "ami-095dbf68" },
      "ap-southeast-1": { "Ami": "ami-cf03d2ac" },
      "ap-southeast-2": { "Ami": "ami-697a540a" }
    }
  },
  "Outputs": {
    "Autoscale": {
      "Condition": "Development",
      "Value": { "Fn::If": [ "Autoscale", "true", "false" ] }
    },
    "AwsRegion": {
      "Condition": "Development",
      "Value": { "Ref": "AWS::Region" }
    },
    "AwsAccess": {
      "Condition": "Development",
      "Value": { "Ref": "KernelAccess" }
    },
    "AwsSecret": {
      "Condition": "Development",
      "Value": { "Fn::GetAtt": [ "KernelAccess", "SecretAccessKey" ] }
    },
    "Cluster": {
      "Condition": "Development",
      "Value": { "Ref": "Cluster" }
    },
    "CustomTopic": {
      "Condition": "Development",
      "Value": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] }
    },
    "Dashboard": {
      "Value": { "Fn::GetAtt": [ "Balancer", "DNSName" ] }
    },
    "DockerImageApi": {
      "Condition": "Development",
      "Value": { "Fn::If": [ "BlankDockerImageApi",
        { "Fn::Join": [ ":", [ "convox/api", { "Ref": "Version" } ] ] },
        { "Ref": "DockerImageApi" }
      ] }
    },
    "DynamoBuilds": {
      "Condition": "Development",
      "Value": { "Ref": "DynamoBuilds" }
    },
    "DynamoReleases": {
      "Condition": "Development",
      "Value": { "Ref": "DynamoReleases" }
    },
    "EncryptionKey": {
      "Condition": "Development",
      "Value": { "Ref": "EncryptionKey" }
    },
    "LogGroup": {
      "Value": { "Ref": "LogGroup" }
    },
    "NotificationHost": {
      "Condition": "Development",
      "Value": { "Fn::GetAtt": [ "Balancer", "DNSName" ] }
    },
    "NotificationTopic": {
      "Condition": "Development",
      "Value" : { "Ref": "NotificationTopic" }
    },
    "Password": {
      "Condition": "Development",
      "Value": { "Ref": "Password" }
    },
    "Private": {
      "Condition": "Development",
      "Value": { "Ref": "Private" }
    },
    "Provider": {
      "Condition": "Development",
      "Value": "aws"
    },
    "Rack": {
      "Condition": "Development",
      "Value": { "Ref": "AWS::StackName" }
    },
    "RegistryHost": {
      "Condition": "Development",
      "Value": { "Fn::If": [ "BlankRegistryHost",
        { "Fn::Join": [ ":", [ { "Fn::GetAtt": [ "Balancer", "DNSName" ] }, "5000" ] ] },
        { "Fn::Join": [ ":", [ { "Ref": "RegistryHost" }, { "Ref": "RegistryPort" } ] ] }
      ] }
    },
    "Release": {
      "Condition": "Development",
      "Value": { "Ref": "Version" }
    },
    "SettingsBucket": {
      "Condition": "Development",
      "Value": { "Ref": "Settings" }
    },
    "Subnets": {
      "Condition": "Development",
      "Value": { "Fn::Join": [ ",", [ { "Ref": "Subnet0" }, { "Ref": "Subnet1" }, { "Ref": "Subnet2" } ] ] }
    },
    "SubnetsPrivate": {
      "Condition": "Development",
      "Value": { "Fn::If": [ "Private",
        { "Fn::Join": [ ",", [ { "Ref": "SubnetPrivate0" }, { "Ref": "SubnetPrivate1" }, { "Ref": "SubnetPrivate2" } ] ] },
        ""
      ] }
    },
    "StackId": {
      "Condition": "Development",
      "Value": { "Ref": "AWS::StackId" }
    },
    "Vpc": {
      "Condition": "Development",
      "Value": { "Ref": "Vpc" }
    }
  },
  "Parameters": {
    "Ami": {
      "Type": "String",
      "Description": "Amazon Machine Image: http://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_container_instance.html",
      "Default": ""
    },
    "Autoscale": {
      "Type": "String",
      "Description": "Autoscale rack instances",
      "Default": "No",
      "AllowedValues": [ "Yes", "No" ]
    },
    "ClientId": {
      "Type": "String",
      "Description": "Anonymous identifier",
      "Default": "dev@convox.com"
    },
    "Certificate": {
      "Type": "String",
      "Description": "SSL certificate",
      "Default": ""
    },
    "ContainerDisk": {
      "Type": "Number",
      "Description": "Default container disk size in GB",
      "Default": "10"
    },
    "Development": {
      "Type": "String",
      "Description": "Development mode",
      "Default": "No",
      "AllowedValues": [ "Yes", "No" ]
    },
    "DockerImageApi": {
      "Type": "String",
      "Description": "Image to use for the api container. Overrides current Version.",
      "Default": ""
    },
    "DockerImageApp": {
      "Type": "String",
      "Description": "Deprecated",
      "Default": ""
    },
    "DockerImageBuild": {
      "Type": "String",
      "Description": "Deprecated",
      "Default": ""
    },
    "DockerImageService": {
      "Type": "String",
      "Description": "Deprecated",
      "Default": ""
    },
    "Encryption": {
      "Type": "String",
      "Description": "Encrypt secrets with KMS",
      "Default": "Yes",
      "AllowedValues": [ "Yes", "No" ]
    },
    "InstanceBootCommand": {
      "Type": "String",
      "Description": "A single line of shell script to run as CloudInit command early during instance boot.",
      "Default": ""
    },
    "InstanceRunCommand": {
      "Type": "String",
      "Description": "A single line of shell script to run as CloudInit command late during instance boot.",
      "Default": ""
    },
    "InstanceCount": {
      "Default": "3",
      "Description": "The number of instances in the runtime cluster",
      "MinValue": "2",
      "Type": "Number"
    },
    "InstanceType": {
      "Default": "t2.small",
      "Description": "The type of the instances in the runtime cluster",
      "Type": "String"
    },
    "Key": {
      "Default": "",
      "Description": "SSH key name for access to cluster instances",
      "Type": "String"
    },
    "Password": {
      "Description": "(REQUIRED) API HTTP password",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "50"
    },
    "Private": {
      "Type": "String",
      "Description": "Create non publicly routable resources",
      "Default": "No",
      "AllowedValues": [ "Yes", "No" ]
    },
    "PrivateApi": {
      "Type": "String",
      "Description": "Put Rack API Load Balancer in private network",
      "Default": "No",
      "AllowedValues": [ "Yes", "No" ]
    },
    "RegistryHost": {
      "Type": "String",
      "Description": "Registry host",
      "Default": ""
    },
    "RegistryPort": {
      "Type": "String",
      "Description": "Registry port",
      "Default": ""
    },
    "Subnet0CIDR": {
      "Default": "10.0.1.0/24",
      "Description": "Public Subnet 0 CIDR Block",
      "Type": "String"
    },
    "Subnet1CIDR": {
      "Default": "10.0.2.0/24",
      "Description": "Public Subnet 1 CIDR Block",
      "Type": "String"
    },
    "Subnet2CIDR": {
      "Default": "10.0.3.0/24",
      "Description": "Public Subnet 2 CIDR Block",
      "Type": "String"
    },
    "SubnetPrivate0CIDR": {
      "Default": "10.0.4.0/24",
      "Description": "Private Subnet 0 CIDR Block",
      "Type": "String"
    },
    "SubnetPrivate1CIDR": {
      "Default": "10.0.5.0/24",
      "Description": "Private Subnet 1 CIDR Block",
      "Type": "String"
    },
    "SubnetPrivate2CIDR": {
      "Default": "10.0.6.0/24",
      "Description": "Private Subnet 2 CIDR Block",
      "Type": "String"
    },
    "SwapSize": {
      "Type": "Number",
      "Description": "Default swap volume size in GB",
      "Default": "5"
    },
    "Version": {
      "Description": "(REQUIRED) Convox release version",
      "MinLength" : "1",
      "Type": "String"
    },
    "VolumeSize": {
      "Type": "Number",
      "Description": "Default disk size in GB",
      "Default": "50"
    },
    "VPCCIDR": {
      "Default": "10.0.0.0/16",
      "Description": "VPC CIDR Block",
      "Type": "String"
    },
    "Tenancy": {
      "Type": "String",
      "Description": "Dedicated Hardware",
      "Default": "default",
      "AllowedValues": [ "default", "dedicated" ]
    }
  },
  "Resources": {
    "EncryptionKey": {
      "DependsOn": "CustomTopic",
      "Type": "Custom::KMSKey",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
        "Description": "Convox Master Encryption",
        "KeyUsage": "ENCRYPT_DECRYPT"
      }
    },
    "LogGroup": {
      "Type": "AWS::Logs::LogGroup"
    },
    "LogSubscriptionFilter": {
      "DependsOn": [ "LogSubscriptionFilterPermission" ],
      "Type" : "AWS::Logs::SubscriptionFilter",
      "Properties" : {
        "DestinationArn" : { "Fn::GetAtt": [ "LogSubscriptionFilterFunction", "Arn" ] },
        "FilterPattern" : "",
        "LogGroupName" : { "Ref": "LogGroup" }
      }
    },
    "LogSubscriptionFilterFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile":  { "Fn::Join": ["\n", [
            "var AWS = require('aws-sdk');",
            "var zlib = require('zlib');",
            "exports.handler = function(input, context) {",
            "  var fn = process.env.AWS_LAMBDA_FUNCTION_NAME;",
            "  var stack = fn.split('-').slice(0,-2).join('-');",
            "  var cloudwatch = new AWS.CloudWatch();",
            "  var payload = new Buffer(input.awslogs.data, 'base64');",
            "  var dr = /(dim#)([^=]+)=(\\\")?([^ ]+)(\\\")?/g;",
            "  var mr = /(count#|measure#|sample#)([\\w.]+)=(\\\")?([\\d.]+)([\\w/%\\/]+)?(\\\")?/g;",
            "  var units = {'sec':'Seconds','s':'Seconds','us':'Microseconds','ms':'Milliseconds',",
            "    'B':'Bytes','kB':'Kilobytes','mB':'Megabytes','gB':'Gigabytes','tB':'Terabytes',",
            "    'b':'Bits','kb':'Kilobits','mb':'Megabits','gb':'Gigabits','tb':'Terabits',",
            "    'B/s':'Bytes/Second','kB/s':'Kilobytes/Second','mB/s':'Megabytes/Second','gB/s':'Gigabytes/Second','tB/s':'Terabytes/Second',",
            "    'b/s':'Bits/Second','kb/s':'Kilobits/Second','mb/s':'Megabits/Second','gb/s':'Gigabits/Second','tb/s':'Terabits/Second',",
            "    '%':'Percent','count':'Count','count/s':'Count/Second'};",
            "  zlib.gunzip(payload, function(e, r) {",
            "    if (e) {",
            "      context.fail(e);",
            "    } else {",
            "      data = [];",
            "      r = JSON.parse(r.toString('ascii'));",
            "      r.logEvents.forEach(function(e) {",
            "        dims = [];",
            "        e.message.replace(dr, function(match, p1, p2, p3, p4, p5, offset, string) {",
            "          dims.push({Name: p2, Value: p4});",
            "        });",
            "        e.message.replace(mr, function(match, p1, p2, p3, p4, p5, p6, offset, string) {",
            "          datum = {MetricName: p2, Dimensions: dims, Value: parseFloat(p4), Unit: units[p5] || 'None'};",
            "          if (p1 == 'count#')",
            "            datum.Unit = 'Count';",
            "          data.push(datum);",
            "        });",
            "      });",
            "      console.log('D:',data);",
            "      var cb = function(err, d) { if (err) { console.log(err, err.stack); context.fail(err) } else console.log(d) };",
            "      for (var i=0; i<data.length; i+=20) {",
            "        cloudwatch.putMetricData({MetricData: data.slice(i, i+20), Namespace: stack}, cb);",
            "      }",
            "      context.succeed();",
            "    }",
            "  });",
            "};"
          ]]}
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": { "Fn::GetAtt": [ "LogSubscriptionFilterRole", "Arn" ] },
        "Runtime": "nodejs",
        "Timeout": "30"
      }
    },
    "LogSubscriptionFilterPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties" : {
        "Action" : "lambda:InvokeFunction",
        "FunctionName" : { "Ref": "LogSubscriptionFilterFunction" },
        "Principal" : { "Fn::Join": [".", ["logs", { "Ref": "AWS::Region" }, "amazonaws.com"]] },
        "SourceAccount" : { "Ref": "AWS::AccountId" },
        "SourceArn" : { "Fn::GetAtt": [ "LogGroup", "Arn" ] }
      }
    },
    "LogSubscriptionFilterRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": [ "lambda.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "LogSubscriptionFilterRole",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:PutMetricData"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "CustomTopicRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": [ "lambda.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "Administrator",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                { "Effect": "Allow", "Action": "*", "Resource": "*" },
                { "Effect": "Deny", "Action": "s3:DeleteObject", "Resource": "*" }
              ]
            }
          }
        ]
      }
    },
    "NotificationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName" : { "Fn::Join": ["", [{"Ref":"AWS::StackName"}, "-notifications"]] }
      }
    },
    "CustomTopic": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": { "Fn::Join": [ "-", [ "convox", { "Ref": "AWS::Region" } ] ] },
          "S3Key": { "Fn::Join": [ "", [ "release/", { "Ref": "Version" }, "/formation.zip" ] ] }
        },
        "Handler": "lambda.external",
        "MemorySize": "128",
        "Role": { "Fn::GetAtt": [ "CustomTopicRole", "Arn" ] },
        "Runtime": "nodejs",
        "Timeout": "30"
      }
    },
    "AvailabilityZones": {
      "DependsOn": [ "CustomTopic", "Vpc" ],
      "Type": "Custom::EC2AvailabilityZones",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
        "Vpc": { "Ref": "Vpc" }
      }
    },
    "KernelUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "Path": "/convox/",
        "Policies": [
          {
            "PolicyName": "Administrator",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [ { "Effect": "Allow", "Action": "*", "Resource": "*" } ]
            }
          }
        ]
      }
    },
    "KernelAccess": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "Serial": "1",
        "Status": "Active",
        "UserName": { "Ref": "KernelUser" }
      }
    },
    "Cluster": {
      "Type": "AWS::ECS::Cluster"
    },
    "Vpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": { "Ref": "VPCCIDR" },
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "InstanceTenancy": "default",
        "Tags": [
          { "Key": "Name", "Value": { "Ref": "AWS::StackName" } }
        ]
      }
    },
    "Gateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
      }
    },
    "GatewayAttachment": {
      "DependsOn": [ "Gateway", "Vpc" ],
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": { "Ref": "Gateway" },
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "NatGateway0": {
      "Condition": "Private",
      "Type": "Custom::EC2NatGateway",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
        "AllocationId": { "Fn::GetAtt": [ "NatIp0", "AllocationId" ] },
        "SubnetId": { "Ref": "Subnet0" }
      }
    },
    "NatGateway1": {
      "Condition": "Private",
      "Type": "Custom::EC2NatGateway",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
        "AllocationId": { "Fn::GetAtt": [ "NatIp1", "AllocationId" ] },
        "SubnetId": { "Ref": "Subnet1" }
      }
    },
    "NatGateway2": {
      "Condition": "Private",
      "Type": "Custom::EC2NatGateway",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
        "AllocationId": { "Fn::GetAtt": [ "NatIp2", "AllocationId" ] },
        "SubnetId": { "Ref": "Subnet2" }
      }
    },
    "NatIp0": {
      "Condition": "Private",
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "NatIp1": {
      "Condition": "Private",
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "NatIp2": {
      "Condition": "Private",
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "Subnet0": {
      "DependsOn": [ "AvailabilityZones", "Vpc" ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "Tags": [
          {"Key": "Name", "Value": { "Fn::Join": [ " ", [ {"Ref": "AWS::StackName"}, "public", "0" ] ] }}
        ],
        "AvailabilityZone": { "Fn::GetAtt": [ "AvailabilityZones", "AvailabilityZone0" ] },
        "CidrBlock": { "Ref": "Subnet0CIDR" },
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "Subnet1": {
      "DependsOn": [ "AvailabilityZones", "Vpc" ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "Tags": [
          {"Key": "Name", "Value": { "Fn::Join": [ " ", [ {"Ref": "AWS::StackName"}, "public", "1" ] ] }}
        ],
        "AvailabilityZone": { "Fn::GetAtt": [ "AvailabilityZones", "AvailabilityZone1" ] },
        "CidrBlock": { "Ref": "Subnet1CIDR" },
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "Subnet2": {
      "DependsOn": [ "AvailabilityZones", "Vpc" ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "Tags": [
          {"Key": "Name", "Value": { "Fn::Join": [ " ", [ {"Ref": "AWS::StackName"}, "public", "2" ] ] }}
        ],
        "AvailabilityZone": { "Fn::GetAtt": [ "AvailabilityZones", "AvailabilityZone2" ] },
        "CidrBlock": { "Ref": "Subnet2CIDR" },
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "SubnetPrivate0": {
      "Condition": "Private",
      "DependsOn": [ "AvailabilityZones", "Vpc" ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "Tags": [
          {"Key": "Name", "Value": { "Fn::Join": [ " ", [ {"Ref": "AWS::StackName"}, "private", "0" ] ] }}
        ],
        "AvailabilityZone": { "Fn::GetAtt": [ "AvailabilityZones", "AvailabilityZone0" ] },
        "CidrBlock": { "Ref": "SubnetPrivate0CIDR" },
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "SubnetPrivate1": {
      "Condition": "Private",
      "DependsOn": [ "AvailabilityZones", "Vpc" ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "Tags": [
          {"Key": "Name", "Value": { "Fn::Join": [ " ", [ {"Ref": "AWS::StackName"}, "private", "1" ] ] }}
        ],
        "AvailabilityZone": { "Fn::GetAtt": [ "AvailabilityZones", "AvailabilityZone1" ] },
        "CidrBlock": { "Ref": "SubnetPrivate1CIDR" },
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "SubnetPrivate2": {
      "Condition": "Private",
      "DependsOn": [ "AvailabilityZones", "Vpc" ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "Tags": [
          {"Key": "Name", "Value": { "Fn::Join": [ " ", [ {"Ref": "AWS::StackName"}, "private", "2" ] ] }}
        ],
        "AvailabilityZone": { "Fn::GetAtt": [ "AvailabilityZones", "AvailabilityZone2" ] },
        "CidrBlock": { "Ref": "SubnetPrivate2CIDR" },
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "Routes": {
      "DependsOn": [ "Gateway", "GatewayAttachment", "Vpc" ],
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "RouteDefault": {
      "DependsOn": [ "Gateway", "GatewayAttachment", "Routes" ],
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "Gateway" },
        "RouteTableId": { "Ref": "Routes" }
      }
    },
    "RoutesPrivate0": {
      "Condition": "Private",
      "DependsOn": [ "NatGateway0", "Vpc" ],
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "RoutesPrivate1": {
      "Condition": "Private",
      "DependsOn": [ "NatGateway1", "Vpc" ],
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "RoutesPrivate2": {
      "Condition": "Private",
      "DependsOn": [ "NatGateway2", "Vpc" ],
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "RoutePrivateDefault0": {
      "Condition": "Private",
      "DependsOn": [ "NatGateway0", "RoutesPrivate0" ],
      "Type": "Custom::EC2Route",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": { "Ref": "NatGateway0" },
        "RouteTableId": { "Ref": "RoutesPrivate0" }
      }
    },
    "RoutePrivateDefault1": {
      "Condition": "Private",
      "DependsOn": [ "NatGateway1", "RoutesPrivate1" ],
      "Type": "Custom::EC2Route",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": { "Ref": "NatGateway1" },
        "RouteTableId": { "Ref": "RoutesPrivate1" }
      }
    },
    "RoutePrivateDefault2": {
      "Condition": "Private",
      "DependsOn": [ "NatGateway2", "RoutesPrivate2" ],
      "Type": "Custom::EC2Route",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": { "Ref": "NatGateway2" },
        "RouteTableId": { "Ref": "RoutesPrivate2" }
      }
    },
    "Subnet0Routes": {
      "DependsOn": [ "Subnet0", "Routes" ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "Subnet0" },
        "RouteTableId": { "Ref": "Routes" }
      }
    },
    "Subnet1Routes": {
      "DependsOn": [ "Subnet1", "Routes" ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "Subnet1" },
        "RouteTableId": { "Ref": "Routes" }
      }
    },
    "Subnet2Routes": {
      "DependsOn": [ "Subnet2", "Routes" ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "Subnet2" },
        "RouteTableId": { "Ref": "Routes" }
      }
    },
    "SubnetPrivate0Routes": {
      "Condition": "Private",
      "DependsOn": [ "SubnetPrivate0", "RoutesPrivate0" ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "SubnetPrivate0" },
        "RouteTableId": { "Ref": "RoutesPrivate0" }
      }
    },
    "SubnetPrivate1Routes": {
      "Condition": "Private",
      "DependsOn": [ "SubnetPrivate1", "RoutesPrivate1" ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "SubnetPrivate1" },
        "RouteTableId": { "Ref": "RoutesPrivate1" }
      }
    },
    "SubnetPrivate2Routes": {
      "Condition": "Private",
      "DependsOn": [ "SubnetPrivate2", "RoutesPrivate2" ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "SubnetPrivate2" },
        "RouteTableId": { "Ref": "RoutesPrivate2" }
      }
    },
    "SecurityGroup": {
      "DependsOn": "Vpc",
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Instances",
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": { "Ref": "VPCCIDR" } },
          { "IpProtocol": "tcp", "FromPort": "0", "ToPort": "65535", "CidrIp": { "Ref": "VPCCIDR" } },
          { "IpProtocol": "udp", "FromPort": "0", "ToPort": "65535", "CidrIp": { "Ref": "VPCCIDR" } }
        ],
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "IamRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": [ "ec2.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ClusterInstanceRole",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "autoscaling:DescribeAutoScalingInstances",
                    "autoscaling:SetInstanceHealth",
                    "ecr:GetAuthorizationToken",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:BatchGetImage",
                    "ecr:BatchCheckLayerAvailability",
                    "ec2:DescribeInstances",
                    "ecs:CreateCluster",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Poll",
                    "ecs:RegisterContainerInstance",
                    "ecs:StartTelemetrySession",
                    "ecs:Submit*",
                    "kinesis:PutRecord",
                    "kinesis:PutRecords",
                    "logs:CreateLogStream",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "InstanceProfile": {
      "DependsOn": "IamRole",
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "IamRole" } ]
      }
    },
    "LaunchConfiguration": {
      "DependsOn": [ "Balancer", "Cluster", "InstanceProfile", "SecurityGroup", "LogGroup" ],
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": { "Fn::If": [ "Private", false, true ] },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sdb",
            "Ebs": {
              "VolumeSize": { "Ref": "SwapSize" },
              "VolumeType":"gp2"
            }
          },
          {
            "DeviceName": "/dev/xvdcz",
            "Ebs": {
              "VolumeSize": { "Ref": "VolumeSize" },
              "VolumeType":"gp2"
            }
          }
        ],
        "IamInstanceProfile": { "Ref": "InstanceProfile" },
        "ImageId": { "Fn::If": [ "BlankAmi", { "Fn::FindInMap": [ "RegionConfig", { "Ref": "AWS::Region" }, "Ami" ] }, { "Ref": "Ami" } ] },
        "InstanceMonitoring": true,
        "InstanceType": { "Ref": "InstanceType" },
        "KeyName": { "Fn::If": [ "BlankKey", { "Ref": "AWS::NoValue" }, { "Ref": "Key" } ] },
        "PlacementTenancy" : { "Ref": "Tenancy" },
        "SecurityGroups": [ { "Ref": "SecurityGroup" } ],
        "UserData": { "Fn::Base64":
          { "Fn::Join": [ "", [
            "#cloud-config\n",
            "repo_upgrade_exclude:\n",
            "  - kernel*\n",
            "packages:\n",
            "  - aws-cfn-bootstrap\n",
            "mounts:\n",
            "  - ['/dev/xvdb', 'none', 'swap', 'sw', '0', '0']\n",
            "bootcmd:\n",
            "  - mkswap /dev/xvdb\n",
            "  - swapon /dev/xvdb\n",
            "  - yum install -y nfs-utils\n",
            "  - mkdir /volumes\n",
            { "Fn::If": [ "RegionHasEFS",
              { "Fn::Join": [ "", [
                "  - while true; do mount -t nfs -o nfsvers=4.1 $(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone).",
                { "Ref": "VolumeFilesystem" },
                ".efs.",
                { "Ref": "AWS::Region" },
                ".amazonaws.com:/ /volumes && break; sleep 5; done\n"
              ] ] },
              ""
            ] },
            "  - [ cloud-init-per, instance, docker_storage_setup, /usr/bin/docker-storage-setup ]\n",
            "  - echo ECS_CLUSTER=", { "Ref": "Cluster" }, " >> /etc/ecs/ecs.config\n",
            "  - echo ECS_ENGINE_AUTH_TYPE=docker >> /etc/ecs/ecs.config\n",
            "  - head -n -1 /etc/sysconfig/docker >> /etc/sysconfig/docker-tmp\n",
            "  - mv /etc/sysconfig/docker-tmp /etc/sysconfig/docker\n",
            "  - echo 'OPTIONS=\"--default-ulimit nofile=1024000:1024000\"' >> /etc/sysconfig/docker\n",
            { "Fn::Join": [ "", [ "  - echo 'OPTIONS=\"${OPTIONS} --storage-opt dm.basesize=", { "Ref": "ContainerDisk" }, "G\"' >> /etc/sysconfig/docker\n" ] ] },
            { "Fn::If": [ "BlankCertificate",
              { "Fn::Join": [ "", [
                "  - echo 'ECS_ENGINE_AUTH_DATA={\"index.docker.io\":{\"username\":\"\",\"password\":\"\",\"email\":\"\"},\"", { "Fn::Join": [ ":", [ { "Fn::GetAtt": [ "Balancer", "DNSName" ] }, "5000" ] ] }, "\":{\"username\":\"convox\",\"password\":\"", { "Ref": "Password" }, "\",\"email\":\"user@convox.io\"}}' >> /etc/ecs/ecs.config\n",
                "  - echo 'OPTIONS=\"${OPTIONS} --log-opt max-file=2 --log-opt max-size=50m --insecure-registry=", { "Fn::Join": [ ":", [ { "Fn::GetAtt": [ "Balancer", "DNSName" ] }, "5000" ] ] }, " --host=unix:///var/run/docker.sock --host=0.0.0.0:2376\"' >> /etc/sysconfig/docker\n"
              ] ] },
              { "Fn::Join": [ "", [
                "  - echo 'ECS_ENGINE_AUTH_DATA={\"index.docker.io\":{\"username\":\"\",\"password\":\"\",\"email\":\"\"},\"", { "Fn::Join": [ ":", [ { "Ref": "RegistryHost" }, { "Ref": "RegistryPort" } ] ] }, "\":{\"username\":\"convox\",\"password\":\"", { "Ref": "Password" }, "\",\"email\":\"user@convox.io\"}}' >> /etc/ecs/ecs.config\n",
                "  - echo 'OPTIONS=\"${OPTIONS} --log-opt max-file=2 --log-opt max-size=50m --host=unix:///var/run/docker.sock  --host=0.0.0.0:2376\"' >> /etc/sysconfig/docker\n"
              ] ] }
            ] },
            "  - mkdir -p /etc/convox\n",
            "  - echo \"", { "Ref": "AWS::Region" }, "\" > /etc/convox/region\n",
            "  - echo \"", { "Ref": "ClientId" }, "\" > /etc/convox/client_id\n",
            "  - echo \"", { "Ref": "LogGroup" }, "\" > /etc/convox/log_group\n",
            "  - curl -s https://convox.s3.amazonaws.com/agent/0.70/convox.conf > /etc/init/convox.conf\n",
            "  - echo -e '/var/log/docker {\\n  rotate 7\\n  daily\\n  nocompress\\n  copytruncate\\n}' >> /etc/logrotate.d/docker\n",
            { "Fn::If": [ "BlankInstanceBootCommand",
              { "Ref": "AWS::NoValue" },
              { "Fn::Join": [ "", [
              "  - ", { "Ref": "InstanceBootCommand" }, "\n"
              ] ] }
            ] },
            "runcmd:\n",
            { "Fn::If": [ "BlankInstanceRunCommand",
              "  - sleep 30\n",
              { "Fn::Join": [ "", [
              "  - ", { "Ref": "InstanceRunCommand" }, "\n"
              ] ] }
            ] },
            "  - /opt/aws/bin/cfn-signal --stack ", { "Ref": "AWS::StackName" }, " --region ", {"Ref":"AWS::Region"}, " --resource Instances\n"
          ] ] }
        }
      }
    },
    "Instances": {
      "DependsOn": [ "AvailabilityZones", "GatewayAttachment", "Subnet0", "Subnet1", "Subnet2" ],
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "LaunchConfigurationName" : { "Ref": "LaunchConfiguration" },
        "AvailabilityZones": [
          { "Fn::GetAtt": [ "AvailabilityZones", "AvailabilityZone0" ] },
          { "Fn::GetAtt": [ "AvailabilityZones", "AvailabilityZone1" ] },
          { "Fn::GetAtt": [ "AvailabilityZones", "AvailabilityZone2" ] }
        ],
        "VPCZoneIdentifier": { "Fn::If": [ "Private",
          [
            { "Ref": "SubnetPrivate0" },
            { "Ref": "SubnetPrivate1" },
            { "Ref": "SubnetPrivate2" }
          ],
          [
            { "Ref": "Subnet0" },
            { "Ref": "Subnet1" },
            { "Ref": "Subnet2" }
          ]
        ] },
        "Cooldown": 5,
        "DesiredCapacity": { "Ref": "InstanceCount" },
        "HealthCheckType": "EC2",
        "HealthCheckGracePeriod": "120",
        "MinSize" : "1",
        "MaxSize" : "100",
        "MetricsCollection": [ { "Granularity": "1Minute" } ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Ref": "AWS::StackName" },
            "PropagateAtLaunch": true
          },
          {
            "Key": "Rack",
            "Value": { "Ref": "AWS::StackName" },
            "PropagateAtLaunch": true
          }
        ]
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": "1",
          "MinInstancesInService": { "Ref": "InstanceCount" },
          "PauseTime" : "PT15M",
          "SuspendProcesses": [
            "ScheduledActions"
          ],
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "InstancesLifecycle": {
      "Type": "AWS::AutoScaling::LifecycleHook",
      "Properties": {
        "AutoScalingGroupName": { "Ref": "Instances" },
        "DefaultResult": "CONTINUE",
        "HeartbeatTimeout": "60",
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "NotificationTargetARN": { "Ref": "InstancesLifecycleTopic" },
        "RoleARN": { "Fn::GetAtt": [ "InstancesLifecycleRole", "Arn" ] }
      }
    },
    "InstancesLifecycleRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": [ "autoscaling.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "InstancesLifecycleRole",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": { "Ref": "InstancesLifecycleTopic" }
                }
              ]
            }
          }
        ]
      }
    },
    "InstancesLifecycleTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [ { "Endpoint": { "Fn::GetAtt": [ "InstancesLifecycleHandler", "Arn" ] }, "Protocol": "lambda" } ],
        "TopicName" : { "Fn::Join": ["", [{"Ref":"AWS::StackName"}, "-lifecycle"]] }
      }
    },
    "InstancesLifecycleHandler": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile":  { "Fn::Join": ["\n", [
            "var AWS = require('aws-sdk');",
            "var util = require('util');",
            "exports.handler = function(input, context) {",
            "  try {",
            "    var as = new AWS.AutoScaling();",
            "    var elb = new AWS.ELB();",
            "    setTimeout(function() {",
            "      for (var i in input.Records) {",
            "        var message = JSON.parse(input.Records[i].Sns.Message);",
            "        as.completeLifecycleAction({AutoScalingGroupName:message.AutoScalingGroupName,InstanceId:message.EC2InstanceId,LifecycleActionResult:'CONTINUE',LifecycleActionToken:message.LifecycleActionToken,LifecycleHookName:message.LifecycleHookName}, function(err, data) {",
            "          console.log('completeLifecycleAction', 'err', err, 'data', data);",
            "        });",
            "      }",
            "    }, 5000);",
            "    for (var i in input.Records) {",
            "      var message = JSON.parse(input.Records[i].Sns.Message);",
            "      console.log('message', message);",
            "      if (message.LifecycleTransition == 'autoscaling:EC2_INSTANCE_TERMINATING') {",
            "        elb.describeLoadBalancers({}, function(err, data) {",
            "          for (var j in data.LoadBalancerDescriptions) {",
            "            var elbName = data.LoadBalancerDescriptions[j].LoadBalancerName;",
            "            elb.describeTags({LoadBalancerNames:[elbName]}, function(err, data) {",
            "              console.log('describeTags', 'err', err, 'data', data, 'tags', tags);",
            "              var tags = {};",
            "              for (var k in data.TagDescriptions[0].Tags) {",
            "                tags[data.TagDescriptions[0].Tags[k].Key] = data.TagDescriptions[0].Tags[k].Value;",
            "              }",
            { "Fn::Join": [ "", [ "              if (tags.Rack == '", { "Ref": "AWS::StackName" }, "') {" ] ] },
            "                elb.deregisterInstancesFromLoadBalancer({LoadBalancerName:elbName,Instances:[{InstanceId:message.EC2InstanceId}]}, function(err, data) {",
            "                  console.log('deregisterInstancesFromLoadBalancer', 'err', err, 'data', data);",
            "                });",
            "              }",
            "            });",
            "          }",
            "        });",
            "      }",
            "    }",
            "  } catch (err) {",
            "    context.fail(err);",
            "  }",
            "};"
          ]]}
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": { "Fn::GetAtt": [ "InstancesLifecycleHandlerRole", "Arn" ] },
        "Runtime": "nodejs",
        "Timeout": "10"
      }
    },
    "InstancesLifecycleHandlerPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": { "Fn::GetAtt": [ "InstancesLifecycleHandler", "Arn" ] },
        "Action": "lambda:InvokeFunction",
        "Principal": "sns.amazonaws.com",
        "SourceArn": { "Ref": "InstancesLifecycleTopic" }
      }
    },
    "InstancesLifecycleHandlerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": [ "lambda.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "InstancesLifecycleHandlerRole",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "autoscaling:CompleteLifecycleAction",
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:DescribeLoadBalancers",
                    "elasticloadbalancing:DescribeTags",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "RegistryBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AccessControl": "Private"
      }
    },
    "RegistryUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "Path": "/convox/",
        "Policies": [
          {
            "PolicyName": "Administrator",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [ { "Effect": "Allow", "Action": "*", "Resource": "*" } ]
            }
          }
        ]
      }
    },
    "RegistryAccess": {
      "DependsOn": "RegistryUser",
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "Serial": "1",
        "Status": "Active",
        "UserName": { "Ref": "RegistryUser" }
      }
    },
    "Balancer": {
      "DependsOn": [ "BalancerSecurityGroup", "GatewayAttachment" ],
      "Properties": {
        "ConnectionDrainingPolicy": {
          "Enabled": true,
          "Timeout": 5
        },
        "ConnectionSettings": {
          "IdleTimeout": 3600
        },
        "CrossZone": true,
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": 5,
          "Target": "HTTP:3000/check",
          "Timeout": 3,
          "UnhealthyThreshold": "2"
        },
        "LBCookieStickinessPolicy": [
          {
            "PolicyName": "affinity"
          }
        ],
        "Listeners": [
          {
            "Protocol": "TCP",
            "LoadBalancerPort": "80",
            "InstanceProtocol": "TCP",
            "InstancePort": "3000"
          },
          { "Fn::If": [ "BlankCertificate",
            {
              "Protocol": "TCP",
              "LoadBalancerPort": "443",
              "InstanceProtocol": "TCP",
              "InstancePort": "3001"
            },
            {
              "Protocol": "SSL",
              "LoadBalancerPort": "443",
              "InstanceProtocol": "TCP",
              "InstancePort": "3000",
              "SSLCertificateId": { "Ref": "Certificate" }
            }
          ] },
          { "Fn::If": [ "BlankCertificate",
            {
              "Protocol": "TCP",
              "LoadBalancerPort": "5000",
              "InstanceProtocol": "TCP",
              "InstancePort": "3101"
            },
            {
              "Protocol": "HTTPS",
              "LoadBalancerPort": "5000",
              "InstanceProtocol": "HTTP",
              "InstancePort": "3100",
              "SSLCertificateId": { "Ref": "Certificate" }
            }
          ] }
        ],
        "LoadBalancerName": {
          "Ref": "AWS::StackName"
        },
        "Scheme": { "Fn::If": [ "PrivateApi", "internal", { "Ref": "AWS::NoValue" } ] },
        "SecurityGroups": [
          {
            "Ref": "BalancerSecurityGroup"
          }
        ],
        "Subnets": { "Fn::If": [ "PrivateApi",
          [
            { "Ref": "SubnetPrivate0" },
            { "Ref": "SubnetPrivate1" },
            { "Ref": "SubnetPrivate2" }
          ],
          [
            { "Ref": "Subnet0" },
            { "Ref": "Subnet1" },
            { "Ref": "Subnet2" }
          ]
        ] }
      },
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
    },
    "BalancerSecurityGroup": {
      "DependsOn": "Vpc",
      "Properties": {
        "GroupDescription": {
          "Fn::Join": [
            " ",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-balancer"
            ]
          ]
        },
        "SecurityGroupIngress": [
          {
            "CidrIp": {
              "Fn::If" : [
                "PrivateApi",
                { "Ref": "VPCCIDR" },
                "0.0.0.0/0"
              ]
            },
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80"
          },
          {
            "CidrIp": {
              "Fn::If" : [
                "PrivateApi",
                { "Ref": "VPCCIDR" },
                "0.0.0.0/0"
              ]
            },
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443"
          },
          {
            "CidrIp": {
              "Fn::If" : [
                "PrivateApi",
                { "Ref": "VPCCIDR" },
                "0.0.0.0/0"
              ]
            },
            "IpProtocol": "tcp",
            "FromPort": "5000",
            "ToPort": "5000"
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "ApiWeb": {
      "DependsOn": [ "Balancer", "Cluster", "CustomTopic", "ApiWebTasks", "ServiceRole" ],
      "Type": "Custom::ECSService",
      "Version": "1.0",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
        "Cluster": { "Ref": "Cluster" },
        "DeploymentMinimumPercent": "50",
        "DeploymentMaximumPercent": "100",
        "DesiredCount": "2",
        "LoadBalancers": [
          { "Fn::Join": [ ":", [ { "Ref": "Balancer" }, "web", "3000" ] ] },
          { "Fn::Join": [ ":", [ { "Ref": "Balancer" }, "web", "4443" ] ] },
          { "Fn::Join": [ ":", [ { "Ref": "Balancer" }, "registry", "443" ] ] }
        ],
        "Name": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "api-web" ] ] },
        "Role": { "Ref": "ServiceRole" },
        "TaskDefinition": { "Ref": "ApiWebTasks" }
      }
    },
    "ApiMonitor": {
      "DependsOn": [ "Balancer", "Cluster", "CustomTopic", "ApiMonitorTasks", "ServiceRole" ],
      "Type": "Custom::ECSService",
      "Version": "1.0",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
        "Cluster": { "Ref": "Cluster" },
        "DeploymentMinimumPercent": "0",
        "DeploymentMaximumPercent": "100",
        "DesiredCount": "1",
        "LoadBalancers": [],
        "Name": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "api-monitor" ] ] },
        "Role": { "Ref": "ServiceRole" },
        "TaskDefinition": { "Ref": "ApiMonitorTasks" }
      }
    },
    "ServiceRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "ec2:Describe*",
                    "ec2:AuthorizeSecurityGroupIngress"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ]
                }
              ]
            },
            "PolicyName": "ServiceRole"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "DynamoBuilds": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "builds" ] ] },
        "AttributeDefinitions": [
          { "AttributeName": "id", "AttributeType": "S" },
          { "AttributeName": "app", "AttributeType": "S" },
          { "AttributeName": "created", "AttributeType": "S" }
        ],
        "KeySchema": [ { "AttributeName": "id", "KeyType": "HASH" } ],
        "GlobalSecondaryIndexes": [ {
          "IndexName": "app.created",
          "KeySchema": [ { "AttributeName": "app", "KeyType": "HASH" }, { "AttributeName": "created", "KeyType": "RANGE" } ],
          "Projection": { "ProjectionType": "ALL" },
          "ProvisionedThroughput": { "ReadCapacityUnits": "5", "WriteCapacityUnits": "5" }
        }],
        "ProvisionedThroughput": { "ReadCapacityUnits": "5", "WriteCapacityUnits": "5" }
      }
    },
    "DynamoReleases": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "releases" ] ] },
        "AttributeDefinitions": [
          { "AttributeName": "id", "AttributeType": "S" },
          { "AttributeName": "app", "AttributeType": "S" },
          { "AttributeName": "created", "AttributeType": "S" }
        ],
        "KeySchema": [ { "AttributeName": "id", "KeyType": "HASH" } ],
        "GlobalSecondaryIndexes": [{
          "IndexName": "app.created",
          "KeySchema": [ { "AttributeName": "app", "KeyType": "HASH" }, { "AttributeName": "created", "KeyType": "RANGE" } ],
          "Projection": { "ProjectionType": "ALL" },
          "ProvisionedThroughput": { "ReadCapacityUnits": "5", "WriteCapacityUnits": "5" }
        }],
        "ProvisionedThroughput": { "ReadCapacityUnits": "5", "WriteCapacityUnits": "5" }
      }
    },
    "VolumeFilesystem": {
      "Type": "AWS::EFS::FileSystem",
      "Condition": "RegionHasEFS",
      "Properties": {
        "FileSystemTags": [
          { "Key": "Name", "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "shared-volumes" ] ] } }
        ]
      }
    },
    "VolumeSecurity": {
      "Type": "AWS::EC2::SecurityGroup",
      "Condition": "RegionHasEFS",
      "Properties": {
        "GroupDescription": "volume security group",
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": "2049", "ToPort": "2049", "CidrIp": { "Ref": "VPCCIDR" } }
        ],
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "VolumeTarget0": {
      "Type": "AWS::EFS::MountTarget",
      "Condition": "RegionHasEFS",
      "Properties": {
        "FileSystemId": { "Ref": "VolumeFilesystem" },
        "SubnetId": { "Ref": "Subnet0" },
        "SecurityGroups": [ { "Ref": "VolumeSecurity" } ]
      }
    },
    "VolumeTarget1": {
      "Type": "AWS::EFS::MountTarget",
      "Condition": "RegionHasEFS",
      "Properties": {
        "FileSystemId": { "Ref": "VolumeFilesystem" },
        "SubnetId": { "Ref": "Subnet1" },
        "SecurityGroups": [ { "Ref": "VolumeSecurity" } ]
      }
    },
    "VolumeTarget2": {
      "Type": "AWS::EFS::MountTarget",
      "Condition": "RegionHasEFS",
      "Properties": {
        "FileSystemId": { "Ref": "VolumeFilesystem" },
        "SubnetId": { "Ref": "Subnet2" },
        "SecurityGroups": [ { "Ref": "VolumeSecurity" } ]
      }
    },
    "Settings": {
      "Properties": {
        "AccessControl": "Private",
        "Tags": [
          {
            "Key": "system",
            "Value": "convox"
          },
          {
            "Key": "app",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      },
      "DeletionPolicy": "Retain",
      "Type": "AWS::S3::Bucket"
    },
    "ApiWebTasks": {
      "DependsOn": [ "Balancer", "Cluster", "CustomTopic", "DynamoBuilds", "DynamoReleases", "KernelAccess", "LogGroup", "RegistryAccess", "RegistryBucket", "Subnet0", "Subnet1", "Subnet2", "Vpc" ],
      "Properties": {
        "Name": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "web" ] ] },
        "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
        "Tasks": [
          {
            "Command": "api/bin/web",
            "CPU": "128",
            "Environment": {
              "AWS_REGION": { "Ref": "AWS::Region" },
              "AWS_ACCESS": { "Ref": "KernelAccess" },
              "AWS_SECRET": { "Fn::GetAtt": [ "KernelAccess", "SecretAccessKey" ] },
              "CLIENT_ID": { "Ref": "ClientId" },
              "CUSTOM_TOPIC": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
              "CLUSTER": { "Ref": "Cluster" },
              "DOCKER_IMAGE_API": { "Fn::If": [ "BlankDockerImageApi",
                { "Fn::Join": [ ":", [ "convox/api", { "Ref": "Version" } ] ] },
                { "Ref": "DockerImageApi" }
              ] },
              "DYNAMO_BUILDS": { "Ref": "DynamoBuilds" },
              "DYNAMO_RELEASES": { "Ref": "DynamoReleases" },
              "ENCRYPTION_KEY": { "Ref": "EncryptionKey" },
              "LOG_GROUP": { "Ref": "LogGroup" },
              "NOTIFICATION_HOST": { "Fn::GetAtt": [ "Balancer", "DNSName" ] },
              "NOTIFICATION_TOPIC": { "Ref": "NotificationTopic"},
              "PASSWORD": { "Ref": "Password" },
              "PRIVATE": { "Ref": "Private" },
              "PROCESS": "web",
              "PROVIDER": "aws",
              "RACK": { "Ref": "AWS::StackName" },
              "REGISTRY_HOST": { "Fn::If": [ "BlankRegistryHost",
                { "Fn::Join": [ ":", [ { "Fn::GetAtt": [ "Balancer", "DNSName" ] }, "5000" ] ] },
                { "Fn::Join": [ ":", [ { "Ref": "RegistryHost" }, { "Ref": "RegistryPort" } ] ] }
              ] },
              "RELEASE": { "Ref": "Version" },
              "ROLLBAR_TOKEN": "f67f25b8a9024d5690f997bd86bf14b0",
              "SEGMENT_WRITE_KEY": "KLvwCXo6qcTmQHLpF69DEwGf9zh7lt9i",
              "SETTINGS_BUCKET": { "Ref": "Settings" },
              "STACK_ID": { "Ref": "AWS::StackId" },
              "SUBNETS": { "Fn::Join": [ ",", [ { "Ref": "Subnet0" }, { "Ref": "Subnet1" }, { "Ref": "Subnet2" } ] ] },
              "SUBNETS_PRIVATE": { "Fn::If": [ "Private",
                { "Fn::Join": [ ",", [ { "Ref": "SubnetPrivate0" }, { "Ref": "SubnetPrivate1" }, { "Ref": "SubnetPrivate2" } ] ] },
                ""
              ] },
              "VPC": { "Ref": "Vpc" },
              "VPCCIDR": { "Ref": "VPCCIDR" }
            },
            "Image": { "Fn::If": [ "BlankDockerImageApi",
              { "Fn::Join": [ ":", [ "convox/api", { "Ref": "Version" } ] ] },
              { "Ref": "DockerImageApi" }
            ] },
            "Links": [],
            "Memory": "128",
            "Name": "web",
            "PortMappings": [
              "3000:3000",
              "3001:4443"
            ],
            "Volumes": [
              "/var/run/docker.sock:/var/run/docker.sock"
            ]
          },
          {
            "CPU": "128",
            "Environment": {
              "AWS_REGION": { "Ref": "AWS::Region" },
              "AWS_ACCESS": { "Ref": "RegistryAccess" },
              "AWS_SECRET": { "Fn::GetAtt": [ "RegistryAccess", "SecretAccessKey" ] },
              "BUCKET": { "Ref": "RegistryBucket" },
              "LOG_GROUP": { "Ref": "LogGroup" },
              "PASSWORD": { "Ref": "Password" },
              "PROCESS": "registry",
              "RELEASE": { "Ref": "Version" },
              "SETTINGS_FLAVOR": "s3"
            },
            "Image": { "Fn::Join": [ ":", [ "convox/registry", { "Ref": "Version" } ] ] },
            "Links": [],
            "Memory": "128",
            "Name": "registry",
            "PortMappings": [
              "3100:3000",
              "3101:443"
            ],
            "Volumes": []
          }
        ]
      },
      "Type": "Custom::ECSTaskDefinition",
      "Version": "1.0"
    },
    "ApiMonitorTasks": {
      "DependsOn": [ "Balancer", "Cluster", "CustomTopic", "DynamoBuilds", "DynamoReleases", "KernelAccess", "LogGroup", "Subnet0", "Subnet1", "Subnet2", "Vpc" ],
      "Properties": {
        "Name": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "monitor" ] ] },
        "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
        "Tasks": [
          {
            "Command": "api/bin/monitor",
            "CPU": "64",
            "Environment": {
              "AUTOSCALE": { "Fn::If": [ "Autoscale", "true", "false" ] },
              "AWS_REGION": { "Ref": "AWS::Region" },
              "AWS_ACCESS": { "Ref": "KernelAccess" },
              "AWS_SECRET": { "Fn::GetAtt": [ "KernelAccess", "SecretAccessKey" ] },
              "CLIENT_ID": { "Ref": "ClientId" },
              "CUSTOM_TOPIC": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
              "CLUSTER": { "Ref": "Cluster" },
              "DOCKER_IMAGE_API": { "Fn::If": [ "BlankDockerImageApi",
                { "Fn::Join": [ ":", [ "convox/api", { "Ref": "Version" } ] ] },
                { "Ref": "DockerImageApi" }
              ] },
              "DYNAMO_BUILDS": { "Ref": "DynamoBuilds" },
              "DYNAMO_RELEASES": { "Ref": "DynamoReleases" },
              "ENCRYPTION_KEY": { "Ref": "EncryptionKey" },
              "LOG_GROUP": { "Ref": "LogGroup" },
              "NOTIFICATION_HOST": { "Fn::GetAtt": [ "Balancer", "DNSName" ] },
              "NOTIFICATION_TOPIC": { "Ref": "NotificationTopic"},
              "PASSWORD": { "Ref": "Password" },
              "PRIVATE": { "Ref": "Private" },
              "PROCESS": "web",
              "PROVIDER": "aws",
              "RACK": { "Ref": "AWS::StackName" },
              "REGISTRY_HOST": { "Fn::If": [ "BlankRegistryHost",
                { "Fn::Join": [ ":", [ { "Fn::GetAtt": [ "Balancer", "DNSName" ] }, "5000" ] ] },
                { "Fn::Join": [ ":", [ { "Ref": "RegistryHost" }, { "Ref": "RegistryPort" } ] ] }
              ] },
              "RELEASE": { "Ref": "Version" },
              "ROLLBAR_TOKEN": "f67f25b8a9024d5690f997bd86bf14b0",
              "SEGMENT_WRITE_KEY": "KLvwCXo6qcTmQHLpF69DEwGf9zh7lt9i",
              "STACK_ID": { "Ref": "AWS::StackId" },
              "SUBNETS": { "Fn::Join": [ ",", [ { "Ref": "Subnet0" }, { "Ref": "Subnet1" }, { "Ref": "Subnet2" } ] ] },
              "SUBNETS_PRIVATE": { "Fn::If": [ "Private",
                { "Fn::Join": [ ",", [ { "Ref": "SubnetPrivate0" }, { "Ref": "SubnetPrivate1" }, { "Ref": "SubnetPrivate2" } ] ] },
                ""
              ] },
              "VPC": { "Ref": "Vpc" }
            },
            "Image": { "Fn::If": [ "BlankDockerImageApi",
              { "Fn::Join": [ ":", [ "convox/api", { "Ref": "Version" } ] ] },
              { "Ref": "DockerImageApi" }
            ] },
            "Links": [],
            "Memory": "64",
            "Name": "monitor",
            "Volumes": [
              "/var/run/docker.sock:/var/run/docker.sock"
            ]
          }
        ]
      },
      "Type": "Custom::ECSTaskDefinition",
      "Version": "1.0"
    }
  }
}
