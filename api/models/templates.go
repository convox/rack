// Code generated by go-bindata.
// sources:
// models/templates/app.tmpl
// DO NOT EDIT!

package models

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAppTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x7c\x7b\x6f\x1b\x39\x92\xf8\xff\xf9\x14\x04\x31\x3f\x38\x19\xc8\xb2\xec\xc1\x6f\xef\xb6\xf7\x72\x80\x23\x2b\x89\x77\xed\x44\x27\x39\x19\xdc\x26\xc6\x82\xee\xa6\xa4\x5e\x4b\x64\x0f\xc9\x76\xec\x11\xf4\xdd\x0f\x7c\x74\x37\x9f\x92\xfc\xc8\x2e\x26\x89\xba\x8b\xc5\x62\xb1\xde\x2c\xf6\x7a\x0d\x0a\x3c\x2b\x09\x06\x10\x55\x15\x04\x9b\xcd\x2b\x00\xd6\x6b\xf0\x0b\xaa\x2a\x90\xbd\x05\xfd\xd3\xaa\xea\x1e\xae\x10\x29\x67\x98\x0b\xf5\xe6\xb2\xf9\xa1\x5f\xbf\x02\x00\x00\x78\xfa\xfb\xf4\x0a\xaf\xaa\x25\x12\xf8\x3d\x65\x2b\x24\xbe\x62\xc6\x4b\x4a\x20\xc8\x00\x3c\x19\x1c\x0f\x0e\x07\x7f\x3d\x1c\xfc\x15\xf6\x34\xf8\x90\x92\xa2\x14\x25\x25\x1c\x66\x06\x85\x9a\x49\x18\x1c\x00\xde\xa0\x25\x22\x39\x66\x87\x79\x07\xea\xcf\x1d\x0c\xaa\x18\xcd\x31\xe7\x8f\x1a\xc3\xf0\xbc\xe4\x82\x3d\xec\x1a\x04\xcf\x89\xc0\x8c\xa0\xa5\xa4\x18\xc0\xf7\x24\xcb\x46\x7f\xd4\x68\x29\x57\xf0\x4d\x3e\x99\xe0\x19\xcc\x2c\x30\xb0\xe9\x01\xf8\xbf\x98\x43\x70\x0d\x36\xbd\x06\xcb\x98\x95\x77\x48\xe0\x1d\x48\x1a\xa8\x38\x8e\x77\x4b\x44\x6e\xa7\x38\xaf\x59\x29\x1e\x3e\x30\x5a\x57\x92\xcd\x6b\x1b\x1d\xc8\xc0\xb7\xb5\xc2\x26\x37\xc0\x85\x95\x38\xe1\xb5\x5e\x97\x41\x0a\xc7\x88\xa1\x15\x16\x98\xa9\xa1\xdb\x77\xa4\x92\xb0\x8f\xd8\x8d\x28\x7c\xb3\x96\xe1\xb2\xe6\x02\x33\x4b\x0c\x00\x80\x57\x0f\x15\xd6\x84\x0b\x56\x92\x39\xec\x75\xaf\xce\xf0\x0c\xd5\x4b\xa1\xde\xba\xcf\x79\xce\xca\x4a\x34\x32\x07\xcd\xab\x8e\x6b\x67\xb8\x5a\xd2\x87\x15\x26\xe2\x12\xdd\x97\xab\x7a\x15\x99\x33\x03\xf0\x53\xbd\xba\xc1\x2c\x36\xa5\x92\xe4\x41\x6a\xd2\x0c\x40\x83\x17\x54\x98\xe5\x98\x08\x34\xc7\x80\xce\x80\x61\x03\xe6\x40\x50\x70\x8b\x71\x05\x58\x4d\x48\x49\xe6\xe0\xc7\xa2\x5c\x62\x50\x28\xba\xe4\x32\xb7\x91\x5c\x92\x27\x92\x7c\xbc\x9d\x64\x8d\xf7\xe5\x48\x1e\x91\xbb\x92\x51\x22\x69\x8e\x13\x9b\xde\xd2\x2d\x3b\x1a\xdd\x50\x5b\x21\xf7\x9b\xc7\x41\xf8\x99\x2c\x1f\x00\x5a\x2e\xe9\x0f\x80\x72\xb9\x5c\xb9\x58\xb1\x28\x39\x90\x36\x70\xc6\xe8\x0a\x94\x84\x97\x05\x06\x62\x81\xc1\xd7\xf1\x30\x41\xf3\x27\x6a\xbf\x38\x95\x08\x71\xf1\x15\x2d\x6b\xac\xb5\x5a\xe9\x6f\x4f\xc1\x81\xeb\x60\x11\xff\xc0\x0f\x3f\x9b\x4f\x96\xc9\x79\x02\x9b\xbe\x70\x0c\xa6\xf5\x0d\xc1\x82\x1b\x44\x92\x4f\xbc\xc2\x79\x39\x7b\x90\x6c\x39\x54\x3c\x5a\x52\x54\x80\xc6\x44\x00\x4c\x8a\x8a\x96\x44\xf0\x9f\xc2\xb3\x09\x5e\x62\xc4\x63\x0b\x7a\x69\x9b\x31\xc1\x15\xe5\xa5\xa0\x2c\xb6\x49\xcf\x9b\x6c\x4a\x6b\x96\x63\x90\xd3\x02\x03\xd6\x4d\x13\x90\xe0\xda\xee\x97\xa6\xe2\x6a\x81\xc1\x85\xb3\x75\xdc\xcc\x07\xe6\x72\x42\x30\xa3\xac\x55\x8a\x08\x71\x5a\x30\x12\x64\x5d\x94\x5c\xfc\xd7\xe9\xef\xd3\x2c\x1b\x0d\x4f\xb2\x4c\x03\x67\xd9\x79\xf1\xdf\x4f\x21\xf5\xeb\x78\x08\xb8\x9e\x6f\x3f\xaa\xd2\x72\xff\x73\x88\xab\x8c\x7a\xec\x47\x64\x13\x20\x39\xd4\x79\xba\xf7\x7a\x32\xfa\x9f\x2f\xe7\x93\xd1\xd9\x1b\x70\x81\x56\x37\x05\x02\xc3\x9a\x0b\xba\xba\xa2\x55\x99\x83\x8f\x88\x14\x4b\xcc\x80\x51\x07\xd0\x60\xb4\xc8\xbc\x2c\xc9\x05\x26\x73\xb1\x50\x44\x1e\xdb\xaf\x3c\x03\x10\xd2\x37\x1e\x26\x38\xd7\x31\xed\xeb\x78\x28\x39\xf6\x54\x86\xed\x60\xd0\x78\x38\x3c\x3f\x9b\xbc\xb8\xc8\xcb\x99\x25\xe2\xf8\xf4\x4e\x54\x74\x89\xaa\xaa\x24\x73\x5b\xbe\xe1\x98\x32\x31\x66\x54\xd0\x9c\x7a\x9e\x67\x21\x44\xa5\xe3\x3a\x29\x5b\x98\x60\x66\xc1\xc1\x8f\x57\x57\x63\x69\xd2\xce\x09\x17\x52\xd3\x62\xef\x94\xae\xe3\x14\xc4\x14\x76\xdc\x31\xd3\xf1\xed\xf3\x4d\x9f\x3d\xa1\x33\xa3\xc8\xb7\xac\xef\x6a\x98\x5c\x9e\x79\x95\x9e\x6c\x3a\xbd\xf0\xa7\x5a\x6e\x59\x9a\x04\x7f\xde\x54\x60\x13\xdd\xef\x09\xe6\xca\x2a\x3b\x1b\x6e\xa9\xdc\x84\x2e\x13\x6e\x54\xe9\xc4\xf9\xe9\x65\x96\x29\x18\x6b\x25\x63\x46\x2b\xcc\x44\x89\x5d\x2b\x29\xdd\x1e\xe7\xf5\x0a\x4b\xf8\x31\x5d\x96\xf9\xc3\x19\xcd\xeb\x20\x6e\xf2\x6c\x85\xcc\xa5\x4e\x0e\x8f\x07\x87\xc7\xff\x61\x4d\xa2\x80\xa6\x02\x09\x6c\xc6\x7f\x73\x5e\x01\x0f\x9f\x02\x1f\xcd\x66\x38\x57\xce\x58\xb9\x5f\x0f\x9b\x21\xbd\x24\x79\x59\x35\x29\xcf\x14\xb3\xbb\x32\xc7\xda\x41\x2f\x95\x3d\xea\xa3\x15\xfa\x93\x12\xf4\x83\xf7\x73\xba\x72\xb2\x14\x7b\xa1\xb9\x31\x68\xdf\x00\xe4\x82\x67\xdd\xc2\x3b\xef\xde\xfc\x6f\xe3\xfc\xb6\xdf\x3a\x98\xe1\x18\x89\x85\x24\xfe\x28\xa7\xe4\x8e\xde\x1f\x41\xf7\xad\x64\xa8\x66\xb9\xcb\x0a\x9f\x11\x1a\xf2\xe1\x13\x5a\xe9\x6d\x2c\x56\x25\x91\xe9\x20\x12\x94\x05\x2c\x81\x3b\xf6\x09\xec\xbb\x57\x20\xd8\x2f\xc9\xdf\x60\x47\x2c\xce\xc1\x5f\xe5\xcf\x46\x3e\xf5\x03\xb0\xd9\xc1\x3d\xfb\x57\x07\xb9\x09\x2c\xad\x25\xe1\x5b\xa4\x5b\x7b\xa0\x2c\x7b\x5f\x13\x4d\xd5\x5e\x42\x3e\xa4\x05\x0e\x05\x7a\xfa\xdb\xbb\x3a\xbf\xc5\xa2\x4b\x83\xff\x4e\x4b\x23\x21\x87\xb0\x27\xff\xd2\xfb\x0a\x7b\x56\x56\xac\xc8\x98\xe0\xb9\xb2\xe4\x1b\x70\x1d\x8a\x1b\x9c\xfe\x66\x02\x6a\x1f\xab\x46\xca\xb4\xab\x3c\x72\xd0\xb6\xa5\x0a\x99\x18\x1f\x69\xc1\x3e\x9a\xa9\x2a\x46\x49\x49\xff\xcf\xb2\x82\x7a\xae\xa4\x30\x1a\x4f\x2c\x91\x95\xa4\xc0\xf7\x7d\x7c\x6f\x52\x13\x07\xec\x12\xaf\x28\x7b\x98\x96\x7f\x2a\xa6\x1e\x9f\xfc\xa7\xfb\xba\xb1\x2e\x9a\xf4\x0f\x58\x9c\x0a\x2d\x1b\x81\x09\x92\x92\xc1\x48\xa0\x6e\x70\x52\x13\x51\x6a\x49\x26\xb4\xc0\xff\xe6\xee\x04\x57\xe5\x0a\xd3\x5a\x49\xd8\x6f\x83\x01\x4c\x4b\x44\x3c\xef\x67\xad\x75\x04\xfd\x44\xca\x9f\x33\x4a\xfe\x4d\x6f\xf6\x01\x6d\xaa\x03\x36\xe8\x9e\x05\x05\xae\x0d\xd1\x16\xe4\x6d\x51\x27\x85\x3d\x36\xa8\x89\x7c\x61\x02\x29\x17\xba\x24\xe3\xfa\x8c\xcf\xb5\xa8\x6a\xb1\xbb\x8e\x45\x0d\x1c\xe8\x6f\x5f\x5c\x07\xb7\x6f\xe1\x2a\x3e\xa2\xcb\x1f\x84\xf0\x62\x18\x69\xa5\x64\xae\xa5\x85\xcd\x68\x41\x0b\xe7\xfb\xc6\x57\xf2\xbf\xf5\x5a\xe6\x74\x0a\xaf\x55\x3a\x8c\xd5\xdb\x9a\xa2\x21\x43\x64\x8e\xc1\x2f\xb7\xaa\x66\x38\x22\x82\x29\x23\xcb\x9b\xc5\xc0\x11\x41\x37\x4b\x5c\xac\xd7\xa0\xae\x2a\xcc\x24\xe4\x66\xd3\x89\xff\x27\xaa\x64\x3f\x5a\x24\x93\x4f\xa6\x78\xa9\x8d\xe5\x37\x30\xb0\x95\xd9\xc5\xf7\xbe\xd1\x62\x6d\x2f\xa4\x82\x1f\x1e\x2b\xbd\x31\xaa\xd3\xad\x6b\xfb\x0a\x9b\x1a\x96\xb7\x3a\x9c\x5a\x5d\x47\x06\x76\xc8\xb0\xe2\x8a\xc6\xb8\x0e\xe9\x6a\x85\xce\xf0\xb2\x5c\x95\x02\x17\x32\xde\x81\x56\x01\xa8\xab\xe3\xf4\x06\xbd\x93\xff\xff\x17\xfb\x9d\x93\x2b\xe8\x22\x50\x50\xbd\x61\x35\xe9\x81\xe1\xf8\x0b\xa8\x49\x29\xf4\x13\x2c\xf5\x07\xf7\x00\x22\x05\xb8\x7c\x27\x47\x4c\x4e\x2f\xad\x37\xb0\x93\xef\x7d\xd9\xd3\x8a\xa0\x5a\x3f\xbc\xa0\x73\x37\x5d\x8d\xc8\x5b\x0b\xa3\x25\xac\xb7\x63\x06\x4b\x91\x53\x73\xb8\xde\x8a\xce\xb9\xfa\x53\x03\xed\x33\x45\x67\x56\xf6\x2a\x7c\x27\x8a\xe5\xe5\xac\x1b\xd6\xff\x88\xf8\xb8\xdd\x0d\x23\x1b\x9e\xf4\x74\xc0\x26\xbe\xe2\x56\xcd\xd9\x12\xa3\xbe\x14\x30\xb0\xd9\x8c\x86\xd3\x2b\xc4\x6f\xcf\x24\xf1\xa5\x88\x64\x90\x15\x26\x05\xff\xac\xdc\x9e\xe3\xd9\x7b\x6d\x04\xa7\x7c\xc8\x75\x24\x17\xd4\xe0\x32\xb9\xf3\xe7\xb0\x80\xad\x00\xe7\xb8\x3f\xd8\x2f\x0a\x30\x13\x5f\xd1\x5b\x4c\x76\xba\xb8\xa4\x7b\x33\x51\x5a\x22\x62\xf0\xe2\x84\xa9\x40\xf9\xad\x1a\xa1\xd4\x5e\x6e\x57\xcb\x43\x18\xc6\x0e\x76\x51\xa9\x45\xd4\x3c\xf3\x40\xbd\x1a\x67\x0b\x6e\x3f\xf7\x86\xb4\x51\x89\x01\x95\xbf\x3d\x10\xc9\xf1\x3d\x02\xd6\x26\x54\x75\x17\x14\x84\xaa\xe7\x2b\x34\xb7\xe0\xd4\xcf\x18\xe0\x7a\x2d\x05\x16\xf7\x95\x15\x22\x45\xff\x94\x31\xf4\xb0\xd9\x84\xe1\xaa\x01\x88\x24\x17\xc0\x11\x6a\x15\x00\xf5\xc0\x2f\x78\xa9\x82\x5b\x25\xe2\xbb\xd1\xdb\xc4\x28\x0c\x9b\x4d\x6f\xbd\xc6\x4b\x8e\x37\x9b\xf5\x1a\x93\x22\x39\x06\xae\xd7\xcd\x5c\x9b\x0d\x8c\x92\x16\x1f\x7e\x1d\xb2\x42\xce\x27\x15\x98\x60\x9b\x66\x5d\x6a\x00\x10\x6e\x67\xcb\x7a\x0d\xee\xa4\x95\x8b\x0c\xdd\x04\x59\x51\x9c\x28\x38\xac\xea\x4e\xc0\x2d\x17\x77\x1c\x77\x71\xed\xfe\x07\x7e\xce\x47\xac\x43\xcf\x28\xee\x93\xe7\xe2\x4e\x95\xfc\x5b\x80\xd3\xf1\xb8\x91\x44\x69\x2a\x93\x42\x2b\xb5\xf0\x74\xf8\x0f\x03\x8b\xc9\x9d\xf9\x9d\x80\x3d\xfd\x7d\xfa\xaf\xc9\xe8\xc3\xf9\xe7\x4f\xf6\x08\xeb\x69\x7c\x9c\x15\x9b\xe0\x87\x1e\xf8\x45\x6f\x9a\x16\x53\x6b\x29\x20\xb2\xdb\x4a\x3e\xa5\x70\xe8\x31\x10\xc6\x80\x8c\xdd\x96\xd8\x4d\x44\xd3\x0a\x86\xfe\x2b\x94\x86\xb4\x90\x76\x1e\x6b\xef\x65\xf4\x2f\x4a\x72\xfb\x15\x31\x1e\x27\x2e\xa0\x6d\x2b\x55\xa9\xd9\xe1\xc5\xe7\x0f\xff\xfa\x30\xf9\xfc\x65\x9c\x72\xea\xb1\x7a\xc2\xe4\xf3\x70\x34\x9d\x86\xd6\xcb\xcf\x62\x03\x11\xfb\x4a\x97\xf5\x2a\x92\xce\xbb\x8c\xc0\xfd\x4b\x5a\x13\x21\xe3\x4a\x33\x20\xce\x02\xed\xa5\xf1\x1f\xa0\xff\x91\x72\x01\xe0\xd1\x1d\x62\x47\xac\x26\x47\x05\xcd\x6f\x31\xeb\x73\x9a\xdf\xa6\xb6\x56\x92\xae\x86\x6d\x36\xd9\x7a\xdd\x1f\x52\x22\x50\x49\x30\x8b\x8a\x9a\xe6\xa0\x34\x2a\x09\x64\x89\x34\xf5\xe8\x4e\x93\x7f\x14\xa6\xbf\x9e\x5b\x3b\x92\xd6\x4f\xf1\x51\xda\xc9\x04\x61\xb1\x4c\xb9\x23\x2f\x29\x5e\xa9\x37\xa0\x3d\x57\x56\x14\x7d\xa2\x3a\xb8\x03\x3e\x68\x60\x60\xe1\xe8\x5e\x30\x24\x69\xdc\xb5\x93\x11\xcd\x6c\x87\x5e\xa2\x2a\xb1\xad\xf1\xfd\x92\x83\x6c\xa7\x69\x64\x3f\xc6\x0e\xe9\x37\xab\xd3\xa2\x60\x98\xf3\x06\xbc\xd1\x8e\x98\x6b\x79\x94\xca\x3c\x83\x6f\x4d\x64\x18\xe7\xda\xd3\xf1\x8e\x29\x13\x56\x8d\x7b\xcb\x8e\xf4\x25\x68\x4a\x9d\x7c\x21\xce\xa4\x14\xa7\xe4\x3d\xed\x68\xe4\x14\xeb\x35\xe8\xbf\x6b\x8e\xa2\x36\x1b\xb9\x77\x51\x5b\x02\x8c\x25\xeb\xe4\x3c\xb1\x45\x09\xd1\xff\x29\xdb\x34\x66\xe5\x5d\xb9\xc4\x73\x5c\x74\x26\xae\x7b\x16\x10\xb8\x6f\x79\xce\xec\x7e\x84\x63\x6e\xe8\xdf\x36\xd5\xe8\x58\xd4\x4b\xaf\x63\xb1\xa2\x9b\x2d\xbc\x72\xd8\xa3\xc3\xc2\x8f\x88\x5b\xdb\xf1\xca\x67\x7f\x97\xbc\x34\x50\x4d\x89\x52\x4d\x96\x08\x50\x63\xcc\x77\x13\x80\x48\xee\xa0\x92\x96\x57\x31\xee\xbb\x89\xdf\x68\x28\xad\xa4\x29\x55\xef\x57\xa2\xec\x5a\x50\x5a\xf1\x6c\x9e\x79\x31\x7a\xd7\x90\x31\xa4\x64\x56\xce\x6b\xe6\xa7\xf5\x06\xd0\xf4\x55\x7c\xc4\x68\x29\x16\x0f\x63\xdd\x5d\xd1\x49\x45\xd0\xd8\x11\x5a\xa4\xa6\x9b\x64\xdb\x58\xd3\x6f\xe2\x0a\x96\x4f\x31\x2f\x19\x2e\x86\xd2\x31\x46\xc3\xbf\x44\xf5\x64\xaf\xf0\xaf\x15\x93\xa8\x75\x80\x17\x14\x15\x8d\x5c\xc4\xec\x4b\x24\x54\x6c\xd5\x79\xbf\x34\xc7\x1e\x21\x69\x30\x23\x5e\xab\x14\xa2\x23\x6c\xf0\xc6\xb5\x13\x11\x34\x36\xad\x5d\x9e\xd9\xb1\x65\x7f\x49\x0f\x0c\x85\x77\xa4\xe1\x6d\x73\xba\xea\x6b\x0b\x7e\x22\x25\x8e\x6a\x52\x58\x1e\xd8\xb6\xbf\x61\xae\x6f\x11\xec\x19\x23\x7b\xba\x5d\xa5\xa1\x68\x03\x9f\x5b\x3e\x6b\x59\x69\xd7\x46\x7e\x31\xe5\x18\x45\x5e\xf6\xd6\xd0\xdb\x1f\x5b\x4f\x2d\xe0\x66\x96\x31\xc3\xb3\xf2\x5e\xc2\x57\xac\x24\x62\x06\x60\x83\xfb\xff\x71\xe8\xe2\xf4\xcb\x30\x7d\xdb\x0b\x5a\xb5\x17\xd5\x65\x17\x99\x23\xea\xa8\x86\xd2\xb4\xcc\xca\x3c\xe8\x37\x48\xb6\xf8\xf9\x4b\xdd\x89\x56\xc5\x7b\x41\x3b\xcc\x93\xb6\x24\x5e\xcd\x8c\x6f\x47\xdb\x18\x22\x53\x8b\xbd\x99\xd7\x09\x5a\x33\xde\xdb\xc1\xc7\xf0\xf0\xa7\xb4\xf6\x3c\x85\x42\x15\x8e\x3c\x85\x34\x69\x28\xb5\x49\x6a\x27\x9b\x20\x52\xd0\x15\x07\xaf\x4b\x41\x51\x37\xcb\x9b\xc0\x43\x6f\x5d\xc8\x93\xb6\xdf\xad\xd6\xa6\x0a\x99\x66\x83\x2f\x7d\xbb\xb7\x5b\x3a\x5a\xdd\x6b\x79\xec\xb1\xd6\xe3\xe3\xf6\xc8\xc5\x1b\xdb\x15\xc0\xad\x9a\xb2\x6f\x3a\xe5\xbe\x39\xf6\x59\x8e\x03\xf0\xec\xd3\x54\xa7\x4e\xd7\xee\xc1\xff\x4f\x11\xe7\xe6\x9f\x8f\x09\xd2\x12\xd8\x9d\xf2\xab\x59\x35\xf4\xa6\x7b\x19\x09\xf7\x5d\xe0\x4f\x20\xdc\x16\x9b\xbe\xef\x76\x81\x60\x35\x56\xf2\xd8\xb7\x8d\xf5\xf3\xe4\xdd\x3f\x3b\xf8\x09\x12\x1f\x11\xb8\x54\xe3\xde\x33\x39\xe9\x47\xbb\x27\x32\x9a\xb3\x67\xb2\xfa\x3e\xa3\x11\x2f\x54\x60\xee\xe9\x51\x90\xc2\x81\x3d\x4a\xea\x87\x0d\xa9\x41\x81\xc1\x6d\x5a\x3c\x27\x73\x93\x50\x7b\x29\xc6\x56\x9d\x33\x50\x7e\xc8\xa8\x22\xce\xfe\xc8\x9c\xaf\x87\x09\x1c\x1c\x96\x05\x3b\x97\xfc\x86\x83\xbe\xfa\xff\xd1\x20\x52\xf4\x4e\x54\x65\xba\xd1\x56\x7b\x80\xe9\x43\x0b\xd3\xc8\x54\x12\x09\xcf\x2b\xbb\xe5\x48\xe4\x55\x58\x9f\x7f\xcf\xe8\xca\x8a\x58\x1d\x4d\x0e\x80\xaf\x68\x0a\xd4\x4d\x28\x77\x85\x86\xde\x7e\x46\x52\x5b\x3b\xad\xfa\x5a\xe5\xe7\x85\xcf\x8a\xe0\x78\xb8\x97\x54\x80\xd8\x61\xa7\x16\xda\x25\xe2\xa2\xcc\x3b\xdd\x2f\xc9\x3c\xcb\x6c\x53\xd0\x09\xf1\xd3\x5c\x83\x93\xd7\xee\xa1\x9d\xdd\xba\x53\x5a\xd3\xd5\x0c\xa7\xf9\x02\xaf\x30\x80\x65\x77\xd1\xc3\x09\xbf\xf5\x7b\xdd\x0b\x12\xeb\x02\xb1\x7a\x66\xb5\xd6\x9d\xcf\x34\x95\x4d\xbf\xaa\xbb\xfd\xd6\x09\xbd\xdb\xd6\xea\xcb\x63\x00\xe8\x66\x22\x8e\x82\x46\x15\xa0\xa3\xdc\x23\xac\x6d\xb4\xef\xd9\x6b\x4a\x4b\x53\x70\xb6\x96\x5c\xf2\x79\x0c\x5b\xb8\xce\xe8\xda\xc2\x15\xb9\xe2\x2e\x45\x87\x60\xd5\xaa\x74\xc6\x50\x49\x4a\x32\xd7\xfd\x5b\x9a\x0c\x23\x4b\x30\x53\x2e\xa7\x67\x77\xc7\xfc\x65\xe0\x18\xb3\x0e\x8f\xdd\x4b\x01\xe0\x79\xb1\xc4\x56\x4b\x8d\x14\x32\xeb\x91\x4e\x05\x6d\x34\x8c\x72\xfe\x4f\x4a\x70\x33\x65\xf7\x4a\x97\x09\x86\x0b\x9c\xdf\xfa\xc5\x09\x53\x41\xb8\x5a\x30\xcc\x17\x74\xa9\x2a\x4b\x27\xae\x40\x29\x26\xde\xa9\x2e\x3d\x45\x84\x1e\xd2\x3c\xf5\x0d\x0a\xbc\x42\x6c\x1e\xef\xbc\x0a\xca\x76\x16\xba\xc6\xa0\x81\xcd\x26\x4b\x4a\x68\x4a\x31\x9b\x40\xc3\xa0\xa2\x4c\xa4\x6a\x7b\xf6\x8c\x48\x2c\x3c\x13\x17\x9e\xda\x7a\xfc\xd7\x23\xad\x1d\x70\x80\xbf\x90\x45\x94\x9b\x5d\xba\x6b\xed\x49\xd3\x78\xfa\x92\x7e\xcb\x71\xee\x9a\x9d\xfd\xe8\xe9\x8a\xed\x3e\xdc\x78\xc9\x6b\x87\x55\xe3\xf7\xf7\x6f\x2e\x6a\x4f\x19\x55\xc2\x1b\x84\xee\x4f\x4c\xe0\x7a\x5d\x2f\xee\xf4\x22\xda\x18\x9a\xf4\x9e\xb6\x23\xd8\xdb\x45\xc6\x7a\x7d\x1d\xce\xf9\x00\x71\xce\x75\x78\xf4\xc4\xb1\xd2\xc9\x23\xf3\xc5\xc8\x71\xd6\x74\x7a\x61\xf1\xaa\x71\xb2\x3f\x6f\x2f\x02\x29\x48\x9a\xee\x6d\xa0\xcf\x25\x23\xac\xa0\xfb\xfd\xaa\x2f\x1b\xbf\x24\x9a\x80\xf7\x54\xe0\x50\x61\xef\x1f\xb6\x69\x6d\xa4\x98\xe9\xf6\x16\x6b\x87\xe3\xe0\x89\x36\x5d\xab\x41\x4d\xbc\xe4\x80\x5b\xaf\x62\xc7\xe1\x42\xb0\xf2\xa6\x16\x7a\xc1\x89\xc3\xb0\x86\x98\x5d\x64\x00\x27\xd5\x94\xee\x2a\x3c\x5c\xd9\x04\x27\x20\x9e\xfe\x70\xd3\xc1\xf7\x7c\x0d\x0a\xfa\x9c\x7b\xfe\x66\x85\xb2\xf2\x6c\xf9\xb9\x78\x37\xa4\xf4\xb6\xc4\x53\x51\xe6\xb7\x25\xc1\x9c\xb7\xf1\x83\x5c\x95\xbb\xbb\x68\xa6\xea\xa7\x0f\xd0\x61\x4b\xb4\xac\xbc\x06\x7b\xa4\xbd\xa9\x64\xca\x5c\xed\x6d\xad\x05\xe8\x84\x3b\x76\x2f\xb8\xed\xe8\x6d\x0f\xb5\x76\xc6\xc2\x9b\x70\x8c\x07\xd0\x71\xab\xdd\x18\x2b\x19\xd8\x95\x96\x47\x7a\x84\xad\xde\x39\xd5\x20\x32\x64\x94\xfc\x9d\xde\xf0\xb0\x07\x56\x46\x51\xc4\xbb\x86\xb1\xeb\x12\x46\x32\x11\xde\xf3\x02\xc6\x1e\x2d\xfd\x5b\x2e\x5f\x04\x0d\x5c\xbb\x2e\x5e\xbc\xcc\xb5\x8b\x47\x5c\xba\x48\x9c\x43\xda\x96\x34\x7d\xd9\x22\x69\x65\xdd\xb0\x6e\xff\x6b\x16\xbb\x2f\x59\xec\x79\xc5\x62\xeb\x85\x98\x78\xb7\xc0\x1e\x97\x62\x6c\xce\x42\x9c\xf3\x6c\x52\x93\x2b\xc4\x6f\xe3\xa0\xee\x85\x8d\x28\x88\x9d\xe0\x26\x8c\xf6\x29\x23\xed\x11\x42\x1c\x04\x68\x5a\x72\xfb\x24\x73\x47\x6c\xef\x0c\x46\x8c\x64\xe8\x07\xcf\x24\x92\x84\x37\x00\xa1\xfd\x6c\xaf\x62\xa4\x47\xc0\x47\xa0\x3b\xcd\x73\x5a\x13\x71\x5e\xec\xc0\x68\x56\x79\xb4\x05\x73\xdb\x0d\x36\xbc\xf8\x32\xbd\x1a\x4d\x60\xa2\x3b\x00\x34\x49\x45\xf4\x5d\xec\x69\xf8\x2c\x88\x6a\x92\xca\x65\x19\xce\x68\x0d\x45\xda\xb6\xf6\x76\x4d\xca\xbe\x25\xaf\xe1\xf8\x45\x8f\xd6\x52\xee\x2e\x6e\xc0\x06\x99\x75\xea\xea\xb4\xdf\x1d\x4a\xaf\x61\xb5\xee\x1d\x4a\x23\x6e\x5b\x81\xe0\x06\xcc\xc2\x3c\xb0\x60\xb6\xdc\x6f\x69\x48\x8d\x1e\x73\x6e\xbd\xd6\x62\x65\x80\xc7\x03\x27\x69\x0f\xee\x1d\xc1\x7f\x96\xd5\xfb\x72\x19\x69\x21\x86\xdf\x49\x98\xfb\x1e\xd4\x1c\x03\x2e\x58\x99\x8b\x83\xbf\xf9\x46\xea\x0e\x31\x80\x7e\x70\xf0\x16\x30\xfc\x47\x5d\x32\xfc\xfa\x00\xfd\xe0\x87\xbc\xb8\x3d\x78\x13\x05\xc6\xb9\x04\x26\xf8\x87\x1c\xd6\x1f\x0d\xa7\xaf\xd7\x2b\x74\x3f\xc1\x82\x95\x98\x67\xc7\x83\x4d\x7c\x98\x91\x75\xf0\x16\x1c\x44\x44\x3a\x4e\x97\x70\x8e\x73\xe5\xb4\x6b\x3f\x63\x0f\x6b\xdd\x61\xf3\x79\x0b\x1c\xef\x51\x93\xaf\x24\x4d\x8d\x48\x1c\x64\xe0\x00\x46\x7b\x09\xb6\x9d\x34\xf7\x00\x3c\xe8\x45\x1b\xd4\xe2\xe9\xa1\x9e\xf6\x20\x3b\x38\xf0\x57\x1e\xf4\x4f\xe0\xfb\x4a\xc6\xa0\x8d\x24\x82\xb7\x60\x66\xa4\xfc\x35\xbe\xc3\x44\xf4\x40\x4e\x89\xc0\xf7\xe2\x4d\xc0\x1f\x35\x8b\x64\xa5\x3e\x28\x8d\x70\x10\x36\xff\xe0\x02\x31\x81\x8b\x77\x0f\x19\x38\x90\x4a\x71\xd0\x4b\x41\xba\xdb\x92\xf9\xdb\xf4\x4d\x11\xd5\x37\x47\xc2\xd7\x49\x34\x46\x22\xb2\xe6\x1f\x69\x40\x69\x4c\x33\x70\x9c\x04\xa0\x77\x98\xb1\xb2\xc0\x3c\x4b\x2f\x4f\x23\x32\xad\x13\x9f\xbb\x01\xdf\xb6\x0d\x00\x4a\x6a\x08\x5a\xe1\xcc\x59\x94\xe4\xb8\xea\x8b\xce\xbe\x81\x03\xbe\x38\xe8\x81\x83\xc3\xfc\xa0\x07\x34\x90\x79\x27\x25\x61\x1b\xf2\xeb\xd4\xcb\xe8\xa8\x4d\xa0\x21\xf2\x0f\x8e\x85\x31\x1b\xaf\x5b\x99\x78\x03\xd6\x52\x49\xfb\x4c\xfb\xf3\xd7\x7a\xeb\xb5\x90\xdc\x8b\x7e\x41\x09\x7e\x23\xe5\xf5\x12\x89\x45\x9f\xa9\xc3\xdb\xd7\x6f\x7e\x3d\x1e\x0c\x06\x83\x50\x75\x37\x7f\x0b\xca\x56\x5d\x60\xb5\x2d\x64\xb6\x75\x73\x47\x24\x2c\x75\x6f\xba\xa0\x4c\x18\xf5\x9a\xd4\x5b\xa2\xe2\x91\x64\x31\xcf\x32\x05\xb4\xd3\x1d\x58\x6e\xa0\x7f\x41\xc9\xbc\xb1\xfa\x3c\x5f\xe0\xa2\x76\xef\x37\x4f\xcd\xb3\xd1\x7d\xc5\x30\x6f\xe2\x32\x45\x9c\x79\xe3\x9d\x03\xea\xfa\x63\x90\xa4\x2a\xc3\x9f\xf4\x0e\x9d\xb7\x4b\xdc\x0d\x39\x2f\x22\x04\x9b\x52\xa7\x57\x2d\xad\x4c\xbd\xf0\x7b\x73\xf3\xe7\x3b\xcc\xc0\x77\x35\xd6\xe4\xa3\x60\xb3\xf9\x0e\x7b\xe0\x3b\x34\x32\xd9\x01\x98\xc6\x7e\x05\x60\x45\x14\xb1\x3c\x28\xb2\x45\xda\x77\x8f\x31\x5b\x95\x9c\xc7\x9c\x3c\xf0\xbd\xbc\x05\x1b\xdb\x35\xe0\xe6\x33\x79\xdb\x26\xa0\xf3\x84\xec\x9c\xdc\xd1\x5b\x1c\xbb\xb1\xeb\x78\x7c\xf0\x44\xbe\x5b\xa9\x8a\x9c\x54\xe9\x31\xf7\x92\x13\x5b\x54\x54\x2c\xac\xd0\x24\x4f\xed\x03\x89\xb6\x26\x7e\x7c\xae\x19\xfd\xb8\x97\xbe\x3f\xa6\x83\xd7\x8f\x88\x8f\x86\xf6\x37\x26\x14\x51\x9f\x99\x93\x32\x6c\xfb\x52\x97\x17\x08\x03\x58\xf3\x43\x8c\xb8\x50\xd7\x0c\xed\xf3\x89\x47\xe2\xf8\x81\x5f\x08\xc7\xc9\x33\x70\xe0\xfa\x30\xc7\x44\x30\xb4\x7c\x16\x29\xb8\x7e\xfe\x72\x50\x75\x48\x28\x13\x8b\x67\xf3\x16\x55\x87\x9c\xd6\x2f\x8d\x48\x71\xd9\xe0\xb9\xde\x76\xd9\x30\x76\x33\xb9\x13\x48\xf9\x26\xf2\xcd\xa1\xc8\x05\xbd\x89\x05\xd6\xa4\x0f\xf6\x51\xa9\x23\xde\x06\x20\x7a\x73\x2f\xee\x04\x9e\x7f\x63\xcf\xfa\x76\x52\xd0\x4f\x19\x74\x13\xbc\x6a\xf4\x7a\x37\xdf\xbc\xab\xa6\x0d\xd7\x74\x11\x7d\x5f\x46\x04\xb7\x51\x83\x04\xf4\x95\xb1\x30\x5b\xb7\xe5\x31\x13\xf9\xec\x8b\xe0\xed\x05\x4c\x33\x56\x2f\xc9\x15\xef\xca\xba\xd3\x32\x1a\xbf\x17\xeb\x97\xc7\x12\xdb\xbf\x57\x69\x2c\x59\x61\xf1\x8a\x3f\x5d\x29\xca\x2f\xd1\x78\x85\x29\xe7\xb5\xdf\x28\xbb\xbd\x36\xe3\x56\xcd\x82\x52\x50\x57\x43\x0b\xf2\x77\x28\xa3\x3e\xd7\x67\x3d\x25\xa3\xb7\x1b\x27\xa2\xf5\xa9\xc6\x7b\x75\x7e\x3c\x55\x55\x8b\xd7\xd4\x9c\x60\xc9\xad\xa7\x39\x9d\xc2\x21\x58\xfa\xc3\x32\x2f\xff\xcd\x98\xe4\x5e\x6b\x56\xeb\xce\x8f\x25\x45\xc5\x4d\xdb\xf9\xa1\x5b\x91\x6e\x70\xa2\x40\x96\x18\xa3\x0d\x02\x66\xcd\x81\x03\x7f\xcf\xe8\x2a\xda\x43\xb2\x1b\xdb\xc4\xc7\xf5\x7b\x29\x16\x7b\xe0\xca\x4f\x76\x12\x9f\x9f\x64\xa7\xb5\x58\x50\x56\xfe\x89\xa3\x5d\x51\xc1\xa8\xd8\xa9\x8a\x55\x47\x8c\xf2\xf5\xd7\x08\x1a\xef\x89\xd7\x85\x1e\x15\x62\xdb\x83\xed\xb0\xc7\xf6\xc7\x30\xc2\x6f\x4c\xb8\x36\x67\xfa\x5b\x96\x99\xef\xbd\x18\xa3\x73\x86\x97\x58\xca\x49\x7b\xa0\x02\x27\x58\xe6\x98\x3b\x8c\x92\xfa\x4c\xe3\x90\x12\xc1\xf4\x01\xaf\xdf\x31\x03\xaf\x90\x77\x91\x69\xdd\x5c\xbd\x86\xfc\x81\x0b\xbc\x92\x36\xb6\x3d\xd6\x32\x9f\x98\x01\x6e\x04\x60\xe0\x51\x55\xd9\xc0\x5b\x9c\x57\x8c\x6d\x16\xd7\xfe\x2f\x00\x00\xff\xff\xec\x3e\xa8\x9d\x6b\x57\x00\x00")

func templatesAppTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAppTmpl,
		"templates/app.tmpl",
	)
}

func templatesAppTmpl() (*asset, error) {
	bytes, err := templatesAppTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/app.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/app.tmpl": templatesAppTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"app.tmpl": &bintree{templatesAppTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

