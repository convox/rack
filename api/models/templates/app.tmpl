{{ define "app" }}
  {
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Conditions": {
      {{ template "balancer-conditions" . }}
      {{ template "process-conditions" . }}
      {{ template "registry-conditions" . }}
      "Private": { "Fn::Equals": [ { "Ref": "Private" }, "Yes" ] }
    },
    "Parameters" : {
      {{ template "balancer-params" . }}
      {{ template "process-params" . }}

      "Cluster": {
        "Type" : "String",
        "Default" : "",
        "Description" : ""
      },
      "Cpu": {
        "Type": "Number",
        "Default": "200",
        "Description": "CPU shares of each process"
      },
      "Environment": {
        "Type": "String",
        "Default": "",
        "Description": ""
      },
      "Key": {
        "Type": "String",
        "Default": "",
        "Description": ""
      },
      "Private": {
        "Type": "String",
        "Description": "Create internal load balancers in private subnets",
        "Default": "No",
        "AllowedValues": [ "Yes", "No" ]
      },
      "Release": {
        "Type" : "String",
        "Default" : "",
        "Description" : ""
      },
      "Repository": {
        "Type" : "String",
        "Default" : "",
        "Description" : "Source code repository"
      },
      "Subnets": {
        "Type" : "List<AWS::EC2::Subnet::Id>",
        "Default" : "",
        "Description" : "VPC subnets for this app"
      },
      "SubnetsPrivate": {
        "Type" : "List<AWS::EC2::Subnet::Id>",
        "Default" : "",
        "Description" : "VPC private subnets for this app"
      },
      "Version": {
        "Description": "(REQUIRED) Lambda CustomTopic Handler Release Version",
        "MinLength" : "1",
        "Type": "String"
      },
      "VPC": {
        "Type" : "AWS::EC2::VPC::Id",
        "Default" : "",
        "Description" : "VPC for this app"
      }
    },
    "Resources": {
      "CustomTopicRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": { "Service": [ "lambda.amazonaws.com" ] },
                "Action": [ "sts:AssumeRole" ]
              }
            ]
          },
          "Path": "/",
          "Policies": [
            {
              "PolicyName": "Administrator",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [ { "Effect": "Allow", "Action": "*", "Resource": "*" } ]
              }
            }
          ]
        }
      },
      "CustomTopic": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "Code": {
            "S3Bucket": { "Fn::Join": [ "-", [ "convox", { "Ref": "AWS::Region" } ] ] },
            "S3Key": { "Fn::Join": [ "", [ "release/", { "Ref": "Version" }, "/formation.zip" ] ] }
          },
          "Handler": "lambda.external",
          "MemorySize": "128",
          "Role": { "Fn::GetAtt": [ "CustomTopicRole", "Arn" ] },
          "Runtime": "nodejs",
          "Timeout": "30"
        }
      },
      {{ template "balancer-resources" . }}
      {{ template "process-resources" . }}
      {{ template "process-services" . }}
      {{ template "registry-resources" . }}

      {{ template "security" }}
      {{ template "state" }}
    },
    "Outputs": {
      {{ template "balancer-outputs" . }}
      {{ template "process-outputs" . }}
      {{ template "registry-outputs" . }}

      "Settings": {
        "Value": { "Ref": "Settings" }
      }
    }
  }
{{ end }}

{{ define "process-conditions" }}
  {{ range $k := .EntryNames }}
    "Blank{{ upper $k }}Service": { "Fn::Equals": [ "", "" ] },
  {{ end }}
{{ end }}

{{ define "process-params" }}
  {{ range $e := . }}
    "{{ upper $e.Name }}Memory": {
      "Type": "Number",
      "Default": "256",
      "Description": "MB of RAM to reserve"
    },
    "{{ upper $e.Name }}DesiredCount": {
      "Type" : "Number",
      "Default" : "1",
      "Description" : "The number of instantiations of the process to place and keep running on your cluster"
    },
  {{ end }}
{{ end }}

{{ define "process-outputs" }}
  "Kinesis": {
    "Value": { "Ref": "Kinesis" }
  },
  "LogGroup": {
    "Value": { "Ref": "LogGroup" }
  },
{{ end }}

{{ define "process-resources" }}
  "Kinesis": {
    "Type": "AWS::Kinesis::Stream",
    "Properties": {
      "ShardCount": 1
    }
  },
  "LogGroup": {
    "Type": "AWS::Logs::LogGroup"
  },
{{ end }}

{{ define "process-services" }}
  {{ $manifest := . }}
  {{ if .HasProcesses }}
    {{ range $e := . }}
      "{{ upper $e.Name }}ECSTaskDefinition": {
        "DependsOn": ["CustomTopic", "ServiceRole"],
        "Type": "Custom::ECSTaskDefinition",
        "Version": "1.0",
        "Properties": {
          "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
          "Name": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "{{ $e.Name }}" ] ] },
          "Release": { "Ref": "Release" },
          "Environment": { "Ref": "Environment" },
          "Key": { "Ref": "Key" },
          "Tasks": [ {{ template "entry_task" . }} ]
        }
      },
      "{{ upper $e.Name }}ECSService": {
        "DependsOn": [
          {{ if $e.HasBalancer }}
            "{{ $manifest.BalancerResourceName $e.Name }}",
          {{ end }}
          "CustomTopic",
          "ServiceRole"
         ],
        "Type": "Custom::ECSService",
        "Version": "1.0",
        "Properties": {
          "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
          "Cluster": { "Ref": "Cluster" },
          "DesiredCount": { "Ref": "{{ upper $e.Name }}DesiredCount" },
          "Name": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "{{ $e.Name }}" ] ] },
          "TaskDefinition": { "Ref": "{{ upper $e.Name }}ECSTaskDefinition" },
          "Role": { "Ref": "ServiceRole" },
          "LoadBalancers": [
            {{ range $e.PortMappings }}
              { "Fn::Join": [ ":", [ { "Ref": "{{ $manifest.BalancerResourceName $e.Name }}" }, "{{ $e.Name }}", "{{ .Container }}" ] ] },
            {{ end }}
            { "Ref": "AWS::NoValue" }
          ]
        }
      },
    {{ end }}
  {{ end }}
{{ end }}

{{ define "balancer-conditions" }}
  {{ range .Balancers }}
    {{ $balancer := . }}
    {{ range .PortMappings }}
      "Blank{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Certificate": { "Fn::Equals": [ { "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Certificate" }, "" ] },
      "Secure{{ upper $balancer.ProcessName }}Port{{ .Balancer }}": { "Fn::Equals": [ { "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Secure" }, "Yes" ] },
    {{ end }}
  {{ end }}
{{ end }}

{{ define "balancer-params" }}
  {{ range .Balancers }}
    {{ $balancer := . }}
    {{ range .PortMappings }}
      "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Balancer": {
        "Type" : "String",
        "Default" : "{{ .Balancer }}",
        "Description" : ""
      },
      "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Certificate": {
        "Type" : "String",
        "Default" : "",
        "Description" : ""
      },
      "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Host": {
        "Type" : "String",
        "Default" : "{{ index $balancer.Randoms .Balancer }}",
        "Description" : ""
      },
      "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Secure": {
        "Type" : "String",
        "Default" : "No",
        "Description" : "",
        "AllowedValues": [ "Yes", "No" ]
      },
      "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Protocol": {
        "Type" : "String",
        "Default" : "TCP",
        "Description" : "",
        "AllowedValues": [ "HTTP", "TCP" ]
      },
    {{ end }}
  {{ end }}
{{ end }}

{{ define "balancer-outputs" }}
  {{ range .Balancers }}
    {{ $balancer := . }}
    "Balancer{{ upper .ProcessName }}Host": {
      "Value": { "Fn::GetAtt": [ "{{ .ResourceName }}", "DNSName" ] }
    },
    {{ range .PortMappings }}
      "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Balancer": {
        "Value": { "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Balancer" }
      },
      "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}BalancerName": {
        "Value": {{ $balancer.LoadBalancerName }}
      },
    {{ end }}
  {{ end }}
{{ end }}

{{ define "balancer-resources" }}
  {{ range .Balancers }}
    {{ $balancer := . }}
    "{{ .ResourceName }}SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": { "Fn::Join": [ " ", [ { "Ref": "AWS::StackName" }, "-balancer" ] ] },
        "SecurityGroupIngress": [
          {{ range .PortMappings }}
            {
              "CidrIp": "0.0.0.0/0",
              "IpProtocol": "tcp",
              "FromPort": { "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Balancer" },
              "ToPort": { "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Balancer" }
            },
          {{ end }}
          { "Ref": "AWS::NoValue" }
        ],
        "VpcId": { "Ref": "VPC" }
      }
    },
    "{{ .ResourceName }}": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "DependsOn": [ "{{ .ResourceName }}SecurityGroup" ],
      "Properties": {
        {{ if eq .Scheme "internal" }}
          "Scheme": "{{ .Scheme }}",
          "Subnets": { "Fn::If": [ "Private",
            { "Ref": "SubnetsPrivate" },
            { "Ref": "Subnets" }
          ] },
        {{ else }}
          "Subnets": { "Ref": "Subnets" },
        {{ end }}
        "ConnectionDrainingPolicy": { "Enabled": true, "Timeout": 60 },
        "ConnectionSettings": { "IdleTimeout": 3600 },
        "CrossZone": true,
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": 5,
          "Target": { "Fn::Join": [ ":", [ "TCP", { "Ref": "{{ upper .ProcessName }}Port{{ .FirstPort }}Host" } ] ] },
          "Timeout": 3,
          "UnhealthyThreshold": "2"
        },
        "Listeners": [
          {{ range .PortMappings }}
            { "Fn::If": [ "Blank{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Certificate",
              {
                "Protocol": { "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Protocol" },
                "LoadBalancerPort": { "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Balancer" },
                "InstanceProtocol": "{ "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Protocol" }",
                "InstancePort": { "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Host" }
              },
              { "Fn::If": [ "Secure{{ upper $balancer.ProcessName }}Port{{ .Balancer }}",
                {
                  "Protocol": "SSL",
                  "LoadBalancerPort": { "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Balancer" },
                  "InstanceProtocol": "SSL",
                  "InstancePort": { "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Host" },
                  "SSLCertificateId": { "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Certificate" }
                },
                {
                  "Protocol": "SSL",
                  "LoadBalancerPort": { "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Balancer" },
                  "InstanceProtocol": "TCP",
                  "InstancePort": { "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Host" },
                  "SSLCertificateId": { "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Certificate" }
                }
              ] }
            ] },
          {{ end }}
          { "Ref": "AWS::NoValue" }
        ],
        "LBCookieStickinessPolicy": [{ "PolicyName": "affinity" }],
        "LoadBalancerName": {{ .LoadBalancerName }},
        "SecurityGroups": [ { "Ref": "{{ .ResourceName }}SecurityGroup" } ]
      }
    },
  {{ end }}
{{ end }}

{{ define "registry-conditions" }}
  "RegionHasRegistry": { "Fn::Equals": [ { "Ref": "AWS::Region" }, "us-east-1" ]},
{{ end }}

{{ define "registry-resources" }}
  "RegistryRepository": {
    "Type": "Custom::ECRRepository",
    "Condition": "RegionHasRegistry",
    "Version": "1.0",
    "Properties": {
      "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
      "Name": { "Ref": "AWS::StackName" }
    }
  },
{{ end }}

{{ define "registry-outputs" }}
  "RegistryId": {
    "Condition": "RegionHasRegistry",
    "Value": { "Ref": "AWS::AccountId" }
  },
  "RegistryRepository": {
    "Condition": "RegionHasRegistry",
    "Value": { "Fn::GetAtt": [ "RegistryRepository", "RepositoryName" ] }
  },
{{ end }}

{{ define "security" }}
  "ServiceRole": {
    "Type": "AWS::IAM::Role",
    "Properties": {
      "AssumeRolePolicyDocument": {
        "Statement": [
          {
            "Action": [
              "sts:AssumeRole"
            ],
            "Effect": "Allow",
            "Principal": {
              "Service": [
                "ecs.amazonaws.com"
              ]
            }
          }
        ],
        "Version": "2012-10-17"
      },
      "Path": "/",
      "Policies": [
        {
          "PolicyName": "ServiceRole",
          "PolicyDocument": {
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "elasticloadbalancing:Describe*",
                  "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                  "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                  "ec2:Describe*",
                  "ec2:AuthorizeSecurityGroupIngress"
                ],
                "Resource": [
                  "*"
                ]
              }
            ]
          }
        }
      ]
    }
  },
{{ end }}

{{ define "entry_task" }}
{ "Fn::If": [ "Blank{{ upper .Name }}Service",
  {
    "Name": "{{ .Name }}",
    "Image": "{{ .Image }}",
    "Command": {{ value .CommandString }},
    "Memory": { "Ref": "{{ upper .Name }}Memory" },
    "Environment": {
      {{ range $key, $value := .EnvMap }}
        "{{ $key }}": {{ value $value }},
      {{ end }}
      {{ range $key, $value := .LinkVars }}
        "{{ $key }}": {{ $value }},
      {{ end }}
      "KINESIS": { "Ref": "Kinesis" },
      "LOG_GROUP": { "Ref": "LogGroup" },
      "PROCESS": "{{ .Name }}"
    },
    "Volumes": [
      {{ range .MountableVolumes }}
        "{{ . }}",
      {{ end }}
      { "Ref" : "AWS::NoValue" }
    ],
    "Services": [
      { "Ref" : "AWS::NoValue" }
    ],
    "PortMappings": [
      {{ $e := . }}
      {{ range .PortMappings }}
        { "Fn::Join": [ ":", [
          { "Ref": "{{ upper $e.Name }}Port{{ .Balancer }}Host" },
          "{{ .Container }}"
        ] ] },
      {{ end }}
      { "Ref" : "AWS::NoValue" }
    ],
    "Privileged": "{{ .Privileged }}"
  },
  { "Ref" : "AWS::NoValue" } ]
}
{{ end }}

{{ define "state" }}
  "Settings": {
    "Type": "AWS::S3::Bucket",
    "DeletionPolicy": "Retain",
    "Properties": {
      "AccessControl": "Private",
      "Tags": [
        { "Key": "system", "Value": "convox" },
        { "Key": "app", "Value": { "Ref": "AWS::StackName" } }
      ]
    }
  }
{{ end }}
