{{ define "app" }}
  {
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Conditions": {
      {{ template "balancer-conditions" . }}
      {{ template "process-conditions" . }}
      {{ template "registry-conditions" . }}
      "Private": { "Fn::Equals": [ { "Ref": "Private" }, "Yes" ] },
      "BlankSecurityGroup" : {"Fn::Equals" : [{"Ref" : "SecurityGroup"}, ""]}
    },
    "Parameters" : {
      {{ template "balancer-params" . }}
      {{ template "process-params" . }}

      "Cluster": {
        "Type" : "String",
        "Default" : "",
        "Description" : ""
      },
      "DeploymentMaximum": {
        "Type": "Number",
        "Default": "200",
        "Description": "Maximum percentage of processes to keep running while deploying"
      },
      "DeploymentMinimum": {
        "Type": "Number",
        "Default": "100",
        "Description": "Minimum percentage of processes to keep running while deploying"
      },
      "Environment": {
        "Type": "String",
        "Default": "",
        "Description": ""
      },
      "Key": {
        "Type": "String",
        "Default": "",
        "Description": ""
      },
      "Private": {
        "Type": "String",
        "Description": "Create internal load balancers in private subnets",
        "Default": "No",
        "AllowedValues": [ "Yes", "No" ]
      },
      "Release": {
        "Type" : "String",
        "Default" : "",
        "Description" : ""
      },
      "Repository": {
        "Type" : "String",
        "Default" : "",
        "Description" : "Source code repository"
      },
      "SecurityGroup": {
        "Type" : "String",
        "Default" : "",
        "Description" : "The Load balancer security group for this app"
      },
      "Subnets": {
        "Type" : "List<AWS::EC2::Subnet::Id>",
        "Default" : "",
        "Description" : "VPC subnets for this app"
      },
      "SubnetsPrivate": {
        "Type" : "List<AWS::EC2::Subnet::Id>",
        "Default" : "",
        "Description" : "VPC private subnets for this app"
      },
      "Version": {
        "Description": "(REQUIRED) Lambda CustomTopic Handler Release Version",
        "MinLength" : "1",
        "Type": "String"
      },
      "VPC": {
        "Type" : "AWS::EC2::VPC::Id",
        "Default" : "",
        "Description" : "VPC for this app"
      },
      "VPCCIDR": {
        "Type" : "String",
        "Default" : "",
        "Description" : "VPC CIDR for this app"
      }
    },
    "Mappings": {
      "PortProtocol": {
        "http": { "ListenerProtocol": "HTTP", "InstanceProtocol": "HTTP", "SecureInstanceProtocol": "HTTPS" },
        "https": { "ListenerProtocol": "HTTPS", "InstanceProtocol": "HTTP", "SecureInstanceProtocol": "HTTPS"  },
        "tcp": { "ListenerProtocol": "TCP", "InstanceProtocol": "TCP", "SecureInstanceProtocol": "SSL"  },
        "tls": { "ListenerProtocol": "SSL", "InstanceProtocol": "TCP", "SecureInstanceProtocol": "SSL"   }
      }
    },
    "Resources": {
      "CustomTopicRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": { "Service": [ "lambda.amazonaws.com" ] },
                "Action": [ "sts:AssumeRole" ]
              }
            ]
          },
          "Path": "/",
          "Policies": [
            {
              "PolicyName": "Administrator",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [ { "Effect": "Allow", "Action": "*", "Resource": "*" } ]
              }
            }
          ]
        }
      },
      "CustomTopic": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "Code": {
            "S3Bucket": { "Fn::Join": [ "-", [ "convox", { "Ref": "AWS::Region" } ] ] },
            "S3Key": { "Fn::Join": [ "", [ "release/", { "Ref": "Version" }, "/formation.zip" ] ] }
          },
          "Handler": "lambda.external",
          "MemorySize": "128",
          "Role": { "Fn::GetAtt": [ "CustomTopicRole", "Arn" ] },
          "Runtime": "nodejs",
          "Timeout": "30"
        }
      },
      {{ template "balancer-resources" . }}
      {{ template "cronjob-resources" . }}
      {{ template "process-resources" . }}
      {{ template "process-services" . }}
      {{ template "registry-resources" . }}

      {{ template "security" }}
      {{ template "state" }}
    },
    "Outputs": {
      {{ template "balancer-outputs" . }}
      {{ template "process-outputs" . }}
      {{ template "registry-outputs" . }}

      "Settings": {
        "Value": { "Ref": "Settings" }
      }
    }
  }
{{ end }}

{{ define "process-conditions" }}
  {{ range $k := .EntryNames }}
    "Blank{{ upper $k }}Service": { "Fn::Equals": [ "", "" ] },
    "Enabled{{ upper $k }}": { "Fn::Not": [{ "Fn::Equals": [ { "Fn::Select": [ 0, { "Ref": "{{ upper $k }}Formation" } ] }, "-1" ] }] },
  {{ end }}
{{ end }}

{{ define "process-params" }}
  {{ range $e := . }}
    "{{ upper $e.Name }}Formation": {
      "Type": "CommaDelimitedList",
      "Default": "1,0,256",
      "Description": "Number of processes to run, CPU units to reserve, and MB of RAM to reserve"
    },
  {{ end }}
{{ end }}

{{ define "process-outputs" }}
  "LogGroup": {
    "Value": { "Ref": "LogGroup" }
  },
{{ end }}

{{ define "process-resources" }}
  "LogGroup": {
    "Type": "AWS::Logs::LogGroup"
  },
{{ end }}

{{ define "process-services" }}
  {{ $manifest := . }}
  {{ if .HasProcesses }}
    {{ range $e := . }}
      "{{ upper $e.Name }}ECSTaskDefinition": {
        "DependsOn": ["CustomTopic", "ServiceRole"],
        "Type": "Custom::ECSTaskDefinition",
        "Version": "1.0",
        "Properties": {
          "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
          "Name": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "{{ $e.Name }}" ] ] },
          "Release": { "Ref": "Release" },
          "Environment": { "Ref": "Environment" },
          "Key": { "Ref": "Key" },
          "Tasks": [ {{ template "entry_task" . }} ]
        }
      },
      "{{ upper $e.Name }}ECSService": {
        "Condition": "Enabled{{ upper $e.Name }}",
        "DependsOn": [
          {{ if $e.HasBalancer }}
            "{{ $manifest.BalancerResourceName $e.Name }}",
          {{ end }}
          "CustomTopic",
          "ServiceRole"
         ],
        "Type": "Custom::ECSService",
        "Version": "1.0",
        "Properties": {
          "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
          "Cluster": { "Ref": "Cluster" },
          "DesiredCount": { "Fn::Select": [ 0, { "Ref": "{{ upper $e.Name }}Formation" } ] },
          "Name": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "{{ $e.Name }}" ] ] },
          "TaskDefinition": { "Ref": "{{ upper $e.Name }}ECSTaskDefinition" },
          "Role": { "Ref": "ServiceRole" },
          "DeploymentMinimumPercent": { "Ref": "DeploymentMinimum" },
          "DeploymentMaximumPercent": { "Ref": "DeploymentMaximum" },
          "LoadBalancers": [
            {{ range $e.PortMappings }}
              { "Fn::Join": [ ":", [ { "Ref": "{{ $manifest.BalancerResourceName $e.Name }}" }, "{{ $e.Name }}", "{{ .Container }}" ] ] },
            {{ end }}
            { "Ref": "AWS::NoValue" }
          ]
        }
      },
    {{ end }}
  {{ end }}
{{ end }}

{{ define "balancer-conditions" }}
  {{ range .Balancers }}
    {{ $balancer := . }}
    {{ range .PortMappings }}
      "Balancer{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Proxy": {
        "Fn::Equals": [ { "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Proxy" }, "Yes" ]
      },
      "Balancer{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Secure": {
        "Fn::Equals": [ { "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Secure" }, "Yes" ]
      },
    {{ end }}
  {{ end }}
{{ end }}

{{ define "balancer-params" }}
  {{ range .Balancers }}
    {{ $balancer := . }}
    {{ range .PortMappings }}
      "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Balancer": {
        "Type" : "String",
        "Default" : "{{ .Balancer }}",
        "Description" : ""
      },
      "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Certificate": {
        "Type" : "String",
        "Default" : "",
        "Description" : ""
      },
      "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Host": {
        "Type" : "String",
        "Default" : "{{ index $balancer.Randoms .Balancer }}",
        "Description" : ""
      },
      "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Secure": {
        "Type" : "String",
        "Default" : "No",
        "Description" : "",
        "AllowedValues": [ "Yes", "No" ]
      },
      "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Protocol": {
        "Type" : "String",
        "Default" : "tls",
        "Description" : "",
        "AllowedValues": [ "http", "https", "tcp", "tls" ]
      },
      "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Proxy": {
        "Type" : "String",
        "Default" : "No",
        "Description" : "",
        "AllowedValues": [ "Yes", "No" ]
      },
    {{ end }}
  {{ end }}
{{ end }}

{{ define "balancer-outputs" }}
  {{ range .Balancers }}
    {{ $balancer := . }}
    "Balancer{{ upper .ProcessName }}Host": {
      "Condition": "Enabled{{ upper .ProcessName }}",
      "Value": { "Fn::GetAtt": [ "{{ .ResourceName }}", "DNSName" ] }
    },
    {{ range .PortMappings }}
      "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Balancer": {
        "Condition": "Enabled{{ upper $balancer.ProcessName }}",
        "Value": { "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Balancer" }
      },
      "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}BalancerName": {
        "Condition": "Enabled{{ upper $balancer.ProcessName }}",
        "Value": {{ $balancer.LoadBalancerName }}
      },
    {{ end }}
  {{ end }}
{{ end }}

{{ define "balancer-resources" }}
  {{ range .Balancers }}
    {{ $balancer := . }}
    "{{ .ResourceName }}SecurityGroup": {
      "Condition": "Enabled{{ upper $balancer.ProcessName }}",
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": { "Fn::Join": [ " ", [ { "Ref": "AWS::StackName" }, "-balancer" ] ] },
        "SecurityGroupIngress": [
          {{ range .PortMappings }}
            {
              {{ if .Public }}
              "CidrIp": "0.0.0.0/0",
              {{ else }}
              "CidrIp": { "Ref": "VPCCIDR" },
              {{ end }}
              "IpProtocol": "tcp",
              "FromPort": { "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Balancer" },
              "ToPort": { "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Balancer" }
            },
          {{ end }}
          { "Ref": "AWS::NoValue" }
        ],
        "VpcId": { "Ref": "VPC" }
      }
    },
    "{{ .ResourceName }}": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Condition": "Enabled{{ upper .ProcessName }}",
      "DependsOn": [ "{{ .ResourceName }}SecurityGroup" ],
      "Properties": {
        {{ if eq .Scheme "internal" }}
          "Scheme": "{{ .Scheme }}",
          "Subnets": { "Fn::If": [ "Private",
            { "Ref": "SubnetsPrivate" },
            { "Ref": "Subnets" }
          ] },
        {{ else }}
          "Subnets": { "Ref": "Subnets" },
        {{ end }}
        "ConnectionDrainingPolicy": { "Enabled": true, "Timeout": 60 },
        "ConnectionSettings": { "IdleTimeout": 3600 },
        "CrossZone": true,
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": 5,
          "Target": { "Fn::Join": [ ":", [ "TCP", { "Ref": "{{ upper .ProcessName }}Port{{ .FirstPort }}Host" } ] ] },
          "Timeout": 3,
          "UnhealthyThreshold": "2"
        },
        "Listeners": [
          {{ range .PortMappings }}
            { "Fn::If": [ "Balancer{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Secure",
              {
                "Protocol": { "Fn::FindInMap": [ "PortProtocol", { "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Protocol" }, "ListenerProtocol" ] },
                "LoadBalancerPort": { "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Balancer" },
                "InstanceProtocol": { "Fn::FindInMap": [ "PortProtocol", { "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Protocol" }, "SecureInstanceProtocol" ] },
                "InstancePort": { "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Host" },
                "SSLCertificateId": { "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Certificate" }
              },
              {
                "Protocol": { "Fn::FindInMap": [ "PortProtocol", { "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Protocol" }, "ListenerProtocol" ] },
                "LoadBalancerPort": { "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Balancer" },
                "InstanceProtocol": { "Fn::FindInMap": [ "PortProtocol", { "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Protocol" }, "InstanceProtocol" ] },
                "InstancePort": { "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Host" },
                "SSLCertificateId": { "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Certificate" }
              }
            ] },
          {{ end }}
          { "Ref": "AWS::NoValue" }
        ],
        "Policies": [
          {{ range .PortMappings }}
            { "Fn::If": [ "Balancer{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Proxy",
              {
                "PolicyName": "EnableProxyProtocol",
                "PolicyType": "ProxyProtocolPolicyType",
                "Attributes": [{
                    "Name": "ProxyProtocol",
                    "Value": "true"
                }],
                "InstancePorts": [{ "Ref": "{{ upper $balancer.ProcessName }}Port{{ .Balancer }}Host" }]
              },
              { "Ref": "AWS::NoValue" }
            ] },
          {{ end }}
          { "Ref": "AWS::NoValue" }
        ],
        "LBCookieStickinessPolicy": [{ "PolicyName": "affinity" }],
        "LoadBalancerName": {{ .LoadBalancerName }},
        "SecurityGroups" : [{ "Fn::If" : [
	    "BlankSecurityGroup",
	    {"Ref" : "{{ .ResourceName }}SecurityGroup"},
	    {"Ref" : "SecurityGroup"}
        ]}]
      }
    },
  {{ end }}
{{ end }}

{{ define "cronjob-resources" }}
  {{ if .CronJobs }}
    "CronFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "{{ .Rack }}-{{ .AppName }}-cron",
        "Handler": "index.handler",
        "Role": { "Fn::GetAtt": [ "CustomTopicRole", "Arn" ] },
        "Runtime": "nodejs",
        "Timeout": 10,
        "Code": {
          "ZipFile":  { "Fn::Join": ["\n", [
            "'use strict';",
            "",
            "var https = require('https');",
            "var aws = require('aws-sdk');",
            "var cloudformation = new aws.CloudFormation();",
            "var querystring = require('querystring');",
            "",
            "var params = {",
            "    StackName: '{{ .Rack }}'",
            "};",
            "",
            "process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';",
            "",
            "exports.handler = function(event, context) {",
            "    console.log('REQUEST RECEIVED: ' + JSON.stringify(event));",
            "",
            "    cloudformation.describeStacks(params, function(err, data) {",
            "        if (err) {",
            "            console.log(err);",
            "        } else {",
            "            var dashboard;",
            "            var password;",
            "            var outputs = data.Stacks[0].Outputs;",
            "            var parameters = data.Stacks[0].Parameters;",
            "",
            "            for(var i=0; outputs.length>i; i++) {",
            "                if (outputs[i].OutputKey == 'Dashboard') {",
            "                    dashboard = outputs[i].OutputValue;",
            "                }",
            "            }",
            "",
            "            for(i=0; parameters.length>i; i++) {",
            "                if (parameters[i].ParameterKey == 'Password') {",
            "                    password = parameters[i].ParameterValue;",
            "                }",
            "            }",
            "",
            "            var options = {",
            "                host: dashboard,",
            "                port: 443,",
            "                path: '/apps/' + event.app + '/processes/' + event.process + '/run',",
            "                method: 'POST',",
            "                headers: {",
            "                    'Accept': 'application/json',",
            "                    'Content-Type': 'application/x-www-form-urlencoded',",
            "                    'User-Agent': 'curl/'",
            "                },",
            "                auth: 'convox:' + password",
            "            };",
            "",
            "            var req = https.request(options, function(res) {",
            "                var body = '';",
            "                console.log('Status:', res.statusCode);",
            "                console.log('Headers:', JSON.stringify(res.headers));",
            "                res.setEncoding('utf8');",
            "                res.on('data', function(chunk) { body += chunk });",
            "                res.on('end', function() {",
            "                    console.log(body);",
            "                    context.done();",
            "                });",
            "            });",
            "",
            "            req.on('error', function(error) {",
            "                console.log('Error:', error);",
            "                context.fail(error);",
            "            });",
            "",
            "            var postData = querystring.stringify({",
            "              'command' : event.command",
            "            });",
            "",
            "            req.write(postData);",
            "            req.end();",
            "        }",
            "    });",
            "};"
          ] ] }
        }
      }
    },
  {{ end }}
  {{ range .CronJobs }}
    "{{ .ShortName }}Rule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Name": "{{ .LongName }}-schedule",
        "ScheduleExpression": "{{ .Schedule }}",
        "Targets": [{
          "Arn": { "Fn::GetAtt": [ "CronFunction", "Arn" ] },
          "Id": "{{ .LongName }}Target",
          "Input": "{\"app\": \"{{ .AppName }}\", \"process\": \"{{ .Process }}\", \"command\": \"{{ .Command }}\"}"
        }]
      }
    },
    "{{ .ShortName }}LambdaPermission": {
      "Type" : "AWS::Lambda::Permission",
      "Properties" : {
        "Action" : "lambda:InvokeFunction",
        "FunctionName" : { "Fn::GetAtt": [ "CronFunction", "Arn" ] },
        "Principal" : "events.amazonaws.com",
        "SourceArn" : { "Fn::GetAtt": [ "{{ .ShortName }}Rule", "Arn" ] }
      }
    },
  {{ end }}
{{ end }}

{{ define "registry-conditions" }}
  "RegionHasRegistry": {
      "Fn::Or": [
        { "Fn::Equals": [ { "Ref": "AWS::Region" }, "us-east-1" ]},
        { "Fn::Equals": [ { "Ref": "AWS::Region" }, "us-west-2" ]},
        { "Fn::Equals": [ { "Ref": "AWS::Region" }, "eu-west-1" ]}
      ]
  },
{{ end }}

{{ define "registry-resources" }}
  "RegistryRepository": {
    "Type": "Custom::ECRRepository",
    "Condition": "RegionHasRegistry",
    "Version": "1.0",
    "Properties": {
      "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
      "Name": { "Ref": "AWS::StackName" }
    }
  },
{{ end }}

{{ define "registry-outputs" }}
  "RegistryId": {
    "Condition": "RegionHasRegistry",
    "Value": { "Ref": "AWS::AccountId" }
  },
  "RegistryRepository": {
    "Condition": "RegionHasRegistry",
    "Value": { "Fn::GetAtt": [ "RegistryRepository", "RepositoryName" ] }
  },
{{ end }}

{{ define "security" }}
  "ServiceRole": {
    "Type": "AWS::IAM::Role",
    "Properties": {
      "AssumeRolePolicyDocument": {
        "Statement": [
          {
            "Action": [
              "sts:AssumeRole"
            ],
            "Effect": "Allow",
            "Principal": {
              "Service": [
                "ecs.amazonaws.com"
              ]
            }
          }
        ],
        "Version": "2012-10-17"
      },
      "Path": "/",
      "Policies": [
        {
          "PolicyName": "ServiceRole",
          "PolicyDocument": {
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "elasticloadbalancing:Describe*",
                  "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                  "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                  "ec2:Describe*",
                  "ec2:AuthorizeSecurityGroupIngress"
                ],
                "Resource": [
                  "*"
                ]
              }
            ]
          }
        }
      ]
    }
  },
{{ end }}

{{ define "entry_task" }}
{{ $e := . }}
{ "Fn::If": [ "Blank{{ upper .Name }}Service",
  {
    "Name": "{{ .Name }}",
    "Image": "{{ .Image }}",
    {{if .CommandArray}}
      "Command": [
        {{ range $index, $element := .CommandArray}}
            {{if $index}},{{else}}{{end}}
            "{{$element}}"
        {{end}}
      ],
    {{else if ne .CommandString ""}}
        "Command": {{ value .CommandString }},
    {{end}}
    "Cpu": { "Fn::Select": [ 1, { "Ref": "{{ upper .Name }}Formation" } ] },
    "Memory": { "Fn::Select": [ 2, { "Ref": "{{ upper .Name }}Formation" } ] },
    "Environment": {
      {{ range $key, $value := .EnvMap }}
        "{{ $key }}": {{ value $value }},
      {{ end }}
      {{ range $key, $value := .LinkVars }}
        "{{ $key }}": {{ $value }},
      {{ end }}
      "LOG_GROUP": { "Ref": "LogGroup" },
      "PROCESS": "{{ .Name }}"
    },
    "Volumes": [
      {{ range .MountableVolumes }}
        {{ if eq .Host "/var/run/docker.sock" }}
          "{{.Host}}:{{.Container}}",
        {{ else }}
          { "Fn::Join": [ "", [ "/volumes/", { "Ref": "AWS::StackName" }, "/{{$e.Name}}{{.Host}}:{{.Container}}" ] ] },
        {{ end }}
      {{ end }}
      { "Ref" : "AWS::NoValue" }
    ],
    "Services": [
      { "Ref" : "AWS::NoValue" }
    ],
    "PortMappings": [
      {{ range .PortMappings }}
        { "Fn::Join": [ ":", [
          { "Ref": "{{ upper $e.Name }}Port{{ .Balancer }}Host" },
          "{{ .Container }}"
        ] ] },
      {{ end }}
      { "Ref" : "AWS::NoValue" }
    ],
    "Privileged": "{{ .Privileged }}"
  },
  { "Ref" : "AWS::NoValue" } ]
}
{{ end }}

{{ define "state" }}
  "Settings": {
    "Type": "AWS::S3::Bucket",
    "DeletionPolicy": "Retain",
    "Properties": {
      "AccessControl": "Private",
      "Tags": [
        { "Key": "system", "Value": "convox" },
        { "Key": "app", "Value": { "Ref": "AWS::StackName" } }
      ]
    }
  }
{{ end }}
