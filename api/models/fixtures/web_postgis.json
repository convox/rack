{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "BlankCluster": {
      "Fn::Equals": [
        {
          "Ref": "Cluster"
        },
        ""
      ]
    },
    "BlankPostgresService": {
      "Fn::Equals": [
        "",
        ""
      ]
    },
    "BlankWebPort443Certificate": {
      "Fn::Equals": [
        {
          "Ref": "WebPort443Certificate"
        },
        ""
      ]
    },
    "BlankWebPort80Certificate": {
      "Fn::Equals": [
        {
          "Ref": "WebPort80Certificate"
        },
        ""
      ]
    },
    "BlankWebService": {
      "Fn::Equals": [
        "",
        ""
      ]
    },
    "SecureWebPort443": {
      "Fn::Equals": [
        {
          "Ref": "WebPort443Secure"
        },
        "Yes"
      ]
    },
    "SecureWebPort80": {
      "Fn::Equals": [
        {
          "Ref": "WebPort80Secure"
        },
        "Yes"
      ]
    }
  },
  "Outputs": {
    "BalancerWebHost": {
      "Value": {
        "Fn::GetAtt": [
          "BalancerWeb",
          "DNSName"
        ]
      }
    },
    "Kinesis": {
      "Value": {
        "Ref": "Kinesis"
      }
    },
    "Settings": {
      "Value": {
        "Ref": "Settings"
      }
    },
    "WebPort443Balancer": {
      "Value": {
        "Ref": "WebPort443Balancer"
      }
    },
    "WebPort80Balancer": {
      "Value": {
        "Ref": "WebPort80Balancer"
      }
    }
  },
  "Parameters": {
    "Cluster": {
      "Default": "",
      "Description": "",
      "Type": "String"
    },
    "Cpu": {
      "Default": "200",
      "Description": "CPU shares of each process",
      "Type": "Number"
    },
    "Environment": {
      "Default": "",
      "Description": "",
      "Type": "String"
    },
    "Key": {
      "Default": "",
      "Description": "",
      "Type": "String"
    },
    "PostgresDesiredCount": {
      "Default": "1",
      "Description": "The number of instantiations of the process to place and keep running on your cluster",
      "Type": "Number"
    },
    "PostgresMemory": {
      "Default": "256",
      "Description": "MB of RAM to reserve",
      "Type": "Number"
    },
    "Release": {
      "Default": "",
      "Description": "",
      "Type": "String"
    },
    "Repository": {
      "Default": "",
      "Description": "Source code repository",
      "Type": "String"
    },
    "Subnets": {
      "Default": "",
      "Description": "VPC subnets for this app",
      "Type": "List\u003cAWS::EC2::Subnet::Id\u003e"
    },
    "VPC": {
      "Default": "",
      "Description": "VPC for this app",
      "Type": "AWS::EC2::VPC::Id"
    },
    "Version": {
      "Description": "(REQUIRED) Lambda CustomTopic Handler Release Version",
      "MinLength": "1",
      "Type": "String"
    },
    "WebDesiredCount": {
      "Default": "1",
      "Description": "The number of instantiations of the process to place and keep running on your cluster",
      "Type": "Number"
    },
    "WebMemory": {
      "Default": "256",
      "Description": "MB of RAM to reserve",
      "Type": "Number"
    },
    "WebPort443Balancer": {
      "Default": "443",
      "Description": "",
      "Type": "String"
    },
    "WebPort443Certificate": {
      "Default": "",
      "Description": "",
      "Type": "String"
    },
    "WebPort443Host": {
      "Default": "5001",
      "Description": "",
      "Type": "String"
    },
    "WebPort443Secure": {
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Default": "No",
      "Description": "",
      "Type": "String"
    },
    "WebPort80Balancer": {
      "Default": "80",
      "Description": "",
      "Type": "String"
    },
    "WebPort80Certificate": {
      "Default": "",
      "Description": "",
      "Type": "String"
    },
    "WebPort80Host": {
      "Default": "5000",
      "Description": "",
      "Type": "String"
    },
    "WebPort80Secure": {
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Default": "No",
      "Description": "",
      "Type": "String"
    }
  },
  "Resources": {
    "BalancerWeb": {
      "Properties": {
        "ConnectionDrainingPolicy": {
          "Enabled": true,
          "Timeout": 60
        },
        "ConnectionSettings": {
          "IdleTimeout": 3600
        },
        "CrossZone": true,
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": 5,
          "Target": {
            "Fn::Join": [
              ":",
              [
                "TCP",
                {
                  "Ref": "WebPort80Host"
                }
              ]
            ]
          },
          "Timeout": 3,
          "UnhealthyThreshold": "2"
        },
        "LBCookieStickinessPolicy": [
          {
            "PolicyName": "affinity"
          }
        ],
        "Listeners": [
          {
            "Fn::If": [
              "BlankWebPort80Certificate",
              {
                "InstancePort": {
                  "Ref": "WebPort80Host"
                },
                "InstanceProtocol": "TCP",
                "LoadBalancerPort": {
                  "Ref": "WebPort80Balancer"
                },
                "Protocol": "TCP"
              },
              {
                "Fn::If": [
                  "SecureWebPort80",
                  {
                    "InstancePort": {
                      "Ref": "WebPort80Host"
                    },
                    "InstanceProtocol": "SSL",
                    "LoadBalancerPort": {
                      "Ref": "WebPort80Balancer"
                    },
                    "Protocol": "SSL",
                    "SSLCertificateId": {
                      "Ref": "WebPort80Certificate"
                    }
                  },
                  {
                    "InstancePort": {
                      "Ref": "WebPort80Host"
                    },
                    "InstanceProtocol": "TCP",
                    "LoadBalancerPort": {
                      "Ref": "WebPort80Balancer"
                    },
                    "Protocol": "SSL",
                    "SSLCertificateId": {
                      "Ref": "WebPort80Certificate"
                    }
                  }
                ]
              }
            ]
          },
          {
            "Fn::If": [
              "BlankWebPort443Certificate",
              {
                "InstancePort": {
                  "Ref": "WebPort443Host"
                },
                "InstanceProtocol": "TCP",
                "LoadBalancerPort": {
                  "Ref": "WebPort443Balancer"
                },
                "Protocol": "TCP"
              },
              {
                "Fn::If": [
                  "SecureWebPort443",
                  {
                    "InstancePort": {
                      "Ref": "WebPort443Host"
                    },
                    "InstanceProtocol": "SSL",
                    "LoadBalancerPort": {
                      "Ref": "WebPort443Balancer"
                    },
                    "Protocol": "SSL",
                    "SSLCertificateId": {
                      "Ref": "WebPort443Certificate"
                    }
                  },
                  {
                    "InstancePort": {
                      "Ref": "WebPort443Host"
                    },
                    "InstanceProtocol": "TCP",
                    "LoadBalancerPort": {
                      "Ref": "WebPort443Balancer"
                    },
                    "Protocol": "SSL",
                    "SSLCertificateId": {
                      "Ref": "WebPort443Certificate"
                    }
                  }
                ]
              }
            ]
          },
          {
            "Ref": "AWS::NoValue"
          }
        ],
        "LoadBalancerName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "web"
            ]
          ]
        },
        "SecurityGroups": [
          {
            "Ref": "BalancerWebSecurityGroup"
          }
        ],
        "Subnets": {
          "Ref": "Subnets"
        }
      },
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
    },
    "BalancerWebSecurityGroup": {
      "Properties": {
        "GroupDescription": {
          "Fn::Join": [
            " ",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-balancer"
            ]
          ]
        },
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": {
              "Ref": "WebPort80Balancer"
            },
            "IpProtocol": "tcp",
            "ToPort": {
              "Ref": "WebPort80Balancer"
            }
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": {
              "Ref": "WebPort443Balancer"
            },
            "IpProtocol": "tcp",
            "ToPort": {
              "Ref": "WebPort443Balancer"
            }
          },
          {
            "Ref": "AWS::NoValue"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "CustomTopic": {
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                "convox",
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                "release/",
                {
                  "Ref": "Version"
                },
                "/formation.zip"
              ]
            ]
          }
        },
        "Handler": "lambda.external",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CustomTopicRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs",
        "Timeout": "30"
      },
      "Type": "AWS::Lambda::Function"
    },
    "CustomTopicRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "*",
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "Administrator"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "Kinesis": {
      "Properties": {
        "ShardCount": 1
      },
      "Type": "AWS::Kinesis::Stream"
    },
    "LogsAccess": {
      "Properties": {
        "Serial": "1",
        "Status": "Active",
        "UserName": {
          "Ref": "LogsUser"
        }
      },
      "Type": "AWS::IAM::AccessKey"
    },
    "LogsUser": {
      "Properties": {
        "Path": "/convox/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "kinesis:PutRecords"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:kinesis:*:*:stream/",
                          {
                            "Ref": "AWS::StackName"
                          },
                          "-*"
                        ]
                      ]
                    }
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "LogsRole"
          }
        ]
      },
      "Type": "AWS::IAM::User"
    },
    "PostgresECSService": {
      "DependsOn": [
        "CustomTopic"
      ],
      "Properties": {
        "Cluster": {
          "Ref": "Cluster"
        },
        "DesiredCount": {
          "Ref": "PostgresDesiredCount"
        },
        "LoadBalancers": [
          {
            "Ref": "AWS::NoValue"
          }
        ],
        "Name": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "postgres"
            ]
          ]
        },
        "Role": {
          "Ref": "ServiceRole"
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomTopic",
            "Arn"
          ]
        },
        "TaskDefinition": {
          "Ref": "PostgresECSTaskDefinition"
        }
      },
      "Type": "Custom::ECSService",
      "Version": "1.0"
    },
    "PostgresECSTaskDefinition": {
      "DependsOn": [
        "CustomTopic",
        "ServiceRole"
      ],
      "Properties": {
        "Environment": {
          "Ref": "Environment"
        },
        "Key": {
          "Ref": "Key"
        },
        "Name": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "postgres"
            ]
          ]
        },
        "Release": {
          "Ref": "Release"
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomTopic",
            "Arn"
          ]
        },
        "Tasks": [
          {
            "Fn::If": [
              "BlankPostgresService",
              {
                "Command": "",
                "Environment": {
                  "KINESIS": {
                    "Ref": "Kinesis"
                  },
                  "POSTGRES_PASSWORD": "password",
                  "POSTGRES_USERNAME": "postgres",
                  "PROCESS": "postgres"
                },
                "Image": "mdillon/postgis",
                "Memory": {
                  "Ref": "PostgresMemory"
                },
                "Name": "postgres",
                "PortMappings": [
                  {
                    "Ref": "AWS::NoValue"
                  }
                ],
                "Services": [
                  {
                    "Ref": "AWS::NoValue"
                  }
                ],
                "Volumes": [
                  {
                    "Ref": "AWS::NoValue"
                  }
                ]
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ]
      },
      "Type": "Custom::ECSTaskDefinition",
      "Version": "1.0"
    },
    "ServiceRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "ec2:Describe*",
                    "ec2:AuthorizeSecurityGroupIngress"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ]
                }
              ]
            },
            "PolicyName": "ServiceRole"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "Settings": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AccessControl": "Private",
        "Tags": [
          {
            "Key": "system",
            "Value": "convox"
          },
          {
            "Key": "app",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      },
      "Type": "AWS::S3::Bucket"
    },
    "WebECSService": {
      "DependsOn": [
        "BalancerWeb",
        "CustomTopic"
      ],
      "Properties": {
        "Cluster": {
          "Ref": "Cluster"
        },
        "DesiredCount": {
          "Ref": "WebDesiredCount"
        },
        "LoadBalancers": [
          {
            "Fn::Join": [
              ":",
              [
                {
                  "Ref": "BalancerWeb"
                },
                "web",
                "3000"
              ]
            ]
          },
          {
            "Fn::Join": [
              ":",
              [
                {
                  "Ref": "BalancerWeb"
                },
                "web",
                "3001"
              ]
            ]
          },
          {
            "Ref": "AWS::NoValue"
          }
        ],
        "Name": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "web"
            ]
          ]
        },
        "Role": {
          "Ref": "ServiceRole"
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomTopic",
            "Arn"
          ]
        },
        "TaskDefinition": {
          "Ref": "WebECSTaskDefinition"
        }
      },
      "Type": "Custom::ECSService",
      "Version": "1.0"
    },
    "WebECSTaskDefinition": {
      "DependsOn": [
        "CustomTopic",
        "ServiceRole"
      ],
      "Properties": {
        "Environment": {
          "Ref": "Environment"
        },
        "Key": {
          "Ref": "Key"
        },
        "Name": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "web"
            ]
          ]
        },
        "Release": {
          "Ref": "Release"
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomTopic",
            "Arn"
          ]
        },
        "Tasks": [
          {
            "Fn::If": [
              "BlankWebService",
              {
                "Command": "",
                "Environment": {
                  "KINESIS": {
                    "Ref": "Kinesis"
                  },
                  "PROCESS": "web"
                },
                "Image": "",
                "Memory": {
                  "Ref": "WebMemory"
                },
                "Name": "web",
                "PortMappings": [
                  {
                    "Fn::Join": [
                      ":",
                      [
                        {
                          "Ref": "WebPort80Host"
                        },
                        "3000"
                      ]
                    ]
                  },
                  {
                    "Fn::Join": [
                      ":",
                      [
                        {
                          "Ref": "WebPort443Host"
                        },
                        "3001"
                      ]
                    ]
                  },
                  {
                    "Ref": "AWS::NoValue"
                  }
                ],
                "Services": [
                  {
                    "Ref": "AWS::NoValue"
                  }
                ],
                "Volumes": [
                  {
                    "Ref": "AWS::NoValue"
                  }
                ]
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ]
      },
      "Type": "Custom::ECSTaskDefinition",
      "Version": "1.0"
    }
  }
}
