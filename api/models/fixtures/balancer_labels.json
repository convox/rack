
  {
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Conditions": {
      
  
    
    
    "BalancerMainBlankHealthPath": {
      "Fn::Equals": [
        {"Ref": "MainHealthPath"},
        ""
      ]
    },
    "BalancerMainBlankHealthTimeout": {
      "Fn::Equals": [
        {"Ref": "MainHealthTimeout"},
        ""
      ]
    },
    
      "BalancerMainPort443Proxy": {
        "Fn::Equals": [ { "Ref": "MainPort443Proxy" }, "Yes" ]
      },
      "BalancerMainPort443Secure": {
        "Fn::Equals": [ { "Ref": "MainPort443Secure" }, "Yes" ]
      },
    
  

      
  
    "BlankMainService": { "Fn::Equals": [ "", "" ] },
    "EnabledMain": { "Fn::Not": [{ "Fn::Equals": [ { "Fn::Select": [ 0, { "Ref": "MainFormation" } ] }, "-1" ] }] },
  

      
  "RegionHasRegistry": {
      "Fn::Or": [
        { "Fn::Equals": [ { "Ref": "AWS::Region" }, "us-east-1" ]},
        { "Fn::Equals": [ { "Ref": "AWS::Region" }, "us-west-2" ]},
        { "Fn::Equals": [ { "Ref": "AWS::Region" }, "eu-west-1" ]}
      ]
  },

      "Private": { "Fn::Equals": [ { "Ref": "Private" }, "Yes" ] },
      "BlankSecurityGroup" : {"Fn::Equals" : [{"Ref" : "SecurityGroup"}, ""]}
    },
    "Parameters" : {
      
  
    
    "MainHealthPath": {
      "Type": "String",
      "Default": "",
      "Description": "Path used when health check protocol is http(s)"
    },
    "MainHealthTimeout": {
      "Default": "3",
      "Type": "Number",
      "MaxValue": 60
    },
    
      "MainPort443Balancer": {
        "Type" : "String",
        "Default" : "443",
        "Description" : ""
      },
      "MainPort443Certificate": {
        "Type" : "String",
        "Default" : "",
        "Description" : ""
      },
      "MainPort443Host": {
        "Type" : "String",
        "Default" : "48454",
        "Description" : ""
      },
      "MainPort443Secure": {
        "Type" : "String",
        "Default" : "No",
        "Description" : "",
        "AllowedValues": [ "Yes", "No" ]
      },
      "MainPort443Protocol": {
        "Type" : "String",
        "Default" : "tls",
        "Description" : "",
        "AllowedValues": [ "http", "https", "tcp", "tls" ]
      },
      "MainPort443Proxy": {
        "Type" : "String",
        "Default" : "No",
        "Description" : "",
        "AllowedValues": [ "Yes", "No" ]
      },
    
  

      
  
    "MainFormation": {
      "Type": "CommaDelimitedList",
      "Default": "1,0,256",
      "Description": "Number of processes to run, CPU units to reserve, and MB of RAM to reserve"
    },
  


      "Cluster": {
        "Type" : "String",
        "Default" : "",
        "Description" : ""
      },
      "DeploymentMaximum": {
        "Type": "Number",
        "Default": "200",
        "Description": "Maximum percentage of processes to keep running while deploying"
      },
      "DeploymentMinimum": {
        "Type": "Number",
        "Default": "100",
        "Description": "Minimum percentage of processes to keep running while deploying"
      },
      "Environment": {
        "Type": "String",
        "Default": "",
        "Description": ""
      },
      "Key": {
        "Type": "String",
        "Default": "",
        "Description": ""
      },
      "Private": {
        "Type": "String",
        "Description": "Create internal load balancers in private subnets",
        "Default": "No",
        "AllowedValues": [ "Yes", "No" ]
      },
      "Release": {
        "Type" : "String",
        "Default" : "",
        "Description" : ""
      },
      "Repository": {
        "Type" : "String",
        "Default" : "",
        "Description" : "Source code repository"
      },
      "SecurityGroup": {
        "Type" : "String",
        "Default" : "",
        "Description" : "The Load balancer security group for this app"
      },
      "Subnets": {
        "Type" : "List<AWS::EC2::Subnet::Id>",
        "Default" : "",
        "Description" : "VPC subnets for this app"
      },
      "SubnetsPrivate": {
        "Type" : "List<AWS::EC2::Subnet::Id>",
        "Default" : "",
        "Description" : "VPC private subnets for this app"
      },
      "Version": {
        "Description": "(REQUIRED) Lambda CustomTopic Handler Release Version",
        "MinLength" : "1",
        "Type": "String"
      },
      "VPC": {
        "Type" : "AWS::EC2::VPC::Id",
        "Default" : "",
        "Description" : "VPC for this app"
      },
      "VPCCIDR": {
        "Type" : "String",
        "Default" : "",
        "Description" : "VPC CIDR for this app"
      }
    },
    "Mappings": {
      "PortProtocol": {
        "http": { "ListenerProtocol": "HTTP", "InstanceProtocol": "HTTP", "SecureInstanceProtocol": "HTTPS" },
        "https": { "ListenerProtocol": "HTTPS", "InstanceProtocol": "HTTP", "SecureInstanceProtocol": "HTTPS"  },
        "tcp": { "ListenerProtocol": "TCP", "InstanceProtocol": "TCP", "SecureInstanceProtocol": "SSL"  },
        "tls": { "ListenerProtocol": "SSL", "InstanceProtocol": "TCP", "SecureInstanceProtocol": "SSL"   }
      }
    },
    "Resources": {
      "CustomTopicRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": { "Service": [ "lambda.amazonaws.com" ] },
                "Action": [ "sts:AssumeRole" ]
              }
            ]
          },
          "Path": "/",
          "Policies": [
            {
              "PolicyName": "Administrator",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [ { "Effect": "Allow", "Action": "*", "Resource": "*" } ]
              }
            }
          ]
        }
      },
      "CustomTopic": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "Code": {
            "S3Bucket": { "Fn::Join": [ "-", [ "convox", { "Ref": "AWS::Region" } ] ] },
            "S3Key": { "Fn::Join": [ "", [ "release/", { "Ref": "Version" }, "/formation.zip" ] ] }
          },
          "Handler": "lambda.external",
          "MemorySize": "128",
          "Role": { "Fn::GetAtt": [ "CustomTopicRole", "Arn" ] },
          "Runtime": "nodejs",
          "Timeout": "30"
        }
      },
      
  
  
    
    "BalancerMainSecurityGroup": {
      "Condition": "EnabledMain",
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": { "Fn::Join": [ " ", [ { "Ref": "AWS::StackName" }, "-balancer" ] ] },
        "SecurityGroupIngress": [
          
            {
              
              "CidrIp": "0.0.0.0/0",
              
              "IpProtocol": "tcp",
              "FromPort": { "Ref": "MainPort443Balancer" },
              "ToPort": { "Ref": "MainPort443Balancer" }
            },
          
          { "Ref": "AWS::NoValue" }
        ],
        "VpcId": { "Ref": "VPC" }
      }
    },
    "BalancerMain": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Condition": "EnabledMain",
      "DependsOn": [ "BalancerMainSecurityGroup" ],
      "Properties": {
        
          "Subnets": { "Ref": "Subnets" },
        
        "ConnectionDrainingPolicy": { "Enabled": true, "Timeout": 60 },
        "ConnectionSettings": { "IdleTimeout": 3600 },
        "CrossZone": true,
        
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "5",
          "Target": {
            
            "Fn::Join": [
              "",
              [
                {
                  
                  "Fn::Join": [
                    ":",
                    [
                      {
                        "Fn::If": [
                          "BalancerMainBlankHealthPath",
                          
                          {
                            "Fn::If": [
                              "BalancerMainPort443Secure",
                              {"Fn::FindInMap": ["PortProtocol", "tcp", "SecureInstanceProtocol"]},
                              {"Fn::FindInMap": ["PortProtocol", "tcp", "InstanceProtocol"]}
                            ]
                          },
                          
                          {
                            "Fn::If": [
                              "BalancerMainPort443Secure",
                              {"Fn::FindInMap": ["PortProtocol", "http", "SecureInstanceProtocol"]},
                              {"Fn::FindInMap": ["PortProtocol", "http", "InstanceProtocol"]}
                            ]
                          }
                        ]
                      },
                      { "Ref": "MainPort443Host" }
                    ]
                  ]
                },
                { "Ref": "MainHealthPath" }
              ]
            ]
          },
          "Timeout": {
            "Fn::If": [
              "BalancerMainBlankHealthTimeout",
              "3",
              { "Ref": "MainHealthTimeout" }
            ]
          },
          "UnhealthyThreshold": "2"
        },
        "Listeners": [
          
            { "Fn::If": [ "BalancerMainPort443Secure",
              {
                "Protocol": { "Fn::FindInMap": [ "PortProtocol", { "Ref": "MainPort443Protocol" }, "ListenerProtocol" ] },
                "LoadBalancerPort": { "Ref": "MainPort443Balancer" },
                "InstanceProtocol": { "Fn::FindInMap": [ "PortProtocol", { "Ref": "MainPort443Protocol" }, "SecureInstanceProtocol" ] },
                "InstancePort": { "Ref": "MainPort443Host" },
                "SSLCertificateId": { "Ref": "MainPort443Certificate" }
              },
              {
                "Protocol": { "Fn::FindInMap": [ "PortProtocol", { "Ref": "MainPort443Protocol" }, "ListenerProtocol" ] },
                "LoadBalancerPort": { "Ref": "MainPort443Balancer" },
                "InstanceProtocol": { "Fn::FindInMap": [ "PortProtocol", { "Ref": "MainPort443Protocol" }, "InstanceProtocol" ] },
                "InstancePort": { "Ref": "MainPort443Host" },
                "SSLCertificateId": { "Ref": "MainPort443Certificate" }
              }
            ] },
          
          { "Ref": "AWS::NoValue" }
        ],
        "Policies": [
          
            { "Fn::If": [ "BalancerMainPort443Proxy",
              {
                "PolicyName": "EnableProxyProtocol",
                "PolicyType": "ProxyProtocolPolicyType",
                "Attributes": [{
                    "Name": "ProxyProtocol",
                    "Value": "true"
                }],
                "InstancePorts": [{ "Ref": "MainPort443Host" }]
              },
              { "Ref": "AWS::NoValue" }
            ] },
          
          { "Ref": "AWS::NoValue" }
        ],
        "LBCookieStickinessPolicy": [{ "PolicyName": "affinity" }],
        "LoadBalancerName": "httpd-main-KQSNMIK",
        "SecurityGroups" : [{ "Fn::If" : [
	    "BlankSecurityGroup",
	    {"Ref" : "BalancerMainSecurityGroup"},
	    {"Ref" : "SecurityGroup"}
        ]}]
      }
    },
  

      
  
  

      
  "LogGroup": {
    "Type": "AWS::Logs::LogGroup"
  },

      
  
  
    
      "MainECSTaskDefinition": {
        "DependsOn": ["CustomTopic", "ServiceRole"],
        "Type": "Custom::ECSTaskDefinition",
        "Version": "1.0",
        "Properties": {
          "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
          "Name": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "main" ] ] },
          "Release": { "Ref": "Release" },
          "Environment": { "Ref": "Environment" },
          "Key": { "Ref": "Key" },
          "Tasks": [ 

{ "Fn::If": [ "BlankMainService",
  {
    "Name": "main",
    "Image": "",
    "Command": [
      
      ],
    "Cpu": { "Fn::Select": [ 1, { "Ref": "MainFormation" } ] },
    "Memory": { "Fn::Select": [ 2, { "Ref": "MainFormation" } ] },
    "Environment": {
      
      
      "LOG_GROUP": { "Ref": "LogGroup" },
      "PROCESS": "main"
    },
    "Volumes": [
      
      { "Ref" : "AWS::NoValue" }
    ],
    "Services": [
      { "Ref" : "AWS::NoValue" }
    ],
    "PortMappings": [
      
      
        { "Fn::Join": [ ":", [
          { "Ref": "MainPort443Host" },
          "5000"
        ] ] },
      
      { "Ref" : "AWS::NoValue" }
    ],
    "Privileged": "false"
  },
  { "Ref" : "AWS::NoValue" } ]
}
 ]
        }
      },
      "MainECSService": {
        "Condition": "EnabledMain",
        "DependsOn": [
          
            "BalancerMain",
          
          "CustomTopic",
          "ServiceRole"
         ],
        "Type": "Custom::ECSService",
        "Version": "1.0",
        "Properties": {
          "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
          "Cluster": { "Ref": "Cluster" },
          "DesiredCount": { "Fn::Select": [ 0, { "Ref": "MainFormation" } ] },
          "Name": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "main" ] ] },
          "TaskDefinition": { "Ref": "MainECSTaskDefinition" },
          "Role": { "Ref": "ServiceRole" },
          "DeploymentMinimumPercent": { "Ref": "DeploymentMinimum" },
          "DeploymentMaximumPercent": { "Ref": "DeploymentMaximum" },
          "LoadBalancers": [
            
              { "Fn::Join": [ ":", [ { "Ref": "BalancerMain" }, "main", "5000" ] ] },
            
            { "Ref": "AWS::NoValue" }
          ]
        }
      },
    
  

      
  "RegistryRepository": {
    "Type": "Custom::ECRRepository",
    "Condition": "RegionHasRegistry",
    "Version": "1.0",
    "Properties": {
      "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
      "Name": { "Ref": "AWS::StackName" }
    }
  },


      
  "ServiceRole": {
    "Type": "AWS::IAM::Role",
    "Properties": {
      "AssumeRolePolicyDocument": {
        "Statement": [
          {
            "Action": [
              "sts:AssumeRole"
            ],
            "Effect": "Allow",
            "Principal": {
              "Service": [
                "ecs.amazonaws.com"
              ]
            }
          }
        ],
        "Version": "2012-10-17"
      },
      "Path": "/",
      "Policies": [
        {
          "PolicyName": "ServiceRole",
          "PolicyDocument": {
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "elasticloadbalancing:Describe*",
                  "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                  "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                  "ec2:Describe*",
                  "ec2:AuthorizeSecurityGroupIngress"
                ],
                "Resource": [
                  "*"
                ]
              }
            ]
          }
        }
      ]
    }
  },

      
  "Settings": {
    "Type": "AWS::S3::Bucket",
    "DeletionPolicy": "Retain",
    "Properties": {
      "AccessControl": "Private",
      "Tags": [
        { "Key": "system", "Value": "convox" },
        { "Key": "app", "Value": { "Ref": "AWS::StackName" } }
      ]
    }
  }

    },
    "Outputs": {
      
  
  
    
    "BalancerMainHost": {
      "Condition": "EnabledMain",
      "Value": { "Fn::GetAtt": [ "BalancerMain", "DNSName" ] }
    },
    
      "MainPort443Balancer": {
        "Condition": "EnabledMain",
        "Value": { "Ref": "MainPort443Balancer" }
      },
      "MainPort443BalancerName": {
        "Condition": "EnabledMain",
        "Value": "httpd-main-KQSNMIK"
      },
    
  

      
  "LogGroup": {
    "Value": { "Ref": "LogGroup" }
  },

      
  "RegistryId": {
    "Condition": "RegionHasRegistry",
    "Value": { "Ref": "AWS::AccountId" }
  },
  "RegistryRepository": {
    "Condition": "RegionHasRegistry",
    "Value": { "Fn::GetAtt": [ "RegistryRepository", "RepositoryName" ] }
  },


      "Settings": {
        "Value": { "Ref": "Settings" }
      }
    }
  }

