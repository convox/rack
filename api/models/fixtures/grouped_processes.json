{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "BlankBalancerBarPort9000Certificate": {
      "Fn::Equals": [
        {
          "Ref": "BarPort9000Certificate"
        },
        ""
      ]
    },
    "BlankBalancerFooPort443Certificate": {
      "Fn::Equals": [
        {
          "Ref": "FooPort443Certificate"
        },
        ""
      ]
    },
    "BlankBalancerSslterminatorPort443Certificate": {
      "Fn::Equals": [
        {
          "Ref": "SslterminatorPort443Certificate"
        },
        ""
      ]
    },
    "BlankSecurityGroup": {
      "Fn::Equals": [
        {
          "Ref": "SecurityGroup"
        },
        ""
      ]
    },
    "EnabledBar": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                0,
                {
                  "Ref": "BarFormation"
                }
              ]
            },
            "-1"
          ]
        }
      ]
    },
    "EnabledFoo": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                0,
                {
                  "Ref": "FooFormation"
                }
              ]
            },
            "-1"
          ]
        }
      ]
    },
    "EnabledFoobarGroup": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "FoobarGroupFormation"
            },
            "-1"
          ]
        }
      ]
    },
    "EnabledSslterminator": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                0,
                {
                  "Ref": "SslterminatorFormation"
                }
              ]
            },
            "-1"
          ]
        }
      ]
    },
    "EnabledWeb": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                0,
                {
                  "Ref": "WebFormation"
                }
              ]
            },
            "-1"
          ]
        }
      ]
    },
    "EnabledWebGroup": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "WebGroupFormation"
            },
            "-1"
          ]
        }
      ]
    },
    "EnabledWorker": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                0,
                {
                  "Ref": "WorkerFormation"
                }
              ]
            },
            "-1"
          ]
        }
      ]
    },
    "EnabledWorkerGroup": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "WorkerGroupFormation"
            },
            "-1"
          ]
        }
      ]
    },
    "Internal": {
      "Fn::Equals": [
        {
          "Ref": "Internal"
        },
        "Yes"
      ]
    },
    "Private": {
      "Fn::Equals": [
        {
          "Ref": "Private"
        },
        "Yes"
      ]
    }
  },
  "Mappings": {
    "PortProtocol": {
      "http": {
        "InstanceProtocol": "HTTP",
        "ListenerProtocol": "HTTP",
        "SecureInstanceProtocol": "HTTPS"
      },
      "https": {
        "InstanceProtocol": "HTTP",
        "ListenerProtocol": "HTTPS",
        "SecureInstanceProtocol": "HTTPS"
      },
      "tcp": {
        "InstanceProtocol": "TCP",
        "ListenerProtocol": "TCP",
        "SecureInstanceProtocol": "SSL"
      },
      "tls": {
        "InstanceProtocol": "TCP",
        "ListenerProtocol": "SSL",
        "SecureInstanceProtocol": "SSL"
      }
    }
  },
  "Outputs": {
    "BalancerBarHost": {
      "Condition": "EnabledBar",
      "Value": {
        "Fn::GetAtt": [
          "BalancerBar",
          "DNSName"
        ]
      }
    },
    "BalancerFooHost": {
      "Condition": "EnabledFoo",
      "Value": {
        "Fn::GetAtt": [
          "BalancerFoo",
          "DNSName"
        ]
      }
    },
    "BalancerSslterminatorHost": {
      "Condition": "EnabledSslterminator",
      "Value": {
        "Fn::GetAtt": [
          "BalancerSslterminator",
          "DNSName"
        ]
      }
    },
    "BarPort9000Balancer": {
      "Condition": "EnabledBar",
      "Value": "9000"
    },
    "BarPort9000BalancerName": {
      "Condition": "EnabledBar",
      "Value": {
        "Fn::If": [
          "Internal",
          {
            "Fn::Join": [
              "-",
              [
                "httpd-bar-PX3ZPBB",
                "n"
              ]
            ]
          },
          "httpd-bar-PX3ZPBB"
        ]
      }
    },
    "FooPort443Balancer": {
      "Condition": "EnabledFoo",
      "Value": "443"
    },
    "FooPort443BalancerName": {
      "Condition": "EnabledFoo",
      "Value": {
        "Fn::If": [
          "Internal",
          {
            "Fn::Join": [
              "-",
              [
                "httpd-foo-I5T6O34",
                "n"
              ]
            ]
          },
          "httpd-foo-I5T6O34"
        ]
      }
    },
    "LogGroup": {
      "Value": {
        "Ref": "LogGroup"
      }
    },
    "RegistryId": {
      "Value": {
        "Ref": "AWS::AccountId"
      }
    },
    "RegistryRepository": {
      "Value": {
        "Fn::GetAtt": [
          "RegistryRepository",
          "RepositoryName"
        ]
      }
    },
    "Settings": {
      "Value": {
        "Ref": "Settings"
      }
    },
    "SslterminatorPort443Balancer": {
      "Condition": "EnabledSslterminator",
      "Value": "443"
    },
    "SslterminatorPort443BalancerName": {
      "Condition": "EnabledSslterminator",
      "Value": {
        "Fn::If": [
          "Internal",
          {
            "Fn::Join": [
              "-",
              [
                "httpd-sslterminator-YIH5GRH",
                "n"
              ]
            ]
          },
          "httpd-sslterminator-YIH5GRH"
        ]
      }
    }
  },
  "Parameters": {
    "BarFormation": {
      "Default": "1,0,256",
      "Description": "Number of processes to run, CPU units to reserve, and MB of RAM to reserve",
      "Type": "CommaDelimitedList"
    },
    "BarPort9000Certificate": {
      "Default": "",
      "Description": "",
      "Type": "String"
    },
    "BarPort9000Host": {
      "Default": "5000",
      "Description": "",
      "Type": "String"
    },
    "Cluster": {
      "Default": "",
      "Description": "",
      "Type": "String"
    },
    "CustomTopicRuntime": {
      "Default": "nodejs",
      "Description": "",
      "Type": "String"
    },
    "DeploymentMaximum": {
      "Default": "200",
      "Description": "Maximum percentage of processes to keep running while deploying",
      "Type": "Number"
    },
    "DeploymentMinimum": {
      "Default": "50",
      "Description": "Minimum percentage of processes to keep running while deploying",
      "Type": "Number"
    },
    "Environment": {
      "Default": "",
      "Description": "",
      "Type": "String"
    },
    "FooFormation": {
      "Default": "1,0,256",
      "Description": "Number of processes to run, CPU units to reserve, and MB of RAM to reserve",
      "Type": "CommaDelimitedList"
    },
    "FooPort443Certificate": {
      "Default": "",
      "Description": "",
      "Type": "String"
    },
    "FooPort443Host": {
      "Default": "5000",
      "Description": "",
      "Type": "String"
    },
    "FoobarGroupFormation": {
      "Default": "1",
      "Description": "Number of processes to run",
      "Type": "Number"
    },
    "Internal": {
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Default": "No",
      "Description": "Only allow access to this app from inside the VPC",
      "Type": "String"
    },
    "Key": {
      "Default": "",
      "Description": "",
      "Type": "String"
    },
    "Private": {
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Default": "No",
      "Description": "Use SubnetsPrivate to specify VPC-side load balancer endpoints",
      "Type": "String"
    },
    "Release": {
      "Default": "",
      "Description": "",
      "Type": "String"
    },
    "Repository": {
      "Default": "",
      "Description": "Source code repository",
      "Type": "String"
    },
    "SecurityGroup": {
      "Default": "",
      "Description": "The Load balancer security group for this app",
      "Type": "String"
    },
    "SslterminatorFormation": {
      "Default": "1,0,256",
      "Description": "Number of processes to run, CPU units to reserve, and MB of RAM to reserve",
      "Type": "CommaDelimitedList"
    },
    "SslterminatorPort443Certificate": {
      "Default": "",
      "Description": "",
      "Type": "String"
    },
    "SslterminatorPort443Host": {
      "Default": "5000",
      "Description": "",
      "Type": "String"
    },
    "Subnets": {
      "Default": "",
      "Description": "VPC subnets for this app",
      "Type": "List\u003cAWS::EC2::Subnet::Id\u003e"
    },
    "SubnetsPrivate": {
      "Default": "",
      "Description": "VPC private subnets for this app",
      "Type": "List\u003cAWS::EC2::Subnet::Id\u003e"
    },
    "TaskRole": {
      "Default": "",
      "Description": "IAM Role to apply to ECS Tasks of this app",
      "Type": "String"
    },
    "VPC": {
      "Default": "",
      "Description": "VPC for this app",
      "Type": "AWS::EC2::VPC::Id"
    },
    "VPCCIDR": {
      "Default": "",
      "Description": "VPC CIDR for this app",
      "Type": "String"
    },
    "Version": {
      "Description": "(REQUIRED) Lambda CustomTopic Handler Release Version",
      "MinLength": "1",
      "Type": "String"
    },
    "WebFormation": {
      "Default": "1,0,256",
      "Description": "Number of processes to run, CPU units to reserve, and MB of RAM to reserve",
      "Type": "CommaDelimitedList"
    },
    "WebGroupFormation": {
      "Default": "1",
      "Description": "Number of processes to run",
      "Type": "Number"
    },
    "WorkerFormation": {
      "Default": "1,0,256",
      "Description": "Number of processes to run, CPU units to reserve, and MB of RAM to reserve",
      "Type": "CommaDelimitedList"
    },
    "WorkerGroupFormation": {
      "Default": "1",
      "Description": "Number of processes to run",
      "Type": "Number"
    }
  },
  "Resources": {
    "BalancerBar": {
      "Condition": "EnabledBar",
      "DependsOn": [
        "BalancerBarSecurityGroup"
      ],
      "Properties": {
        "ConnectionDrainingPolicy": {
          "Enabled": true,
          "Timeout": "60"
        },
        "ConnectionSettings": {
          "IdleTimeout": "3600"
        },
        "CrossZone": true,
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "5",
          "Target": {
            "Fn::Join": [
              "",
              [
                "TCP:",
                {
                  "Ref": "BarPort9000Host"
                },
                ""
              ]
            ]
          },
          "Timeout": "3",
          "UnhealthyThreshold": "2"
        },
        "LBCookieStickinessPolicy": [
          {
            "PolicyName": "affinity"
          }
        ],
        "Listeners": [
          {
            "InstancePort": {
              "Ref": "BarPort9000Host"
            },
            "InstanceProtocol": "HTTP",
            "LoadBalancerPort": "9000",
            "Protocol": "HTTP",
            "SSLCertificateId": {
              "Fn::If": [
                "BlankBalancerBarPort9000Certificate",
                {
                  "Ref": "AWS::NoValue"
                },
                {
                  "Ref": "BarPort9000Certificate"
                }
              ]
            }
          },
          {
            "Ref": "AWS::NoValue"
          }
        ],
        "LoadBalancerName": {
          "Fn::If": [
            "Internal",
            {
              "Fn::Join": [
                "-",
                [
                  "httpd-bar-PX3ZPBB",
                  "n"
                ]
              ]
            },
            "httpd-bar-PX3ZPBB"
          ]
        },
        "Policies": [
          {
            "Ref": "AWS::NoValue"
          }
        ],
        "Scheme": {
          "Fn::If": [
            "Internal",
            "internal",
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "SecurityGroups": [
          {
            "Fn::If": [
              "BlankSecurityGroup",
              {
                "Ref": "BalancerBarSecurityGroup"
              },
              {
                "Ref": "SecurityGroup"
              }
            ]
          }
        ],
        "Subnets": {
          "Fn::If": [
            "Internal",
            {
              "Ref": "SubnetsPrivate"
            },
            {
              "Ref": "Subnets"
            }
          ]
        }
      },
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
    },
    "BalancerBarSecurityGroup": {
      "Condition": "EnabledBar",
      "Properties": {
        "GroupDescription": {
          "Fn::Join": [
            " ",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-balancer"
            ]
          ]
        },
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "9000",
            "IpProtocol": "tcp",
            "ToPort": "9000"
          },
          {
            "Ref": "AWS::NoValue"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "BalancerFoo": {
      "Condition": "EnabledFoo",
      "DependsOn": [
        "BalancerFooSecurityGroup"
      ],
      "Properties": {
        "ConnectionDrainingPolicy": {
          "Enabled": true,
          "Timeout": "60"
        },
        "ConnectionSettings": {
          "IdleTimeout": "3600"
        },
        "CrossZone": true,
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "5",
          "Target": {
            "Fn::Join": [
              "",
              [
                "SSL:",
                {
                  "Ref": "FooPort443Host"
                },
                ""
              ]
            ]
          },
          "Timeout": "3",
          "UnhealthyThreshold": "2"
        },
        "LBCookieStickinessPolicy": [
          {
            "PolicyName": "affinity"
          }
        ],
        "Listeners": [
          {
            "InstancePort": {
              "Ref": "FooPort443Host"
            },
            "InstanceProtocol": "SSL",
            "LoadBalancerPort": "443",
            "Protocol": "SSL",
            "SSLCertificateId": {
              "Fn::If": [
                "BlankBalancerFooPort443Certificate",
                {
                  "Ref": "AWS::NoValue"
                },
                {
                  "Ref": "FooPort443Certificate"
                }
              ]
            }
          },
          {
            "Ref": "AWS::NoValue"
          }
        ],
        "LoadBalancerName": {
          "Fn::If": [
            "Internal",
            {
              "Fn::Join": [
                "-",
                [
                  "httpd-foo-I5T6O34",
                  "n"
                ]
              ]
            },
            "httpd-foo-I5T6O34"
          ]
        },
        "Policies": [
          {
            "Attributes": [
              {
                "Name": "ProxyProtocol",
                "Value": "true"
              }
            ],
            "InstancePorts": [
              {
                "Ref": "FooPort443Host"
              }
            ],
            "PolicyName": "EnableProxyProtocol",
            "PolicyType": "ProxyProtocolPolicyType"
          },
          {
            "Ref": "AWS::NoValue"
          }
        ],
        "Scheme": {
          "Fn::If": [
            "Internal",
            "internal",
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "SecurityGroups": [
          {
            "Fn::If": [
              "BlankSecurityGroup",
              {
                "Ref": "BalancerFooSecurityGroup"
              },
              {
                "Ref": "SecurityGroup"
              }
            ]
          }
        ],
        "Subnets": {
          "Fn::If": [
            "Internal",
            {
              "Ref": "SubnetsPrivate"
            },
            {
              "Ref": "Subnets"
            }
          ]
        }
      },
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
    },
    "BalancerFooSecurityGroup": {
      "Condition": "EnabledFoo",
      "Properties": {
        "GroupDescription": {
          "Fn::Join": [
            " ",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-balancer"
            ]
          ]
        },
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "443",
            "IpProtocol": "tcp",
            "ToPort": "443"
          },
          {
            "Ref": "AWS::NoValue"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "BalancerSslterminator": {
      "Condition": "EnabledSslterminator",
      "DependsOn": [
        "BalancerSslterminatorSecurityGroup"
      ],
      "Properties": {
        "ConnectionDrainingPolicy": {
          "Enabled": true,
          "Timeout": "60"
        },
        "ConnectionSettings": {
          "IdleTimeout": "3600"
        },
        "CrossZone": true,
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "5",
          "Target": {
            "Fn::Join": [
              "",
              [
                "SSL:",
                {
                  "Ref": "SslterminatorPort443Host"
                },
                ""
              ]
            ]
          },
          "Timeout": "3",
          "UnhealthyThreshold": "2"
        },
        "LBCookieStickinessPolicy": [
          {
            "PolicyName": "affinity"
          }
        ],
        "Listeners": [
          {
            "InstancePort": {
              "Ref": "SslterminatorPort443Host"
            },
            "InstanceProtocol": "SSL",
            "LoadBalancerPort": "443",
            "Protocol": "SSL",
            "SSLCertificateId": {
              "Fn::If": [
                "BlankBalancerSslterminatorPort443Certificate",
                {
                  "Ref": "AWS::NoValue"
                },
                {
                  "Ref": "SslterminatorPort443Certificate"
                }
              ]
            }
          },
          {
            "Ref": "AWS::NoValue"
          }
        ],
        "LoadBalancerName": {
          "Fn::If": [
            "Internal",
            {
              "Fn::Join": [
                "-",
                [
                  "httpd-sslterminator-YIH5GRH",
                  "n"
                ]
              ]
            },
            "httpd-sslterminator-YIH5GRH"
          ]
        },
        "Policies": [
          {
            "Attributes": [
              {
                "Name": "ProxyProtocol",
                "Value": "true"
              }
            ],
            "InstancePorts": [
              {
                "Ref": "SslterminatorPort443Host"
              }
            ],
            "PolicyName": "EnableProxyProtocol",
            "PolicyType": "ProxyProtocolPolicyType"
          },
          {
            "Ref": "AWS::NoValue"
          }
        ],
        "Scheme": {
          "Fn::If": [
            "Internal",
            "internal",
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "SecurityGroups": [
          {
            "Fn::If": [
              "BlankSecurityGroup",
              {
                "Ref": "BalancerSslterminatorSecurityGroup"
              },
              {
                "Ref": "SecurityGroup"
              }
            ]
          }
        ],
        "Subnets": {
          "Fn::If": [
            "Internal",
            {
              "Ref": "SubnetsPrivate"
            },
            {
              "Ref": "Subnets"
            }
          ]
        }
      },
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
    },
    "BalancerSslterminatorSecurityGroup": {
      "Condition": "EnabledSslterminator",
      "Properties": {
        "GroupDescription": {
          "Fn::Join": [
            " ",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-balancer"
            ]
          ]
        },
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "443",
            "IpProtocol": "tcp",
            "ToPort": "443"
          },
          {
            "Ref": "AWS::NoValue"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "CustomTopic": {
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                "convox",
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                "release/",
                {
                  "Ref": "Version"
                },
                "/lambda/formation.zip"
              ]
            ]
          }
        },
        "Handler": "index.external",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CustomTopicRole",
            "Arn"
          ]
        },
        "Runtime": {
          "Ref": "CustomTopicRuntime"
        },
        "Timeout": "300"
      },
      "Type": "AWS::Lambda::Function"
    },
    "CustomTopicRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/convox/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "*",
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "Administrator"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "FoobarGroupECSTaskDefinition": {
      "DependsOn": [
        "CustomTopic",
        "ServiceRole"
      ],
      "Properties": {
        "Environment": {
          "Ref": "Environment"
        },
        "Key": {
          "Ref": "Key"
        },
        "Name": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "foobar"
            ]
          ]
        },
        "Release": {
          "Ref": "Release"
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomTopic",
            "Arn"
          ]
        },
        "TaskRole": {
          "Ref": "TaskRole"
        },
        "Tasks": [
          {
            "Command": "bin/web",
            "Cpu": {
              "Fn::Select": [
                1,
                {
                  "Ref": "BarFormation"
                }
              ]
            },
            "Environment": {
              "APP": "httpd",
              "AWS_REGION": "test",
              "LOG_GROUP": {
                "Ref": "LogGroup"
              },
              "PROCESS": "bar",
              "RACK": "convox-test"
            },
            "ExtraHosts": [
              {
                "Ref": "AWS::NoValue"
              }
            ],
            "Image": "",
            "Links": [
              "foo"
            ],
            "Memory": {
              "Fn::Select": [
                2,
                {
                  "Ref": "BarFormation"
                }
              ]
            },
            "Name": "bar",
            "PortMappings": [
              {
                "Fn::Join": [
                  ":",
                  [
                    {
                      "Ref": "BarPort9000Host"
                    },
                    "9000/tcp"
                  ]
                ]
              },
              {
                "Ref": "AWS::NoValue"
              }
            ],
            "Privileged": "false",
            "SecureEnvironment": false,
            "Services": [
              {
                "Ref": "AWS::NoValue"
              }
            ],
            "Volumes": [
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          {
            "Command": "bin/haproxy",
            "Cpu": {
              "Fn::Select": [
                1,
                {
                  "Ref": "FooFormation"
                }
              ]
            },
            "Environment": {
              "APP": "httpd",
              "AWS_REGION": "test",
              "LOG_GROUP": {
                "Ref": "LogGroup"
              },
              "PROCESS": "foo",
              "RACK": "convox-test"
            },
            "ExtraHosts": [
              {
                "Ref": "AWS::NoValue"
              }
            ],
            "Image": "haproxy",
            "Links": [
              "bar"
            ],
            "Memory": {
              "Fn::Select": [
                2,
                {
                  "Ref": "FooFormation"
                }
              ]
            },
            "Name": "foo",
            "PortMappings": [
              {
                "Fn::Join": [
                  ":",
                  [
                    {
                      "Ref": "FooPort443Host"
                    },
                    "5000/tcp"
                  ]
                ]
              },
              {
                "Ref": "AWS::NoValue"
              }
            ],
            "Privileged": "false",
            "SecureEnvironment": false,
            "Services": [
              {
                "Ref": "AWS::NoValue"
              }
            ],
            "Volumes": [
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ]
      },
      "Type": "Custom::ECSTaskDefinition",
      "Version": "1.0"
    },
    "LogGroup": {
      "Type": "AWS::Logs::LogGroup"
    },
    "RegistryRepository": {
      "Properties": {
        "RepositoryName": {
          "Ref": "AWS::StackName"
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomTopic",
            "Arn"
          ]
        }
      },
      "Type": "Custom::ECRRepository",
      "Version": "1.0"
    },
    "ServiceFoobar": {
      "Condition": "EnabledFoobarGroup",
      "DependsOn": [
        "BalancerBar",
        "BalancerFoo",
        "CustomTopic",
        "ServiceRole"
      ],
      "Properties": {
        "Cluster": {
          "Ref": "Cluster"
        },
        "DeploymentConfiguration": {
          "MaximumPercent": "200",
          "MinimumHealthyPercent": "100"
        },
        "DesiredCount": {
          "Ref": "FoobarGroupFormation"
        },
        "LoadBalancers": [
          {
            "ContainerName": "bar",
            "ContainerPort": "9000",
            "LoadBalancerName": {
              "Ref": "BalancerBar"
            }
          },
          {
            "ContainerName": "foo",
            "ContainerPort": "5000",
            "LoadBalancerName": {
              "Ref": "BalancerFoo"
            }
          }
        ],
        "Role": {
          "Fn::GetAtt": [
            "ServiceRole",
            "Arn"
          ]
        },
        "TaskDefinition": {
          "Ref": "FoobarGroupECSTaskDefinition"
        }
      },
      "Type": "AWS::ECS::Service"
    },
    "ServiceRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/convox/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "ec2:Describe*",
                    "ec2:AuthorizeSecurityGroupIngress"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ]
                }
              ]
            },
            "PolicyName": "ServiceRole"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "ServiceWeb": {
      "Condition": "EnabledWebGroup",
      "DependsOn": [
        "BalancerSslterminator",
        "CustomTopic",
        "ServiceRole"
      ],
      "Properties": {
        "Cluster": {
          "Ref": "Cluster"
        },
        "DeploymentConfiguration": {
          "MaximumPercent": "200",
          "MinimumHealthyPercent": "100"
        },
        "DesiredCount": {
          "Ref": "WebGroupFormation"
        },
        "LoadBalancers": [
          {
            "ContainerName": "sslterminator",
            "ContainerPort": "5000",
            "LoadBalancerName": {
              "Ref": "BalancerSslterminator"
            }
          }
        ],
        "Role": {
          "Fn::GetAtt": [
            "ServiceRole",
            "Arn"
          ]
        },
        "TaskDefinition": {
          "Ref": "WebGroupECSTaskDefinition"
        }
      },
      "Type": "AWS::ECS::Service"
    },
    "ServiceWorker": {
      "Condition": "EnabledWorkerGroup",
      "DependsOn": [
        "CustomTopic",
        "ServiceRole"
      ],
      "Properties": {
        "Cluster": {
          "Ref": "Cluster"
        },
        "DeploymentConfiguration": {
          "MaximumPercent": "200",
          "MinimumHealthyPercent": "100"
        },
        "DesiredCount": {
          "Ref": "WorkerGroupFormation"
        },
        "TaskDefinition": {
          "Ref": "WorkerGroupECSTaskDefinition"
        }
      },
      "Type": "AWS::ECS::Service"
    },
    "Settings": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AccessControl": "Private",
        "Tags": [
          {
            "Key": "system",
            "Value": "convox"
          },
          {
            "Key": "app",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      },
      "Type": "AWS::S3::Bucket"
    },
    "WebGroupECSTaskDefinition": {
      "DependsOn": [
        "CustomTopic",
        "ServiceRole"
      ],
      "Properties": {
        "Environment": {
          "Ref": "Environment"
        },
        "Key": {
          "Ref": "Key"
        },
        "Name": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "web"
            ]
          ]
        },
        "Release": {
          "Ref": "Release"
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomTopic",
            "Arn"
          ]
        },
        "TaskRole": {
          "Ref": "TaskRole"
        },
        "Tasks": [
          {
            "Command": "bin/haproxy",
            "Cpu": {
              "Fn::Select": [
                1,
                {
                  "Ref": "SslterminatorFormation"
                }
              ]
            },
            "Environment": {
              "APP": "httpd",
              "AWS_REGION": "test",
              "LOG_GROUP": {
                "Ref": "LogGroup"
              },
              "PROCESS": "sslterminator",
              "RACK": "convox-test"
            },
            "ExtraHosts": [
              {
                "Ref": "AWS::NoValue"
              }
            ],
            "Image": "haproxy",
            "Links": [
              "web"
            ],
            "Memory": {
              "Fn::Select": [
                2,
                {
                  "Ref": "SslterminatorFormation"
                }
              ]
            },
            "Name": "sslterminator",
            "PortMappings": [
              {
                "Fn::Join": [
                  ":",
                  [
                    {
                      "Ref": "SslterminatorPort443Host"
                    },
                    "5000/tcp"
                  ]
                ]
              },
              {
                "Ref": "AWS::NoValue"
              }
            ],
            "Privileged": "false",
            "SecureEnvironment": false,
            "Services": [
              {
                "Ref": "AWS::NoValue"
              }
            ],
            "Volumes": [
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          {
            "Command": "bin/web",
            "Cpu": {
              "Fn::Select": [
                1,
                {
                  "Ref": "WebFormation"
                }
              ]
            },
            "Environment": {
              "APP": "httpd",
              "AWS_REGION": "test",
              "LOG_GROUP": {
                "Ref": "LogGroup"
              },
              "PROCESS": "web",
              "RACK": "convox-test"
            },
            "ExtraHosts": [
              {
                "Ref": "AWS::NoValue"
              }
            ],
            "Image": "",
            "Links": [],
            "Memory": {
              "Fn::Select": [
                2,
                {
                  "Ref": "WebFormation"
                }
              ]
            },
            "Name": "web",
            "PortMappings": [
              "9000:9000/tcp",
              {
                "Ref": "AWS::NoValue"
              }
            ],
            "Privileged": "false",
            "SecureEnvironment": false,
            "Services": [
              {
                "Ref": "AWS::NoValue"
              }
            ],
            "Volumes": [
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ]
      },
      "Type": "Custom::ECSTaskDefinition",
      "Version": "1.0"
    },
    "WorkerGroupECSTaskDefinition": {
      "DependsOn": [
        "CustomTopic",
        "ServiceRole"
      ],
      "Properties": {
        "Environment": {
          "Ref": "Environment"
        },
        "Key": {
          "Ref": "Key"
        },
        "Name": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "worker"
            ]
          ]
        },
        "Release": {
          "Ref": "Release"
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomTopic",
            "Arn"
          ]
        },
        "TaskRole": {
          "Ref": "TaskRole"
        },
        "Tasks": [
          {
            "Command": "bin/worker",
            "Cpu": {
              "Fn::Select": [
                1,
                {
                  "Ref": "WorkerFormation"
                }
              ]
            },
            "Environment": {
              "APP": "httpd",
              "AWS_REGION": "test",
              "LOG_GROUP": {
                "Ref": "LogGroup"
              },
              "PROCESS": "worker",
              "RACK": "convox-test"
            },
            "ExtraHosts": [
              {
                "Ref": "AWS::NoValue"
              }
            ],
            "Image": "",
            "Links": [],
            "Memory": {
              "Fn::Select": [
                2,
                {
                  "Ref": "WorkerFormation"
                }
              ]
            },
            "Name": "worker",
            "PortMappings": [
              {
                "Ref": "AWS::NoValue"
              }
            ],
            "Privileged": "false",
            "SecureEnvironment": false,
            "Services": [
              {
                "Ref": "AWS::NoValue"
              }
            ],
            "Volumes": [
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ]
      },
      "Type": "Custom::ECSTaskDefinition",
      "Version": "1.0"
    }
  }
}
