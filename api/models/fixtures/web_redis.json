{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "BlankBalancerRedisPort6379Certificate": {
      "Fn::Equals": [
        {
          "Ref": "RedisPort6379Certificate"
        },
        ""
      ]
    },
    "BlankBalancerWebPort80Certificate": {
      "Fn::Equals": [
        {
          "Ref": "WebPort80Certificate"
        },
        ""
      ]
    },
    "BlankSecurityGroup": {
      "Fn::Equals": [
        {
          "Ref": "SecurityGroup"
        },
        ""
      ]
    },
    "EnabledRedis": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                0,
                {
                  "Ref": "RedisFormation"
                }
              ]
            },
            "-1"
          ]
        }
      ]
    },
    "EnabledWeb": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                0,
                {
                  "Ref": "WebFormation"
                }
              ]
            },
            "-1"
          ]
        }
      ]
    },
    "Internal": {
      "Fn::Equals": [
        {
          "Ref": "Internal"
        },
        "Yes"
      ]
    },
    "NativeLogging": {
      "Fn::Equals": [
        {
          "Ref": "NativeLogging"
        },
        "Yes"
      ]
    },
    "Private": {
      "Fn::Equals": [
        {
          "Ref": "Private"
        },
        "Yes"
      ]
    }
  },
  "Mappings": {
    "PortProtocol": {
      "http": {
        "InstanceProtocol": "HTTP",
        "ListenerProtocol": "HTTP",
        "SecureInstanceProtocol": "HTTPS"
      },
      "https": {
        "InstanceProtocol": "HTTP",
        "ListenerProtocol": "HTTPS",
        "SecureInstanceProtocol": "HTTPS"
      },
      "tcp": {
        "InstanceProtocol": "TCP",
        "ListenerProtocol": "TCP",
        "SecureInstanceProtocol": "SSL"
      },
      "tls": {
        "InstanceProtocol": "TCP",
        "ListenerProtocol": "SSL",
        "SecureInstanceProtocol": "SSL"
      }
    }
  },
  "Outputs": {
    "BalancerRedisHost": {
      "Condition": "EnabledRedis",
      "Value": {
        "Fn::GetAtt": [
          "BalancerRedisInternal",
          "DNSName"
        ]
      }
    },
    "BalancerWebHost": {
      "Condition": "EnabledWeb",
      "Value": {
        "Fn::GetAtt": [
          "BalancerWeb",
          "DNSName"
        ]
      }
    },
    "LogGroup": {
      "Value": {
        "Ref": "LogGroup"
      }
    },
    "RedisPort6379Balancer": {
      "Condition": "EnabledRedis",
      "Value": "6379"
    },
    "RedisPort6379BalancerName": {
      "Condition": "EnabledRedis",
      "Value": {
        "Fn::If": [
          "Internal",
          {
            "Fn::Join": [
              "-",
              [
                "httpd-redis-NVCY43S-i",
                "n"
              ]
            ]
          },
          "httpd-redis-NVCY43S-i"
        ]
      }
    },
    "RegistryId": {
      "Value": {
        "Ref": "AWS::AccountId"
      }
    },
    "RegistryRepository": {
      "Value": {
        "Fn::GetAtt": [
          "RegistryRepository",
          "RepositoryName"
        ]
      }
    },
    "Settings": {
      "Value": {
        "Ref": "Settings"
      }
    },
    "WebPort80Balancer": {
      "Condition": "EnabledWeb",
      "Value": "80"
    },
    "WebPort80BalancerName": {
      "Condition": "EnabledWeb",
      "Value": {
        "Fn::If": [
          "Internal",
          {
            "Fn::Join": [
              "-",
              [
                "httpd-web-XHW5F4P",
                "n"
              ]
            ]
          },
          "httpd-web-XHW5F4P"
        ]
      }
    }
  },
  "Parameters": {
    "Cluster": {
      "Default": "",
      "Description": "",
      "Type": "String"
    },
    "DeploymentMaximum": {
      "Default": "200",
      "Description": "Maximum percentage of processes to keep running while deploying",
      "Type": "Number"
    },
    "DeploymentMinimum": {
      "Default": "50",
      "Description": "Minimum percentage of processes to keep running while deploying",
      "Type": "Number"
    },
    "Environment": {
      "Default": "",
      "Description": "",
      "Type": "String"
    },
    "Internal": {
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Default": "No",
      "Description": "Only allow access to this app from inside the VPC",
      "Type": "String"
    },
    "Key": {
      "Default": "",
      "Description": "",
      "Type": "String"
    },
    "NativeLogging": {
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Default": "No",
      "Description": "Use native ECS awslogs driver over convox/agent for logging",
      "Type": "String"
    },
    "Private": {
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Default": "No",
      "Description": "Use SubnetsPrivate to specify VPC-side load balancer endpoints",
      "Type": "String"
    },
    "RedisFormation": {
      "Default": "1,0,256",
      "Description": "Number of processes to run, CPU units to reserve, and MB of RAM to reserve",
      "Type": "CommaDelimitedList"
    },
    "RedisPort6379Certificate": {
      "Default": "",
      "Description": "",
      "Type": "String"
    },
    "RedisPort6379Host": {
      "Default": "5000",
      "Description": "",
      "Type": "String"
    },
    "Release": {
      "Default": "",
      "Description": "",
      "Type": "String"
    },
    "Repository": {
      "Default": "",
      "Description": "Source code repository",
      "Type": "String"
    },
    "SecurityGroup": {
      "Default": "",
      "Description": "The Load balancer security group for this app",
      "Type": "String"
    },
    "Subnets": {
      "Default": "",
      "Description": "VPC subnets for this app",
      "Type": "List\u003cAWS::EC2::Subnet::Id\u003e"
    },
    "SubnetsPrivate": {
      "Default": "",
      "Description": "VPC private subnets for this app",
      "Type": "List\u003cAWS::EC2::Subnet::Id\u003e"
    },
    "TaskRole": {
      "Default": "",
      "Description": "IAM Role to apply to ECS Tasks of this app",
      "Type": "String"
    },
    "VPC": {
      "Default": "",
      "Description": "VPC for this app",
      "Type": "AWS::EC2::VPC::Id"
    },
    "VPCCIDR": {
      "Default": "",
      "Description": "VPC CIDR for this app",
      "Type": "String"
    },
    "Version": {
      "Description": "(REQUIRED) Lambda CustomTopic Handler Release Version",
      "MinLength": "1",
      "Type": "String"
    },
    "WebFormation": {
      "Default": "1,0,256",
      "Description": "Number of processes to run, CPU units to reserve, and MB of RAM to reserve",
      "Type": "CommaDelimitedList"
    },
    "WebPort80Certificate": {
      "Default": "",
      "Description": "",
      "Type": "String"
    },
    "WebPort80Host": {
      "Default": "5000",
      "Description": "",
      "Type": "String"
    }
  },
  "Resources": {
    "BalancerRedisInternal": {
      "Condition": "EnabledRedis",
      "DependsOn": [
        "BalancerRedisInternalSecurityGroup"
      ],
      "Properties": {
        "ConnectionDrainingPolicy": {
          "Enabled": true,
          "Timeout": "60"
        },
        "ConnectionSettings": {
          "IdleTimeout": "3600"
        },
        "CrossZone": true,
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "5",
          "Target": {
            "Fn::Join": [
              "",
              [
                "TCP:",
                {
                  "Ref": "RedisPort6379Host"
                },
                ""
              ]
            ]
          },
          "Timeout": "3",
          "UnhealthyThreshold": "2"
        },
        "LBCookieStickinessPolicy": [
          {
            "PolicyName": "affinity"
          }
        ],
        "Listeners": [
          {
            "InstancePort": {
              "Ref": "RedisPort6379Host"
            },
            "InstanceProtocol": "TCP",
            "LoadBalancerPort": "6379",
            "Protocol": {
              "Fn::If": [
                "BlankBalancerRedisPort6379Certificate",
                "TCP",
                "SSL"
              ]
            },
            "SSLCertificateId": {
              "Fn::If": [
                "BlankBalancerRedisPort6379Certificate",
                {
                  "Ref": "AWS::NoValue"
                },
                {
                  "Ref": "RedisPort6379Certificate"
                }
              ]
            }
          },
          {
            "Ref": "AWS::NoValue"
          }
        ],
        "LoadBalancerName": {
          "Fn::If": [
            "Internal",
            {
              "Fn::Join": [
                "-",
                [
                  "httpd-redis-NVCY43S-i",
                  "n"
                ]
              ]
            },
            "httpd-redis-NVCY43S-i"
          ]
        },
        "Policies": [
          {
            "Ref": "AWS::NoValue"
          }
        ],
        "Scheme": "internal",
        "SecurityGroups": [
          {
            "Fn::If": [
              "BlankSecurityGroup",
              {
                "Ref": "BalancerRedisInternalSecurityGroup"
              },
              {
                "Ref": "SecurityGroup"
              }
            ]
          }
        ],
        "Subnets": {
          "Fn::If": [
            "Private",
            {
              "Ref": "SubnetsPrivate"
            },
            {
              "Ref": "Subnets"
            }
          ]
        }
      },
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
    },
    "BalancerRedisInternalSecurityGroup": {
      "Condition": "EnabledRedis",
      "Properties": {
        "GroupDescription": {
          "Fn::Join": [
            " ",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-balancer"
            ]
          ]
        },
        "SecurityGroupIngress": [
          {
            "CidrIp": {
              "Ref": "VPCCIDR"
            },
            "FromPort": "6379",
            "IpProtocol": "tcp",
            "ToPort": "6379"
          },
          {
            "Ref": "AWS::NoValue"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "BalancerWeb": {
      "Condition": "EnabledWeb",
      "DependsOn": [
        "BalancerWebSecurityGroup"
      ],
      "Properties": {
        "ConnectionDrainingPolicy": {
          "Enabled": true,
          "Timeout": "60"
        },
        "ConnectionSettings": {
          "IdleTimeout": "3600"
        },
        "CrossZone": true,
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "5",
          "Target": {
            "Fn::Join": [
              "",
              [
                "TCP:",
                {
                  "Ref": "WebPort80Host"
                },
                ""
              ]
            ]
          },
          "Timeout": "3",
          "UnhealthyThreshold": "2"
        },
        "LBCookieStickinessPolicy": [
          {
            "PolicyName": "affinity"
          }
        ],
        "Listeners": [
          {
            "InstancePort": {
              "Ref": "WebPort80Host"
            },
            "InstanceProtocol": "TCP",
            "LoadBalancerPort": "80",
            "Protocol": {
              "Fn::If": [
                "BlankBalancerWebPort80Certificate",
                "TCP",
                "SSL"
              ]
            },
            "SSLCertificateId": {
              "Fn::If": [
                "BlankBalancerWebPort80Certificate",
                {
                  "Ref": "AWS::NoValue"
                },
                {
                  "Ref": "WebPort80Certificate"
                }
              ]
            }
          },
          {
            "Ref": "AWS::NoValue"
          }
        ],
        "LoadBalancerName": {
          "Fn::If": [
            "Internal",
            {
              "Fn::Join": [
                "-",
                [
                  "httpd-web-XHW5F4P",
                  "n"
                ]
              ]
            },
            "httpd-web-XHW5F4P"
          ]
        },
        "Policies": [
          {
            "Ref": "AWS::NoValue"
          }
        ],
        "Scheme": {
          "Fn::If": [
            "Internal",
            "internal",
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "SecurityGroups": [
          {
            "Fn::If": [
              "BlankSecurityGroup",
              {
                "Ref": "BalancerWebSecurityGroup"
              },
              {
                "Ref": "SecurityGroup"
              }
            ]
          }
        ],
        "Subnets": {
          "Fn::If": [
            "Internal",
            {
              "Ref": "SubnetsPrivate"
            },
            {
              "Ref": "Subnets"
            }
          ]
        }
      },
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
    },
    "BalancerWebSecurityGroup": {
      "Condition": "EnabledWeb",
      "Properties": {
        "GroupDescription": {
          "Fn::Join": [
            " ",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-balancer"
            ]
          ]
        },
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "80",
            "IpProtocol": "tcp",
            "ToPort": "80"
          },
          {
            "Ref": "AWS::NoValue"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "CustomTopic": {
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                "convox",
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                "release/",
                {
                  "Ref": "Version"
                },
                "/lambda/formation.zip"
              ]
            ]
          }
        },
        "Handler": "index.external",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CustomTopicRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs4.3",
        "Timeout": "300"
      },
      "Type": "AWS::Lambda::Function"
    },
    "CustomTopicRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/convox/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "*",
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "Administrator"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "LogGroup": {
      "Type": "AWS::Logs::LogGroup"
    },
    "RedisECSTaskDefinition": {
      "DependsOn": [
        "CustomTopic",
        "ServiceRole"
      ],
      "Properties": {
        "Environment": {
          "Ref": "Environment"
        },
        "Key": {
          "Ref": "Key"
        },
        "Name": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "redis"
            ]
          ]
        },
        "Release": {
          "Ref": "Release"
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomTopic",
            "Arn"
          ]
        },
        "TaskRole": {
          "Ref": "TaskRole"
        },
        "Tasks": [
          {
            "Cpu": {
              "Fn::Select": [
                1,
                {
                  "Ref": "RedisFormation"
                }
              ]
            },
            "Environment": {
              "APP": "httpd",
              "AWS_REGION": "test",
              "LINK_PASSWORD": "pass-the-word",
              "LINK_PATH": "/0",
              "LINK_PORT": "6379",
              "LINK_SCHEME": "redis",
              "LINK_USERNAME": "user",
              "LOG_GROUP": {
                "Fn::If": [
                  "NativeLogging",
                  {
                    "Ref": "AWS::NoValue"
                  },
                  {
                    "Ref": "LogGroup"
                  }
                ]
              },
              "PROCESS": "redis",
              "RACK": "convox-test"
            },
            "ExtraHosts": [
              {
                "Ref": "AWS::NoValue"
              }
            ],
            "Image": "convox/redis",
            "LogConfiguration": {
              "Fn::If": [
                "NativeLogging",
                {
                  "LogDriver": "awslogs",
                  "Options": {
                    "awslogs-group": {
                      "Ref": "LogGroup"
                    },
                    "awslogs-region": {
                      "Ref": "AWS::Region"
                    },
                    "awslogs-stream-prefix": "convox"
                  }
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "Memory": {
              "Fn::Select": [
                2,
                {
                  "Ref": "RedisFormation"
                }
              ]
            },
            "Name": "redis",
            "PortMappings": [
              {
                "Fn::Join": [
                  ":",
                  [
                    {
                      "Ref": "RedisPort6379Host"
                    },
                    "6379/tcp"
                  ]
                ]
              },
              {
                "Ref": "AWS::NoValue"
              }
            ],
            "Privileged": "false",
            "SecureEnvironment": false,
            "Services": [
              {
                "Ref": "AWS::NoValue"
              }
            ],
            "Volumes": [
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ]
      },
      "Type": "Custom::ECSTaskDefinition",
      "Version": "1.0"
    },
    "RegistryRepository": {
      "Properties": {
        "RepositoryName": {
          "Ref": "AWS::StackName"
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomTopic",
            "Arn"
          ]
        }
      },
      "Type": "Custom::ECRRepository",
      "Version": "1.0"
    },
    "SecureEnvironmentRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs-tasks.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/convox/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": {
                "Action": [
                  "kms:Encrypt",
                  "kms:Decrypt"
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Ref": "Key"
                  }
                ]
              },
              "Version": "2012-10-17"
            },
            "PolicyName": "SecureEnvironmentPolicy"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "ServiceRedis": {
      "Condition": "EnabledRedis",
      "DependsOn": [
        "BalancerRedisInternal",
        "CustomTopic",
        "ServiceRole"
      ],
      "Properties": {
        "Cluster": {
          "Ref": "Cluster"
        },
        "DeploymentConfiguration": {
          "MaximumPercent": "200",
          "MinimumHealthyPercent": "100"
        },
        "DesiredCount": {
          "Fn::Select": [
            0,
            {
              "Ref": "RedisFormation"
            }
          ]
        },
        "LoadBalancers": [
          {
            "ContainerName": "redis",
            "ContainerPort": "6379",
            "LoadBalancerName": {
              "Ref": "BalancerRedisInternal"
            }
          }
        ],
        "Role": {
          "Fn::GetAtt": [
            "ServiceRole",
            "Arn"
          ]
        },
        "TaskDefinition": {
          "Ref": "RedisECSTaskDefinition"
        }
      },
      "Type": "AWS::ECS::Service"
    },
    "ServiceRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/convox/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "ec2:Describe*",
                    "ec2:AuthorizeSecurityGroupIngress"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ]
                }
              ]
            },
            "PolicyName": "ServiceRole"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "ServiceWeb": {
      "Condition": "EnabledWeb",
      "DependsOn": [
        "BalancerWeb",
        "CustomTopic",
        "ServiceRole"
      ],
      "Properties": {
        "Cluster": {
          "Ref": "Cluster"
        },
        "DeploymentConfiguration": {
          "MaximumPercent": "200",
          "MinimumHealthyPercent": "100"
        },
        "DesiredCount": {
          "Fn::Select": [
            0,
            {
              "Ref": "WebFormation"
            }
          ]
        },
        "LoadBalancers": [
          {
            "ContainerName": "web",
            "ContainerPort": "3000",
            "LoadBalancerName": {
              "Ref": "BalancerWeb"
            }
          }
        ],
        "Role": {
          "Fn::GetAtt": [
            "ServiceRole",
            "Arn"
          ]
        },
        "TaskDefinition": {
          "Ref": "WebECSTaskDefinition"
        }
      },
      "Type": "AWS::ECS::Service"
    },
    "Settings": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AccessControl": "Private",
        "Tags": [
          {
            "Key": "system",
            "Value": "convox"
          },
          {
            "Key": "app",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      },
      "Type": "AWS::S3::Bucket"
    },
    "WebECSTaskDefinition": {
      "DependsOn": [
        "CustomTopic",
        "ServiceRole"
      ],
      "Properties": {
        "Environment": {
          "Ref": "Environment"
        },
        "Key": {
          "Ref": "Key"
        },
        "Name": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "web"
            ]
          ]
        },
        "Release": {
          "Ref": "Release"
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomTopic",
            "Arn"
          ]
        },
        "TaskRole": {
          "Ref": "TaskRole"
        },
        "Tasks": [
          {
            "Cpu": {
              "Fn::Select": [
                1,
                {
                  "Ref": "WebFormation"
                }
              ]
            },
            "Environment": {
              "APP": "httpd",
              "AWS_REGION": "test",
              "LOG_GROUP": {
                "Fn::If": [
                  "NativeLogging",
                  {
                    "Ref": "AWS::NoValue"
                  },
                  {
                    "Ref": "LogGroup"
                  }
                ]
              },
              "PROCESS": "web",
              "RACK": "convox-test"
            },
            "ExtraHosts": [
              {
                "Ref": "AWS::NoValue"
              }
            ],
            "Image": "",
            "LogConfiguration": {
              "Fn::If": [
                "NativeLogging",
                {
                  "LogDriver": "awslogs",
                  "Options": {
                    "awslogs-group": {
                      "Ref": "LogGroup"
                    },
                    "awslogs-region": {
                      "Ref": "AWS::Region"
                    },
                    "awslogs-stream-prefix": "convox"
                  }
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "Memory": {
              "Fn::Select": [
                2,
                {
                  "Ref": "WebFormation"
                }
              ]
            },
            "Name": "web",
            "PortMappings": [
              {
                "Fn::Join": [
                  ":",
                  [
                    {
                      "Ref": "WebPort80Host"
                    },
                    "3000/tcp"
                  ]
                ]
              },
              {
                "Ref": "AWS::NoValue"
              }
            ],
            "Privileged": "false",
            "SecureEnvironment": false,
            "Services": [
              {
                "Ref": "AWS::NoValue"
              }
            ],
            "Volumes": [
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ]
      },
      "Type": "Custom::ECSTaskDefinition",
      "Version": "1.0"
    }
  }
}
