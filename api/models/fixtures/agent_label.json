{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "BlankSecurityGroup": {
      "Fn::Equals": [
        {
          "Ref": "SecurityGroup"
        },
        ""
      ]
    },
    "EnabledAgent1": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                0,
                {
                  "Ref": "Agent1Formation"
                }
              ]
            },
            "-1"
          ]
        }
      ]
    },
    "EnabledAgent2": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                0,
                {
                  "Ref": "Agent2Formation"
                }
              ]
            },
            "-1"
          ]
        }
      ]
    },
    "EnabledNotagent": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                0,
                {
                  "Ref": "NotagentFormation"
                }
              ]
            },
            "-1"
          ]
        }
      ]
    },
    "Internal": {
      "Fn::Equals": [
        {
          "Ref": "Internal"
        },
        "Yes"
      ]
    },
    "NativeLogging": {
      "Fn::Equals": [
        {
          "Ref": "NativeLogging"
        },
        "Yes"
      ]
    },
    "Private": {
      "Fn::Equals": [
        {
          "Ref": "Private"
        },
        "Yes"
      ]
    }
  },
  "Mappings": {
    "PortProtocol": {
      "http": {
        "InstanceProtocol": "HTTP",
        "ListenerProtocol": "HTTP",
        "SecureInstanceProtocol": "HTTPS"
      },
      "https": {
        "InstanceProtocol": "HTTP",
        "ListenerProtocol": "HTTPS",
        "SecureInstanceProtocol": "HTTPS"
      },
      "tcp": {
        "InstanceProtocol": "TCP",
        "ListenerProtocol": "TCP",
        "SecureInstanceProtocol": "SSL"
      },
      "tls": {
        "InstanceProtocol": "TCP",
        "ListenerProtocol": "SSL",
        "SecureInstanceProtocol": "SSL"
      }
    }
  },
  "Outputs": {
    "LogGroup": {
      "Value": {
        "Ref": "LogGroup"
      }
    },
    "RegistryId": {
      "Value": {
        "Ref": "AWS::AccountId"
      }
    },
    "RegistryRepository": {
      "Value": {
        "Fn::GetAtt": [
          "RegistryRepository",
          "RepositoryName"
        ]
      }
    },
    "Settings": {
      "Value": {
        "Ref": "Settings"
      }
    }
  },
  "Parameters": {
    "Agent1Formation": {
      "Default": "0,0,256",
      "Description": "Number of processes to run, CPU units to reserve, and MB of RAM to reserve",
      "Type": "CommaDelimitedList"
    },
    "Agent2Formation": {
      "Default": "0,0,256",
      "Description": "Number of processes to run, CPU units to reserve, and MB of RAM to reserve",
      "Type": "CommaDelimitedList"
    },
    "Cluster": {
      "Default": "",
      "Description": "",
      "Type": "String"
    },
    "DeploymentMaximum": {
      "Default": "200",
      "Description": "Maximum percentage of processes to keep running while deploying",
      "Type": "Number"
    },
    "DeploymentMinimum": {
      "Default": "50",
      "Description": "Minimum percentage of processes to keep running while deploying",
      "Type": "Number"
    },
    "Environment": {
      "Default": "",
      "Description": "",
      "Type": "String"
    },
    "Internal": {
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Default": "No",
      "Description": "Only allow access to this app from inside the VPC",
      "Type": "String"
    },
    "Key": {
      "Default": "",
      "Description": "",
      "Type": "String"
    },
    "NativeLogging": {
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Default": "No",
      "Description": "Use native ECS awslogs driver over convox/agent for logging",
      "Type": "String"
    },
    "NotagentFormation": {
      "Default": "1,0,256",
      "Description": "Number of processes to run, CPU units to reserve, and MB of RAM to reserve",
      "Type": "CommaDelimitedList"
    },
    "Private": {
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Default": "No",
      "Description": "Use SubnetsPrivate to specify VPC-side load balancer endpoints",
      "Type": "String"
    },
    "Release": {
      "Default": "",
      "Description": "",
      "Type": "String"
    },
    "Repository": {
      "Default": "",
      "Description": "Source code repository",
      "Type": "String"
    },
    "SecurityGroup": {
      "Default": "",
      "Description": "The Load balancer security group for this app",
      "Type": "String"
    },
    "Subnets": {
      "Default": "",
      "Description": "VPC subnets for this app",
      "Type": "List\u003cAWS::EC2::Subnet::Id\u003e"
    },
    "SubnetsPrivate": {
      "Default": "",
      "Description": "VPC private subnets for this app",
      "Type": "List\u003cAWS::EC2::Subnet::Id\u003e"
    },
    "TaskRole": {
      "Default": "",
      "Description": "IAM Role to apply to ECS Tasks of this app",
      "Type": "String"
    },
    "VPC": {
      "Default": "",
      "Description": "VPC for this app",
      "Type": "AWS::EC2::VPC::Id"
    },
    "VPCCIDR": {
      "Default": "",
      "Description": "VPC CIDR for this app",
      "Type": "String"
    },
    "Version": {
      "Description": "(REQUIRED) Lambda CustomTopic Handler Release Version",
      "MinLength": "1",
      "Type": "String"
    }
  },
  "Resources": {
    "Agent1ECSTaskDefinition": {
      "DependsOn": [
        "CustomTopic",
        "ServiceRole"
      ],
      "Properties": {
        "Environment": {
          "Ref": "Environment"
        },
        "Key": {
          "Ref": "Key"
        },
        "Name": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "agent1"
            ]
          ]
        },
        "Release": {
          "Ref": "Release"
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomTopic",
            "Arn"
          ]
        },
        "TaskRole": {
          "Ref": "TaskRole"
        },
        "Tasks": [
          {
            "Cpu": {
              "Fn::Select": [
                1,
                {
                  "Ref": "Agent1Formation"
                }
              ]
            },
            "Environment": {
              "APP": "httpd",
              "AWS_REGION": "test",
              "LOG_GROUP": {
                "Fn::If": [
                  "NativeLogging",
                  {
                    "Ref": "AWS::NoValue"
                  },
                  {
                    "Ref": "LogGroup"
                  }
                ]
              },
              "PROCESS": "agent1",
              "RACK": "convox-test"
            },
            "ExtraHosts": [
              {
                "Ref": "AWS::NoValue"
              }
            ],
            "Image": "datadog/docker-dd-agent:latest",
            "LogConfiguration": {
              "Fn::If": [
                "NativeLogging",
                {
                  "LogDriver": "awslogs",
                  "Options": {
                    "awslogs-group": {
                      "Ref": "LogGroup"
                    },
                    "awslogs-region": {
                      "Ref": "AWS::Region"
                    },
                    "awslogs-stream-prefix": "convox"
                  }
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "Memory": {
              "Fn::Select": [
                2,
                {
                  "Ref": "Agent1Formation"
                }
              ]
            },
            "Name": "agent1",
            "PortMappings": [
              {
                "Ref": "AWS::NoValue"
              }
            ],
            "Privileged": "true",
            "SecureEnvironment": false,
            "Services": [
              {
                "Ref": "AWS::NoValue"
              }
            ],
            "Volumes": [
              "/var/run/docker.sock:/var/run/docker.sock",
              "/proc/:/host/proc",
              "/cgroup/:/host/sys/fs/cgroup",
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ]
      },
      "Type": "Custom::ECSTaskDefinition",
      "Version": "1.0"
    },
    "Agent1LambdaPermission": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AgentFunction",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "Agent1Rule",
            "Arn"
          ]
        }
      },
      "Type": "AWS::Lambda::Permission"
    },
    "Agent1Rule": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ecs:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":cluster/",
                    {
                      "Ref": "Cluster"
                    }
                  ]
                ]
              }
            ]
          },
          "detail-type": [
            "ECS Container Instance State Change",
            "ECS Task State Change"
          ],
          "source": [
            "aws.ecs"
          ]
        },
        "Name": "convox-test-httpd-agent1-KUHDH2U-change",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "AgentFunction",
                "Arn"
              ]
            },
            "Id": "convox-test-httpd-agent1-KUHDH2UTarget"
          }
        ]
      },
      "Type": "AWS::Events::Rule"
    },
    "Agent2ECSTaskDefinition": {
      "DependsOn": [
        "CustomTopic",
        "ServiceRole"
      ],
      "Properties": {
        "Environment": {
          "Ref": "Environment"
        },
        "Key": {
          "Ref": "Key"
        },
        "Name": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "agent2"
            ]
          ]
        },
        "Release": {
          "Ref": "Release"
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomTopic",
            "Arn"
          ]
        },
        "TaskRole": {
          "Ref": "TaskRole"
        },
        "Tasks": [
          {
            "Cpu": {
              "Fn::Select": [
                1,
                {
                  "Ref": "Agent2Formation"
                }
              ]
            },
            "Environment": {
              "APP": "httpd",
              "AWS_REGION": "test",
              "LOG_GROUP": {
                "Fn::If": [
                  "NativeLogging",
                  {
                    "Ref": "AWS::NoValue"
                  },
                  {
                    "Ref": "LogGroup"
                  }
                ]
              },
              "PROCESS": "agent2",
              "RACK": "convox-test"
            },
            "ExtraHosts": [
              {
                "Ref": "AWS::NoValue"
              }
            ],
            "Image": "datadog/docker-dd-agent:latest",
            "LogConfiguration": {
              "Fn::If": [
                "NativeLogging",
                {
                  "LogDriver": "awslogs",
                  "Options": {
                    "awslogs-group": {
                      "Ref": "LogGroup"
                    },
                    "awslogs-region": {
                      "Ref": "AWS::Region"
                    },
                    "awslogs-stream-prefix": "convox"
                  }
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "Memory": {
              "Fn::Select": [
                2,
                {
                  "Ref": "Agent2Formation"
                }
              ]
            },
            "Name": "agent2",
            "PortMappings": [
              {
                "Ref": "AWS::NoValue"
              }
            ],
            "Privileged": "true",
            "SecureEnvironment": false,
            "Services": [
              {
                "Ref": "AWS::NoValue"
              }
            ],
            "Volumes": [
              "/var/run/docker.sock:/var/run/docker.sock",
              "/proc/:/host/proc",
              "/cgroup/:/host/sys/fs/cgroup",
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ]
      },
      "Type": "Custom::ECSTaskDefinition",
      "Version": "1.0"
    },
    "Agent2LambdaPermission": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AgentFunction",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "Agent2Rule",
            "Arn"
          ]
        }
      },
      "Type": "AWS::Lambda::Permission"
    },
    "Agent2Rule": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ecs:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":cluster/",
                    {
                      "Ref": "Cluster"
                    }
                  ]
                ]
              }
            ]
          },
          "detail-type": [
            "ECS Container Instance State Change",
            "ECS Task State Change"
          ],
          "source": [
            "aws.ecs"
          ]
        },
        "Name": "convox-test-httpd-agent2-O434WXJ-change",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "AgentFunction",
                "Arn"
              ]
            },
            "Id": "convox-test-httpd-agent2-O434WXJTarget"
          }
        ]
      },
      "Type": "AWS::Events::Rule"
    },
    "AgentFunction": {
      "DependsOn": [
        "AgentRole"
      ],
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "'use strict';",
                "const aws = require('aws-sdk');",
                "const ecs = new aws.ECS({ maxRetries: 10 });",
                "const STARTED_BY = 'convox agent';",
                "const STOPPED_REASON = 'convox agent convergence';",
                "const TASK_DEF_ARNS = [",
                {
                  "Fn::Join": [
                    "",
                    [
                      "  '",
                      {
                        "Ref": "Agent1ECSTaskDefinition"
                      },
                      "',"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "  '",
                      {
                        "Ref": "Agent2ECSTaskDefinition"
                      },
                      "',"
                    ]
                  ]
                },
                "];",
                "function tdName(td) {",
                "    return td.split(':').slice(0, -1).join(':');",
                "}",
                "function tdRev(td) {",
                "    return parseInt(td.split(':').slice(-1)[0]);",
                "}",
                "function startTask(event, desiredTD) {",
                "    let options = {",
                "        containerInstances: [event.detail.containerInstanceArn],",
                "        taskDefinition: desiredTD,",
                "        cluster: event.detail.clusterArn,",
                "        startedBy: STARTED_BY",
                "    };",
                "    return ecs.startTask(options).promise()",
                "    .then(data =\u003e {",
                "        if (data.tasks.length === 0) {",
                "            throw new Error('Task not started');",
                "        }",
                "        console.log('startTask Data: ', data);",
                "        return data.tasks[0].taskArn;",
                "    });",
                "}",
                "function stopTask(event, runningTask) {",
                "    if (runningTask.startedBy !== STARTED_BY) {",
                "        console.log('Warning: Non-agent task running (scale count \u003e 0?)');",
                "        return;",
                "    }",
                "    let options = {",
                "        task: runningTask.taskArn,",
                "        cluster: event.detail.clusterArn,",
                "        reason: STOPPED_REASON",
                "    };",
                "    return ecs.stopTask(options).promise()",
                "    .then(data =\u003e {",
                "        console.log('stopTask Data: ', data);",
                "        return data.task.taskArn;",
                "    });",
                "}",
                "exports.handler = (event, context, callback) =\u003e {",
                "    console.log('Event: ', event);",
                "    if (event.detail.stoppedReason === STOPPED_REASON) {",
                "        return callback(null, 'Ignored');",
                "    }",
                "    let options = {",
                "        cluster: event.detail.clusterArn,",
                "        containerInstance: event.detail.containerInstanceArn",
                "    };",
                "    ecs.listTasks(options).promise()",
                "    .then(data =\u003e {",
                "        console.log('listTasks Data: ', data);",
                "        if (!data.taskArns || !data.taskArns.length) {",
                "            return {",
                "                tasks: []",
                "            };",
                "        }",
                "        let options = {",
                "            cluster: event.detail.clusterArn,",
                "            tasks: data.taskArns",
                "        };",
                "        return ecs.describeTasks(options).promise();",
                "    })",
                "    .then(data =\u003e {",
                "        console.log('describeTasks Data: ', data);",
                "        let tasksToStop = [];",
                "        let tasksToStart = [];",
                "        for (let tdArn of TASK_DEF_ARNS) {",
                "            let alreadyRunning = false;",
                "            for (let task of data.tasks) {",
                "                if (tdName(tdArn) !== tdName(task.taskDefinitionArn)) {",
                "                    continue;",
                "                }",
                "                if (tdRev(tdArn) === tdRev(task.taskDefinitionArn)) {",
                "                    alreadyRunning = true;",
                "                } else {",
                "                    tasksToStop.push(task);",
                "                }",
                "            }",
                "            if (!alreadyRunning) {",
                "                tasksToStart.push(tdArn);",
                "            }",
                "        }",
                "        return Promise.all(tasksToStop.map(t =\u003e stopTask(event, t)))",
                "        .then( () =\u003e Promise.all(tasksToStart.map(t =\u003e startTask(event, t))) );",
                "    })",
                "    .then(() =\u003e {",
                "        console.log('Success');",
                "        return callback(null, 'Success');",
                "    })",
                "    .catch(err =\u003e {",
                "        console.log('Error: ', err);",
                "        return callback(err);",
                "    });",
                "};"
              ]
            ]
          }
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "AgentRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs4.3",
        "Timeout": 50
      },
      "Type": "AWS::Lambda::Function"
    },
    "AgentRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/convox/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "ecs:*",
                  "Condition": {
                    "ArnEquals": {
                      "ecs:cluster": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:aws:ecs:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":cluster/",
                            "convox-test"
                          ]
                        ]
                      }
                    }
                  },
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:logs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":log-group:/aws/lambda/*"
                      ]
                    ]
                  }
                },
                {
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "LogGroup",
                            "Arn"
                          ]
                        },
                        ":*"
                      ]
                    ]
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "AgentJob"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "CustomTopic": {
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                "convox",
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                "release/",
                {
                  "Ref": "Version"
                },
                "/lambda/formation.zip"
              ]
            ]
          }
        },
        "Handler": "index.external",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CustomTopicRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs4.3",
        "Timeout": "300"
      },
      "Type": "AWS::Lambda::Function"
    },
    "CustomTopicRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/convox/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "*",
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "Administrator"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "LogGroup": {
      "Type": "AWS::Logs::LogGroup"
    },
    "NotagentECSTaskDefinition": {
      "DependsOn": [
        "CustomTopic",
        "ServiceRole"
      ],
      "Properties": {
        "Environment": {
          "Ref": "Environment"
        },
        "Key": {
          "Ref": "Key"
        },
        "Name": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "notagent"
            ]
          ]
        },
        "Release": {
          "Ref": "Release"
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomTopic",
            "Arn"
          ]
        },
        "TaskRole": {
          "Ref": "TaskRole"
        },
        "Tasks": [
          {
            "Cpu": {
              "Fn::Select": [
                1,
                {
                  "Ref": "NotagentFormation"
                }
              ]
            },
            "Environment": {
              "APP": "httpd",
              "AWS_REGION": "test",
              "LOG_GROUP": {
                "Fn::If": [
                  "NativeLogging",
                  {
                    "Ref": "AWS::NoValue"
                  },
                  {
                    "Ref": "LogGroup"
                  }
                ]
              },
              "PROCESS": "notagent",
              "RACK": "convox-test"
            },
            "ExtraHosts": [
              {
                "Ref": "AWS::NoValue"
              }
            ],
            "Image": "",
            "LogConfiguration": {
              "Fn::If": [
                "NativeLogging",
                {
                  "LogDriver": "awslogs",
                  "Options": {
                    "awslogs-group": {
                      "Ref": "LogGroup"
                    },
                    "awslogs-region": {
                      "Ref": "AWS::Region"
                    },
                    "awslogs-stream-prefix": "convox"
                  }
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "Memory": {
              "Fn::Select": [
                2,
                {
                  "Ref": "NotagentFormation"
                }
              ]
            },
            "Name": "notagent",
            "PortMappings": [
              {
                "Ref": "AWS::NoValue"
              }
            ],
            "Privileged": "false",
            "SecureEnvironment": false,
            "Services": [
              {
                "Ref": "AWS::NoValue"
              }
            ],
            "Volumes": [
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ]
      },
      "Type": "Custom::ECSTaskDefinition",
      "Version": "1.0"
    },
    "RegistryRepository": {
      "Properties": {
        "RepositoryName": {
          "Ref": "AWS::StackName"
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomTopic",
            "Arn"
          ]
        }
      },
      "Type": "Custom::ECRRepository",
      "Version": "1.0"
    },
    "SecureEnvironmentRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs-tasks.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/convox/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": {
                "Action": [
                  "kms:Encrypt",
                  "kms:Decrypt"
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Ref": "Key"
                  }
                ]
              },
              "Version": "2012-10-17"
            },
            "PolicyName": "SecureEnvironmentPolicy"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "ServiceAgent1": {
      "Condition": "EnabledAgent1",
      "DependsOn": [
        "CustomTopic",
        "ServiceRole"
      ],
      "Properties": {
        "Cluster": {
          "Ref": "Cluster"
        },
        "DeploymentConfiguration": {
          "MaximumPercent": "200",
          "MinimumHealthyPercent": "100"
        },
        "DesiredCount": {
          "Fn::Select": [
            0,
            {
              "Ref": "Agent1Formation"
            }
          ]
        },
        "TaskDefinition": {
          "Ref": "Agent1ECSTaskDefinition"
        }
      },
      "Type": "AWS::ECS::Service"
    },
    "ServiceAgent2": {
      "Condition": "EnabledAgent2",
      "DependsOn": [
        "CustomTopic",
        "ServiceRole"
      ],
      "Properties": {
        "Cluster": {
          "Ref": "Cluster"
        },
        "DeploymentConfiguration": {
          "MaximumPercent": "200",
          "MinimumHealthyPercent": "100"
        },
        "DesiredCount": {
          "Fn::Select": [
            0,
            {
              "Ref": "Agent2Formation"
            }
          ]
        },
        "TaskDefinition": {
          "Ref": "Agent2ECSTaskDefinition"
        }
      },
      "Type": "AWS::ECS::Service"
    },
    "ServiceNotagent": {
      "Condition": "EnabledNotagent",
      "DependsOn": [
        "CustomTopic",
        "ServiceRole"
      ],
      "Properties": {
        "Cluster": {
          "Ref": "Cluster"
        },
        "DeploymentConfiguration": {
          "MaximumPercent": "200",
          "MinimumHealthyPercent": "100"
        },
        "DesiredCount": {
          "Fn::Select": [
            0,
            {
              "Ref": "NotagentFormation"
            }
          ]
        },
        "TaskDefinition": {
          "Ref": "NotagentECSTaskDefinition"
        }
      },
      "Type": "AWS::ECS::Service"
    },
    "ServiceRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/convox/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "ec2:Describe*",
                    "ec2:AuthorizeSecurityGroupIngress"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ]
                }
              ]
            },
            "PolicyName": "ServiceRole"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "Settings": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AccessControl": "Private",
        "Tags": [
          {
            "Key": "system",
            "Value": "convox"
          },
          {
            "Key": "app",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      },
      "Type": "AWS::S3::Bucket"
    }
  }
}
