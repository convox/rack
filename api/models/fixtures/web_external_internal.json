{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "BalancerWebBlankHealthPath": {
      "Fn::Equals": [
        {
          "Ref": "WebHealthPath"
        },
        ""
      ]
    },
    "BalancerWebBlankHealthTimeout": {
      "Fn::Equals": [
        {
          "Ref": "WebHealthTimeout"
        },
        ""
      ]
    },
    "BalancerWebPort3001Proxy": {
      "Fn::Equals": [
        {
          "Ref": "WebPort3001Proxy"
        },
        "Yes"
      ]
    },
    "BalancerWebPort3001Secure": {
      "Fn::Equals": [
        {
          "Ref": "WebPort3001Secure"
        },
        "Yes"
      ]
    },
    "BalancerWebPort80Proxy": {
      "Fn::Equals": [
        {
          "Ref": "WebPort80Proxy"
        },
        "Yes"
      ]
    },
    "BalancerWebPort80Secure": {
      "Fn::Equals": [
        {
          "Ref": "WebPort80Secure"
        },
        "Yes"
      ]
    },
    "BlankSecurityGroup": {
      "Fn::Equals": [
        {
          "Ref": "SecurityGroup"
        },
        ""
      ]
    },
    "BlankWebService": {
      "Fn::Equals": [
        "",
        ""
      ]
    },
    "EnabledWeb": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                0,
                {
                  "Ref": "WebFormation"
                }
              ]
            },
            "-1"
          ]
        }
      ]
    },
    "Private": {
      "Fn::Equals": [
        {
          "Ref": "Private"
        },
        "Yes"
      ]
    },
    "RegionHasRegistry": {
      "Fn::Or": [
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "us-east-1"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "us-west-2"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "eu-west-1"
          ]
        }
      ]
    }
  },
  "Mappings": {
    "PortProtocol": {
      "http": {
        "InstanceProtocol": "HTTP",
        "ListenerProtocol": "HTTP",
        "SecureInstanceProtocol": "HTTPS"
      },
      "https": {
        "InstanceProtocol": "HTTP",
        "ListenerProtocol": "HTTPS",
        "SecureInstanceProtocol": "HTTPS"
      },
      "tcp": {
        "InstanceProtocol": "TCP",
        "ListenerProtocol": "TCP",
        "SecureInstanceProtocol": "SSL"
      },
      "tls": {
        "InstanceProtocol": "TCP",
        "ListenerProtocol": "SSL",
        "SecureInstanceProtocol": "SSL"
      }
    }
  },
  "Outputs": {
    "BalancerWebHost": {
      "Condition": "EnabledWeb",
      "Value": {
        "Fn::GetAtt": [
          "BalancerWebInternal",
          "DNSName"
        ]
      }
    },
    "LogGroup": {
      "Value": {
        "Ref": "LogGroup"
      }
    },
    "RegistryId": {
      "Condition": "RegionHasRegistry",
      "Value": {
        "Ref": "AWS::AccountId"
      }
    },
    "RegistryRepository": {
      "Condition": "RegionHasRegistry",
      "Value": {
        "Fn::GetAtt": [
          "RegistryRepository",
          "RepositoryName"
        ]
      }
    },
    "Settings": {
      "Value": {
        "Ref": "Settings"
      }
    },
    "WebPort3001Balancer": {
      "Condition": "EnabledWeb",
      "Value": {
        "Ref": "WebPort3001Balancer"
      }
    },
    "WebPort3001BalancerName": {
      "Condition": "EnabledWeb",
      "Value": "httpd-web-XHW5F4P-i"
    },
    "WebPort80Balancer": {
      "Condition": "EnabledWeb",
      "Value": {
        "Ref": "WebPort80Balancer"
      }
    },
    "WebPort80BalancerName": {
      "Condition": "EnabledWeb",
      "Value": "httpd-web-XHW5F4P-i"
    }
  },
  "Parameters": {
    "Cluster": {
      "Default": "",
      "Description": "",
      "Type": "String"
    },
    "DeploymentMaximum": {
      "Default": "200",
      "Description": "Maximum percentage of processes to keep running while deploying",
      "Type": "Number"
    },
    "DeploymentMinimum": {
      "Default": "100",
      "Description": "Minimum percentage of processes to keep running while deploying",
      "Type": "Number"
    },
    "Environment": {
      "Default": "",
      "Description": "",
      "Type": "String"
    },
    "Key": {
      "Default": "",
      "Description": "",
      "Type": "String"
    },
    "Private": {
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Default": "No",
      "Description": "Create internal load balancers in private subnets",
      "Type": "String"
    },
    "Release": {
      "Default": "",
      "Description": "",
      "Type": "String"
    },
    "Repository": {
      "Default": "",
      "Description": "Source code repository",
      "Type": "String"
    },
    "SecurityGroup": {
      "Default": "",
      "Description": "The Load balancer security group for this app",
      "Type": "String"
    },
    "Subnets": {
      "Default": "",
      "Description": "VPC subnets for this app",
      "Type": "List\u003cAWS::EC2::Subnet::Id\u003e"
    },
    "SubnetsPrivate": {
      "Default": "",
      "Description": "VPC private subnets for this app",
      "Type": "List\u003cAWS::EC2::Subnet::Id\u003e"
    },
    "VPC": {
      "Default": "",
      "Description": "VPC for this app",
      "Type": "AWS::EC2::VPC::Id"
    },
    "VPCCIDR": {
      "Default": "",
      "Description": "VPC CIDR for this app",
      "Type": "String"
    },
    "Version": {
      "Description": "(REQUIRED) Lambda CustomTopic Handler Release Version",
      "MinLength": "1",
      "Type": "String"
    },
    "WebFormation": {
      "Default": "1,0,256",
      "Description": "Number of processes to run, CPU units to reserve, and MB of RAM to reserve",
      "Type": "CommaDelimitedList"
    },
    "WebHealthPath": {
      "Default": "",
      "Description": "Path used when health check protocol is http(s)",
      "Type": "String"
    },
    "WebHealthTimeout": {
      "Default": "3",
      "MaxValue": 60,
      "Type": "Number"
    },
    "WebPort3001Balancer": {
      "Default": "3001",
      "Description": "",
      "Type": "String"
    },
    "WebPort3001Certificate": {
      "Default": "",
      "Description": "",
      "Type": "String"
    },
    "WebPort3001Host": {
      "Default": "5001",
      "Description": "",
      "Type": "String"
    },
    "WebPort3001Protocol": {
      "AllowedValues": [
        "http",
        "https",
        "tcp",
        "tls"
      ],
      "Default": "tls",
      "Description": "",
      "Type": "String"
    },
    "WebPort3001Proxy": {
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Default": "No",
      "Description": "",
      "Type": "String"
    },
    "WebPort3001Secure": {
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Default": "No",
      "Description": "",
      "Type": "String"
    },
    "WebPort80Balancer": {
      "Default": "80",
      "Description": "",
      "Type": "String"
    },
    "WebPort80Certificate": {
      "Default": "",
      "Description": "",
      "Type": "String"
    },
    "WebPort80Host": {
      "Default": "5000",
      "Description": "",
      "Type": "String"
    },
    "WebPort80Protocol": {
      "AllowedValues": [
        "http",
        "https",
        "tcp",
        "tls"
      ],
      "Default": "tls",
      "Description": "",
      "Type": "String"
    },
    "WebPort80Proxy": {
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Default": "No",
      "Description": "",
      "Type": "String"
    },
    "WebPort80Secure": {
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Default": "No",
      "Description": "",
      "Type": "String"
    }
  },
  "Resources": {
    "BalancerWebInternal": {
      "Condition": "EnabledWeb",
      "DependsOn": [
        "BalancerWebInternalSecurityGroup"
      ],
      "Properties": {
        "ConnectionDrainingPolicy": {
          "Enabled": true,
          "Timeout": 60
        },
        "ConnectionSettings": {
          "IdleTimeout": 3600
        },
        "CrossZone": true,
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "5",
          "Target": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Join": [
                    ":",
                    [
                      {
                        "Fn::If": [
                          "BalancerWebBlankHealthPath",
                          {
                            "Fn::If": [
                              "BalancerWebPort80Secure",
                              {
                                "Fn::FindInMap": [
                                  "PortProtocol",
                                  "tcp",
                                  "SecureInstanceProtocol"
                                ]
                              },
                              {
                                "Fn::FindInMap": [
                                  "PortProtocol",
                                  "tcp",
                                  "InstanceProtocol"
                                ]
                              }
                            ]
                          },
                          {
                            "Fn::If": [
                              "BalancerWebPort80Secure",
                              {
                                "Fn::FindInMap": [
                                  "PortProtocol",
                                  "http",
                                  "SecureInstanceProtocol"
                                ]
                              },
                              {
                                "Fn::FindInMap": [
                                  "PortProtocol",
                                  "http",
                                  "InstanceProtocol"
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "Ref": "WebPort80Host"
                      }
                    ]
                  ]
                },
                {
                  "Ref": "WebHealthPath"
                }
              ]
            ]
          },
          "Timeout": {
            "Fn::If": [
              "BalancerWebBlankHealthTimeout",
              "3",
              {
                "Ref": "WebHealthTimeout"
              }
            ]
          },
          "UnhealthyThreshold": "2"
        },
        "LBCookieStickinessPolicy": [
          {
            "PolicyName": "affinity"
          }
        ],
        "Listeners": [
          {
            "Fn::If": [
              "BalancerWebPort80Secure",
              {
                "InstancePort": {
                  "Ref": "WebPort80Host"
                },
                "InstanceProtocol": {
                  "Fn::FindInMap": [
                    "PortProtocol",
                    {
                      "Ref": "WebPort80Protocol"
                    },
                    "SecureInstanceProtocol"
                  ]
                },
                "LoadBalancerPort": {
                  "Ref": "WebPort80Balancer"
                },
                "Protocol": {
                  "Fn::FindInMap": [
                    "PortProtocol",
                    {
                      "Ref": "WebPort80Protocol"
                    },
                    "ListenerProtocol"
                  ]
                },
                "SSLCertificateId": {
                  "Ref": "WebPort80Certificate"
                }
              },
              {
                "InstancePort": {
                  "Ref": "WebPort80Host"
                },
                "InstanceProtocol": {
                  "Fn::FindInMap": [
                    "PortProtocol",
                    {
                      "Ref": "WebPort80Protocol"
                    },
                    "InstanceProtocol"
                  ]
                },
                "LoadBalancerPort": {
                  "Ref": "WebPort80Balancer"
                },
                "Protocol": {
                  "Fn::FindInMap": [
                    "PortProtocol",
                    {
                      "Ref": "WebPort80Protocol"
                    },
                    "ListenerProtocol"
                  ]
                },
                "SSLCertificateId": {
                  "Ref": "WebPort80Certificate"
                }
              }
            ]
          },
          {
            "Fn::If": [
              "BalancerWebPort3001Secure",
              {
                "InstancePort": {
                  "Ref": "WebPort3001Host"
                },
                "InstanceProtocol": {
                  "Fn::FindInMap": [
                    "PortProtocol",
                    {
                      "Ref": "WebPort3001Protocol"
                    },
                    "SecureInstanceProtocol"
                  ]
                },
                "LoadBalancerPort": {
                  "Ref": "WebPort3001Balancer"
                },
                "Protocol": {
                  "Fn::FindInMap": [
                    "PortProtocol",
                    {
                      "Ref": "WebPort3001Protocol"
                    },
                    "ListenerProtocol"
                  ]
                },
                "SSLCertificateId": {
                  "Ref": "WebPort3001Certificate"
                }
              },
              {
                "InstancePort": {
                  "Ref": "WebPort3001Host"
                },
                "InstanceProtocol": {
                  "Fn::FindInMap": [
                    "PortProtocol",
                    {
                      "Ref": "WebPort3001Protocol"
                    },
                    "InstanceProtocol"
                  ]
                },
                "LoadBalancerPort": {
                  "Ref": "WebPort3001Balancer"
                },
                "Protocol": {
                  "Fn::FindInMap": [
                    "PortProtocol",
                    {
                      "Ref": "WebPort3001Protocol"
                    },
                    "ListenerProtocol"
                  ]
                },
                "SSLCertificateId": {
                  "Ref": "WebPort3001Certificate"
                }
              }
            ]
          },
          {
            "Ref": "AWS::NoValue"
          }
        ],
        "LoadBalancerName": "httpd-web-XHW5F4P-i",
        "Policies": [
          {
            "Fn::If": [
              "BalancerWebPort80Proxy",
              {
                "Attributes": [
                  {
                    "Name": "ProxyProtocol",
                    "Value": "true"
                  }
                ],
                "InstancePorts": [
                  {
                    "Ref": "WebPort80Host"
                  }
                ],
                "PolicyName": "EnableProxyProtocol",
                "PolicyType": "ProxyProtocolPolicyType"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          {
            "Fn::If": [
              "BalancerWebPort3001Proxy",
              {
                "Attributes": [
                  {
                    "Name": "ProxyProtocol",
                    "Value": "true"
                  }
                ],
                "InstancePorts": [
                  {
                    "Ref": "WebPort3001Host"
                  }
                ],
                "PolicyName": "EnableProxyProtocol",
                "PolicyType": "ProxyProtocolPolicyType"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          {
            "Ref": "AWS::NoValue"
          }
        ],
        "Scheme": "internal",
        "SecurityGroups": [
          {
            "Fn::If": [
              "BlankSecurityGroup",
              {
                "Ref": "BalancerWebInternalSecurityGroup"
              },
              {
                "Ref": "SecurityGroup"
              }
            ]
          }
        ],
        "Subnets": {
          "Fn::If": [
            "Private",
            {
              "Ref": "SubnetsPrivate"
            },
            {
              "Ref": "Subnets"
            }
          ]
        }
      },
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
    },
    "BalancerWebInternalSecurityGroup": {
      "Condition": "EnabledWeb",
      "Properties": {
        "GroupDescription": {
          "Fn::Join": [
            " ",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-balancer"
            ]
          ]
        },
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": {
              "Ref": "WebPort80Balancer"
            },
            "IpProtocol": "tcp",
            "ToPort": {
              "Ref": "WebPort80Balancer"
            }
          },
          {
            "CidrIp": {
              "Ref": "VPCCIDR"
            },
            "FromPort": {
              "Ref": "WebPort3001Balancer"
            },
            "IpProtocol": "tcp",
            "ToPort": {
              "Ref": "WebPort3001Balancer"
            }
          },
          {
            "Ref": "AWS::NoValue"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "CustomTopic": {
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                "convox",
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                "release/",
                {
                  "Ref": "Version"
                },
                "/formation.zip"
              ]
            ]
          }
        },
        "Handler": "lambda.external",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CustomTopicRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs",
        "Timeout": "30"
      },
      "Type": "AWS::Lambda::Function"
    },
    "CustomTopicRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "*",
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "Administrator"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "LogGroup": {
      "Type": "AWS::Logs::LogGroup"
    },
    "RegistryRepository": {
      "Condition": "RegionHasRegistry",
      "Properties": {
        "Name": {
          "Ref": "AWS::StackName"
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomTopic",
            "Arn"
          ]
        }
      },
      "Type": "Custom::ECRRepository",
      "Version": "1.0"
    },
    "ServiceRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "ec2:Describe*",
                    "ec2:AuthorizeSecurityGroupIngress"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ]
                }
              ]
            },
            "PolicyName": "ServiceRole"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "Settings": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AccessControl": "Private",
        "Tags": [
          {
            "Key": "system",
            "Value": "convox"
          },
          {
            "Key": "app",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      },
      "Type": "AWS::S3::Bucket"
    },
    "WebECSService": {
      "Condition": "EnabledWeb",
      "DependsOn": [
        "BalancerWebInternal",
        "CustomTopic",
        "ServiceRole"
      ],
      "Properties": {
        "Cluster": {
          "Ref": "Cluster"
        },
        "DeploymentMaximumPercent": {
          "Ref": "DeploymentMaximum"
        },
        "DeploymentMinimumPercent": {
          "Ref": "DeploymentMinimum"
        },
        "DesiredCount": {
          "Fn::Select": [
            0,
            {
              "Ref": "WebFormation"
            }
          ]
        },
        "LoadBalancers": [
          {
            "Fn::Join": [
              ":",
              [
                {
                  "Ref": "BalancerWebInternal"
                },
                "web",
                "3000"
              ]
            ]
          },
          {
            "Fn::Join": [
              ":",
              [
                {
                  "Ref": "BalancerWebInternal"
                },
                "web",
                "3001"
              ]
            ]
          },
          {
            "Ref": "AWS::NoValue"
          }
        ],
        "Name": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "web"
            ]
          ]
        },
        "Role": {
          "Ref": "ServiceRole"
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomTopic",
            "Arn"
          ]
        },
        "TaskDefinition": {
          "Ref": "WebECSTaskDefinition"
        }
      },
      "Type": "Custom::ECSService",
      "Version": "1.0"
    },
    "WebECSTaskDefinition": {
      "DependsOn": [
        "CustomTopic",
        "ServiceRole"
      ],
      "Properties": {
        "Environment": {
          "Ref": "Environment"
        },
        "Key": {
          "Ref": "Key"
        },
        "Name": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "web"
            ]
          ]
        },
        "Release": {
          "Ref": "Release"
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomTopic",
            "Arn"
          ]
        },
        "Tasks": [
          {
            "Fn::If": [
              "BlankWebService",
              {
                "Cpu": {
                  "Fn::Select": [
                    1,
                    {
                      "Ref": "WebFormation"
                    }
                  ]
                },
                "Environment": {
                  "APP": "httpd",
                  "AWS_REGION": "us-test-2",
                  "LOG_GROUP": {
                    "Ref": "LogGroup"
                  },
                  "PROCESS": "web",
                  "RACK": "convox-test"
                },
                "Image": "",
                "Memory": {
                  "Fn::Select": [
                    2,
                    {
                      "Ref": "WebFormation"
                    }
                  ]
                },
                "Name": "web",
                "PortMappings": [
                  {
                    "Fn::Join": [
                      ":",
                      [
                        {
                          "Ref": "WebPort80Host"
                        },
                        "3000"
                      ]
                    ]
                  },
                  {
                    "Fn::Join": [
                      ":",
                      [
                        {
                          "Ref": "WebPort3001Host"
                        },
                        "3001"
                      ]
                    ]
                  },
                  {
                    "Ref": "AWS::NoValue"
                  }
                ],
                "Privileged": "false",
                "Services": [
                  {
                    "Ref": "AWS::NoValue"
                  }
                ],
                "Volumes": [
                  {
                    "Ref": "AWS::NoValue"
                  }
                ]
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ]
      },
      "Type": "Custom::ECSTaskDefinition",
      "Version": "1.0"
    }
  }
}
